{"version":3,"sources":["dcs/prototype_6/deriver.cljs"],"mappings":"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","names":["dcs.prototype-6.deriver/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","dcs.prototype-6.state/household-waste-holder","population","dcs.prototype-6.state/population-holder","js/console.log","start-time","dcs.prototype-6.util/now","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","cljs.core/first","household-waste-derivation-generation","cljs.core.map","p__44668","map__44671","cljs.core/--destructure-map","tonnes","household-waste-derivation-management","p__44673","map__44674","management","household-waste-derivation-composition","p__44675","map__44676","material","household-waste-derivation-percent-recycled","household-waste'","p1__44607#","cljs.core.remove","cljs.core._EQ_","regions-and-scotland","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","household-waste-percentage-recycled-scotland","p1__44608#","cljs.core.filter","scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste-percentage-recycled","cljs.core.concat","latest-year","cljs.core.apply","cljs.core/max","household-waste-derivation-generation-positions","p1__44609#","cljs.core/contains?","p1__44610#","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__44611#","p__44683","vec__44684","cljs.core.nth","coll","p1__44612#","cljs.core/PersistentVector","dcs.prototype-6.data-shaping/trend","household-waste-derivation-percent-recycled-positions","p1__44613#","p1__44614#","cljs.core/reverse","p1__44624#","p__44717","vec__44718","p1__44625#","cljs.core/reset!","dcs.prototype-6.state/household-waste-derivation-generation-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-cursor","dcs.prototype-6.state/household-waste-derivation-management-cursor","dcs.prototype-6.state/household-waste-derivation-composition-cursor","dcs.prototype-6.state/household-waste-derivation-generation-positions-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-cursor","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.deriver/maybe-calc-household-co2e-derivations","household-co2e","dcs.prototype-6.state/household-co2e-holder","household-co2e-derivation-generation","p__44727","map__44730","household-co2e-derivation-generation-positions","p1__44721#","p1__44722#","p1__44723#","p__44731","vec__44732","p1__44725#","dcs.prototype-6.state/household-co2e-derivation-generation-cursor","dcs.prototype-6.state/household-co2e-derivation-generation-positions-cursor","dcs.prototype-6.deriver/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__44740","map__44741","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-composition-cursor","dcs.prototype-6.deriver/maybe-calc-waste-site-derivations","waste-site","dcs.prototype-6.state/waste-site-holder","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","dcs.prototype-6.state/waste-site-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-bin-collection-derivations","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","derivation-generation0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","derivation-composition0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","derivation-missed","p__44755","vec__44756","vec__44759","quarter","cljs.core/+","population-max-year","x__4252__auto__","y__4253__auto__","derivation-generation","p__44762","map__44763","derivation-composition","p__44764","map__44765","dcs.prototype-6.state/stirling-bin-collection-derivation-generation-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-composition-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-percent-recycled-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-missed-bins-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-tonnes-derivations","dcs.prototype-6.state/stirling-community-food-tonnes-holder","derivation-tonnes","derivation-flow","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-tonnes-cursor","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-flow-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-footfall-derivations","footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","derivation","dcs.prototype-6.state/stirling-community-food-footfall-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-fairshare-derivations","raw","dcs.prototype-6.state/fairshare-holder","derivation-material","cljs.core.assoc","cljs.core.dissoc","derivation-co2e","dcs.prototype-6.state/fairshare-derivation-material-cursor","dcs.prototype-6.state/fairshare-derivation-co2e-cursor","dcs.prototype-6.deriver/maybe-calc-ace-furniture-derivations","counts","dcs.prototype-6.state/ace-furniture-count-holder","avg-weights","dcs.prototype-6.state/ace-furniture-avg-weight-holder","furniture-to-scottishCarbonMetric","dcs.prototype-6.state/ace-furniture-to-scottishCarbonMetric-holder","co2e-multiplier","dcs.prototype-6.state/co2e-multiplier-holder","vec__44770","vec__44773","category-trends","item-trends","dcs.prototype-6.data-shaping/calc-ace-furniture-trends","avg-weights-lookup-map","lookup-avg-weight","category","item","weights","p__44784","map__44786","count","flights-per-category","flights-per-item","dcs.prototype-6.data-shaping/calc-ace-furniture-flights-worth","dcs.prototype-6.state/ace-furniture-derivation-count-cursor","dcs.prototype-6.state/ace-furniture-derivation-category-trends-cursor","dcs.prototype-6.state/ace-furniture-derivation-item-trends-cursor","dcs.prototype-6.state/ace-furniture-derivation-weight-cursor","dcs.prototype-6.state/ace-furniture-derivation-flights-per-category-cursor","dcs.prototype-6.state/ace-furniture-derivation-flights-per-item-cursor","dcs.prototype-6.deriver/maybe-calc-household-waste-analysis-derivations","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","household-waste-analysis-derivation","dcs.prototype-6.state/household-waste-analysis-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-meta-derivations","meta","dcs.prototype-6.state/meta-holder","dcs.prototype-6.state/meta-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-annotations-derivations","regional-dashboard-annotations","dcs.prototype-6.state/regional-dashboard-annotations-holder","household-waste-analysis-annotations","dcs.prototype-6.state/household-waste-analysis-annotations-holder","cljs.core/flatten","iter__4564__auto__","s__44806","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","b__44808","cljs.core/chunk-buffer","i__44807","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44805","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","annotations-rows","ks","cljs.core/keyword","row","cljs.core/assoc","cljs.core.interleave","cljs.core/dissoc","s__44814","b__44816","i__44815","vec__44817","iter__44813","vec__44825","s__44829","b__44831","i__44830","vec__44838","iter__44828","vec__44841","k","v","clojure.string/blank?","cljs.core.keyword","x","cljs.core/type","dcs.prototype-6.state/annotations-derivation-cursor","cljs.core/add-watch","_key","_atom","_old-state","new-state","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.prototype-6.deriver\n  (:require [clojure.string :as str]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping]))\n\n\n(defn maybe-calc-household-waste-derivations \n  []\n  (let [household-waste @state/household-waste-holder\n        population      @state/population-holder]\n\n    (when (and (some? household-waste)\n               (some? population))\n      (js/console.log \"Calculating household-waste-derivations\")\n\n      (let [start-time                                            (util/now)\n\n            ;; Roll-up to get values for (region, year) pairs\n            household-waste-derivation-generation0                (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n            ;; Roll-up to get values for (region, year, management) triples\n            household-waste-derivation-management0                (data-shaping/rollup-household-waste-materials household-waste)\n\n            ;; Roll-up to get values for (region, year, material) triples\n            household-waste-derivation-composition0               (data-shaping/rollup-household-waste-managements household-waste)\n\n            ;; Prep for the per citizen calculation\n            population-for-lookup                                 (group-by (juxt :region :year) population)\n            lookup-population                                     (fn [region year] (-> population-for-lookup (get [region year]) first :count))\n\n            ;; Calculate the per citizen values\n            household-waste-derivation-generation                 (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                           :year   year\n                                                                                                           :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-generation0)\n            household-waste-derivation-management                 (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                      :year       year\n                                                                                                                      :management management\n                                                                                                                      :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-management0)\n            household-waste-derivation-composition                (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                    :year     year\n                                                                                                                    :material material\n                                                                                                                    :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-composition0)\n\n            ;; Calculate the percentage recycled values\n            household-waste-derivation-percent-recycled          (let [household-waste' (remove #(= \"Scot gov target\" (:region %)) household-waste) ;; remove the \"Scot gov target\" records that an earlier stage added\n                                                                       regions-and-scotland (data-shaping/calc-household-waste-percentage-recycled household-waste')\n                                                                       household-waste-percentage-recycled-scotland (filter #(= \"Scotland\" (:region %)) regions-and-scotland)\n                                                                       scotGovTarget (data-shaping/calc-scotGovTarget-for-household-waste-percentage-recycled household-waste-percentage-recycled-scotland)]\n                                                                   (concat regions-and-scotland scotGovTarget))\n\n            ;; Calculate positions\n            latest-year                                           (->> household-waste\n                                                                       (map :year)\n                                                                       (apply max))\n            household-waste-derivation-generation-positions       {:latest-positions (->> household-waste-derivation-generation\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (filter #(= latest-year (:year %)))\n                                                                                          (sort-by :tonnes)\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :year     latest-year})))\n                                                                   :trend-positions  (->> household-waste-derivation-generation\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (group-by :region)\n                                                                                          (map (fn [[region coll]] {:region region\n                                                                                                                    :trend  (->> coll\n                                                                                                                                 (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                 data-shaping/trend)}))\n                                                                                          (sort-by :trend)\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :trend    (:trend data-shaping/trend)})))}\n\n            household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (filter #(= latest-year (:year %)))\n                                                                                          (sort-by :percentage)\n                                                                                          reverse\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :year     latest-year})))\n                                                                   :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (group-by :region)\n                                                                                          (map (fn [[region coll]] {:region region\n                                                                                                                    :trend  (->> coll\n                                                                                                                                 (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                 data-shaping/trend)}))\n                                                                                          (sort-by :trend)\n                                                                                          reverse\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :trend    (:trend data-shaping/trend)})))}]\n\n        (reset! state/household-waste-derivation-generation-cursor household-waste-derivation-generation)\n        (reset! state/household-waste-derivation-percent-recycled-cursor household-waste-derivation-percent-recycled)\n        (reset! state/household-waste-derivation-management-cursor household-waste-derivation-management)\n        (reset! state/household-waste-derivation-composition-cursor household-waste-derivation-composition)\n        (reset! state/household-waste-derivation-generation-positions-cursor household-waste-derivation-generation-positions)\n        (reset! state/household-waste-derivation-percent-recycled-positions-cursor household-waste-derivation-percent-recycled-positions)\n        (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations \n  []\n  (let [household-co2e @state/household-co2e-holder\n        population     @state/population-holder]\n\n    (when (and (some? household-co2e)\n               (some? population))\n      (js/console.log \"Calculating household-co2e-derivations\")\n\n      (let [start-time                                     (util/now)\n\n                       ;; Prep for the per citizen calculation\n            population-for-lookup                          (group-by (juxt :region :year) population)\n            lookup-population                              (fn [region year] (-> population-for-lookup (get [region year]) first :count))\n\n                       ;; Calculate the per citizen values\n            household-co2e-derivation-generation           (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                    :year   year\n                                                                                                    :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                household-co2e)\n\n                       ;; Calculate positions\n            latest-year                                    (->> household-co2e\n                                                                (map :year)\n                                                                (apply max))\n            household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                   (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                   (filter #(= latest-year (:year %)))\n                                                                                   (sort-by :tonnes)\n                                                                                   (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                            :position (inc ix)\n                                                                                                            :year     latest-year})))\n                                                            :trend-positions  (->> household-co2e-derivation-generation\n                                                                                   (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                   (group-by :region)\n                                                                                   (map (fn [[region coll]] {:region region\n                                                                                                             :trend  (->> coll\n                                                                                                                          (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                          data-shaping/trend)}))\n                                                                                   (sort-by :trend)\n                                                                                   (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                            :position (inc ix)\n                                                                                                            :trend    (:trend data-shaping/trend)})))}]\n\n        (reset! state/household-co2e-derivation-generation-cursor household-co2e-derivation-generation)\n        (reset! state/household-co2e-derivation-generation-positions-cursor household-co2e-derivation-generation-positions)\n        (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations \n  []\n  (let [business-waste-by-region @state/business-waste-by-region-holder]\n\n    (when (some? business-waste-by-region)\n      (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n      (let [start-time                                      (util/now)\n            \n            region-count                                    (->> business-waste-by-region\n                                                                 (map :region)\n                                                                 distinct\n                                                                 count)\n\n            ;; Roll-up to get values for (region, year) pairs\n            business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n            ;; Scotland (total) -> Scotland average\n            business-waste-by-region-derivation-generation  (map (fn [{:keys [region year tonnes]\n                                                                       :as   original}] (if (contains? #{\"Scotland\" \"Scot gov target\"} region)\n                                                                                          {:region (if (= \"Scotland\" region)\n                                                                                                     \"Scotland average\"\n                                                                                                     \"Scot gov target\")\n                                                                                           :year   year\n                                                                                           :tonnes (double (/ tonnes region-count))}\n                                                                                          original))\n                                                                 business-waste-by-region-derivation-generation0)\n\n            ;; No actual deriving needed for the composition\n            business-waste-by-region-derivation-composition business-waste-by-region]\n\n        (reset! state/business-waste-by-region-derivation-generation-cursor business-waste-by-region-derivation-generation)\n        (reset! state/business-waste-by-region-derivation-composition-cursor business-waste-by-region-derivation-composition)\n        (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-waste-site-derivations \n  []\n  (let [waste-site @state/waste-site-holder]\n\n    (when (some? waste-site)\n      (js/console.log \"Calculating waste-site-derivations\")\n\n      (let [start-time            (util/now)\n\n            waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n        (reset! state/waste-site-derivation-cursor waste-site-derivation)\n        (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-bin-collection-derivations \n  []\n  (let [stirling-bin-collection @state/stirling-bin-collection-holder\n        population              @state/population-holder]\n\n    (when (and (some? stirling-bin-collection)\n               (some? population))\n      (js/console.log \"Calculating stirling-bin-collection-derivations\")\n\n      (let [start-time                  (util/now)\n\n            ;; Roll-up to get values for (region, year, quarter) triples\n            derivation-generation0      (data-shaping/rollup-stirling-bin-collection-ma-re-mi stirling-bin-collection)\n\n            ;; Roll-up to get values for (region, year, quarter, material) quadruples\n            derivation-composition0     (data-shaping/rollup-stirling-bin-collection-re-mi stirling-bin-collection)\n\n            ;; Calculate the percentage recycled values\n            derivation-percent-recycled (data-shaping/calc-stirling-bin-collection-percentage-recycled stirling-bin-collection)\n\n            ;; Filter for missed-bin? then roll-up to get values for (year, quarter) pairs\n            derivation-missed           (->> stirling-bin-collection\n                                             (filter :missed-bin?)\n                                             (group-by (juxt :year :quarter))\n                                             (map (fn [[[year quarter] coll]] {:year    year\n                                                                               :quarter quarter\n                                                                               :tonnes  (->> coll\n                                                                                             (map :tonnes)\n                                                                                             (apply +))})))\n\n            ;; Prep for the per citizen calculation\n            population-max-year         (->> population (map :year) (apply max)) ;; assume all regions have the same max year\n            population-for-lookup       (group-by (juxt :region :year) population)\n            lookup-population           (fn [region year] (-> population-for-lookup\n                                                              (get [region (min year population-max-year)]) ;; use population-max-year to avoid an out-of-bounds\n                                                              first\n                                                              :count))\n\n            ;; Calculate the per citizen values\n            derivation-generation       (map (fn [{:keys [region year quarter tonnes]}] {:region  region\n                                                                                         :year    year\n                                                                                         :quarter quarter\n                                                                                         :tonnes  (double (/ tonnes (lookup-population region year)))})\n                                             derivation-generation0)\n            derivation-composition      (map (fn [{:keys [region year quarter material tonnes]}] {:region   region\n                                                                                                  :year     year\n                                                                                                  :quarter  quarter\n                                                                                                  :material material\n                                                                                                  :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                             derivation-composition0)]\n\n        (reset! state/stirling-bin-collection-derivation-generation-cursor derivation-generation)\n        (reset! state/stirling-bin-collection-derivation-composition-cursor derivation-composition)\n        (reset! state/stirling-bin-collection-derivation-percent-recycled-cursor derivation-percent-recycled)\n        (reset! state/stirling-bin-collection-derivation-missed-bins-cursor derivation-missed)\n        (js/console.log (str \"Calculating stirling-bin-collection-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-tonnes-derivations \n  []\n  (let [tonnes @state/stirling-community-food-tonnes-holder]\n\n    (when (some? tonnes)\n    (js/console.log \"Calculating stirling-community-food-tonnes-derivations\")\n\n    (let [start-time        (util/now)\n\n          derivation-tonnes tonnes\n\n          derivation-flow   (data-shaping/calc-stirling-community-food-flow tonnes)]\n\n      (reset! state/stirling-community-food-tonnes-derivation-tonnes-cursor derivation-tonnes)\n      (reset! state/stirling-community-food-tonnes-derivation-flow-cursor derivation-flow)\n      (js/console.log (str \"Calculating stirling-community-food-tonnes-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-footfall-derivations \n  []\n  (let [footfall @state/stirling-community-food-footfall-holder]\n\n    (when (some? footfall)\n      (js/console.log \"Calculating stirling-community-food-footfall-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation footfall]\n\n        (reset! state/stirling-community-food-footfall-derivation-cursor derivation)\n        (js/console.log (str \"Calculating stirling-community-food-footfall-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-fairshare-derivations \n  []\n  (let [raw @state/fairshare-holder]\n\n    (when (some? raw)\n      (js/console.log \"Calculating fairshare-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation-material (map (fn [m] (-> m\n                                                 (assoc :tonnes (:tonnes-weight m))\n                                                 (dissoc :tonnes-weight :tonnes-co2e))) \n                                     raw)\n            derivation-co2e (map (fn [m] (-> m\n                                             (assoc :tonnes (:tonnes-co2e m))\n                                             (dissoc :tonnes-weight :tonnes-co2e)))\n                                 raw)]                            \n        \n        (reset! state/fairshare-derivation-material-cursor derivation-material)\n        (reset! state/fairshare-derivation-co2e-cursor derivation-co2e)\n        (js/console.log (str \"Calculating fairshare-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-ace-furniture-derivations \n  []\n  (let [counts @state/ace-furniture-count-holder\n        avg-weights @state/ace-furniture-avg-weight-holder\n        furniture-to-scottishCarbonMetric @state/ace-furniture-to-scottishCarbonMetric-holder\n        co2e-multiplier @state/co2e-multiplier-holder]\n\n    (when (and (some? counts)\n               (some? avg-weights)\n               (some? furniture-to-scottishCarbonMetric)\n               (some? co2e-multiplier))\n      (js/console.log \"Calculating ace-furniture-derivations\")\n      \n      (let [start-time      (util/now)\n            \n            ;; calc count trends\n            [category-trends item-trends] (data-shaping/calc-ace-furniture-trends counts)\n\n            ;; calc weights\n            avg-weights-lookup-map (group-by (juxt :category :item) avg-weights)\n            lookup-avg-weight (fn [category item]\n                                (->> [category item]\n                                     (get avg-weights-lookup-map)\n                                     first\n                                     :avg-kg))\n            weights (->> counts\n                         (map (fn [{:keys [category item count]\n                                    :as   m}]\n                                (assoc m :weight (* (lookup-avg-weight category item) count)))))\n\n            ;; calc flights-worths\n            [flights-per-category flights-per-item] (data-shaping/calc-ace-furniture-flights-worth weights furniture-to-scottishCarbonMetric co2e-multiplier)]\n        \n        (reset! state/ace-furniture-derivation-count-cursor counts)\n        (reset! state/ace-furniture-derivation-category-trends-cursor category-trends)\n        (reset! state/ace-furniture-derivation-item-trends-cursor item-trends)\n        (reset! state/ace-furniture-derivation-weight-cursor weights)\n        (reset! state/ace-furniture-derivation-flights-per-category-cursor flights-per-category)\n        (reset! state/ace-furniture-derivation-flights-per-item-cursor flights-per-item)\n        (js/console.log (str \"Calculating ace-furniture-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-waste-analysis-derivations \n  []\n  (let [household-waste-analysis @state/household-waste-analysis-holder]\n\n    (when (some? household-waste-analysis)\n      (js/console.log \"Calculating household-waste-analysis-derivations\")\n\n      (let [start-time                          (util/now)\n\n            household-waste-analysis-derivation household-waste-analysis]\n\n        (reset! state/household-waste-analysis-derivation-cursor household-waste-analysis-derivation)\n        (js/console.log (str \"Calculating household-waste-analysis-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n\n(defn maybe-calc-meta-derivations\n  []\n  (let [meta       @state/meta-holder]\n\n    (when (some? meta)\n      \n      (js/console.log \"Calculating meta-derivations\")\n\n      (let [start-time (util/now)\n            \n            derivation meta ;; just use as is\n            ]                            \n        \n        (reset! state/meta-derivation-cursor derivation)\n        (js/console.log (str \"Calculating meta-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-annotations-derivations\n  []\n  (let [regional-dashboard-annotations       @state/regional-dashboard-annotations-holder\n        household-waste-analysis-annotations @state/household-waste-analysis-annotations-holder]\n\n    (when (and (some? regional-dashboard-annotations)\n               (some? household-waste-analysis-annotations))\n\n      (js/console.log \"Calculating annotations-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation (flatten\n                        (for [annotations-rows [regional-dashboard-annotations household-waste-analysis-annotations]]\n                          (let [ks (->> annotations-rows \n                                        first \n                                        (map keyword))]\n                            (->> annotations-rows\n                                 rest\n                                 (map (fn [row]\n                                        (apply assoc {} \n                                               (interleave ks row))))\n                                 \n                                 (map (fn [m] \n                                        (apply dissoc m\n                                               (for [[k v] m\n                                                     :when (str/blank? v)] k))))\n                                 (map (fn [m]\n                                        (assoc m \n                                               :record-type (keyword (:record-type m)))))))))\n            ]\n        \n        (let [x (first derivation)]\n          (js/console.log \"deriver x \" (str x))\n          (js/console.log \"deriver x raw\" x)\n          (js/console.log \"deriver x type\" (str (type x)))\n          (js/console.log \"deriver x :record-type\" (str (:record-type x)))\n          (js/console.log \"deriver x :text\" (str (:text x)))\n          (js/console.log \"deriver x with :text dissoc\" (str (dissoc x :text))))\n\n        (reset! state/annotations-derivation-cursor derivation)\n        (js/console.log (str \"Calculating annotations-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch state/population-holder :household-waste-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/population-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch state/waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n(add-watch state/stirling-bin-collection-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/stirling-community-food-tonnes-holder :stirling-community-food-tonnes-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-tonnes-derivations))))\n\n(add-watch state/stirling-community-food-footfall-holder :stirling-community-food-footfall-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-footfall-derivations))))\n\n(add-watch state/fairshare-holder :fairshare-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-fairshare-derivations))))\n\n(add-watch state/ace-furniture-count-holder :ace-furniture-count-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-derivations))))\n\n(add-watch state/ace-furniture-avg-weight-holder :ace-furniture-avg-weight-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-derivations))))\n\n(add-watch state/ace-furniture-to-scottishCarbonMetric-holder :ace-furniture-avg-weight-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-ace-furniture-derivations))))\n\n(add-watch state/co2e-multiplier-holder :ace-furniture-avg-weight-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-ace-furniture-derivations))))\n\n(add-watch state/household-waste-analysis-holder :household-waste-analysis-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-analysis-derivations))))\n\n(add-watch state/meta-holder :meta-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-meta-derivations))))\n\n(add-watch state/regional-dashboard-annotations-holder :annotations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-annotations-derivations))))\n\n(add-watch state/household-waste-analysis-annotations-holder :annotations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-annotations-derivations))))\n"]}