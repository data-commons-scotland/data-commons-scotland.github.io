{"version":3,"sources":["spec_tools/impl.cljc"],"mappings":"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","names":["spec-tools.impl/cljs-sym","x","cljs.core/map?","spec-tools.impl/clj-sym","cljs.core/var?","v","cljs.core.symbol","spec-tools.impl/->sym","spec-tools.impl/unfn","cljs?","expr","cljs.core/seq?","cljs.core/Symbol","cljs.core/first","cljs.core._EQ_","cljs.core/name","vec__40818","seq__40819","cljs.core/seq","first__40820","cljs.core/next","vec__40821","cljs.core.nth","s","form","cljs.core/rest","cljs.core.conj","clojure.walk/postwalk-replace","spec-tools.impl/polish","cljs.core/flatten","cljs.core.keep","spec-tools.impl/polish-un","G__40831","cljs.core.keyword","spec-tools.impl/un-key","G__40832","p__40833","map__40834","cljs.core/--destructure-map","cljs.core.get","spec-tools.impl/with-key->spec","req","req-un","opt","opt-un","data","key->spec","cljs.core.concat","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","un-key->spec","cljs.core.assoc","cljs.core.merge","p__40835","map__40836","spec-tools.impl/with-real-keys","G__40837","cljs.core.update","cljs.core.partial","cljs.core/mapv","spec-tools.impl/parse-keys","m","G__40845","cljs.core.apply","cljs.core/hash-map","G__40850","p1__40838#","p1__40839#","p1__40840#","spec-tools.impl/extract-keys","map__40856","G__40857","spec-tools.impl/extract-pred-and-info","cljs.core.dissoc","spec-tools.impl/strip-fn-if-needed","head","cljs.core/count","spec-tools.impl/normalize-symbol","kw","G__40883","cljs.core/namespace","spec-tools.impl/extract-form","spec","cljs.spec.alpha/form","spec-tools.impl/qualified-name","key","cljs.core/Keyword","temp__5733__auto__","nn","spec-tools.impl/nilable-spec?","and__4149__auto__","cljs.core/boolean","G__40913","fexpr__40914","js/Error","spec-tools.impl/unwrap","coll","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","spec-tools.impl/deep-merge","seq40917","self__4759__auto__","values","cljs.core/every?","cljs.core/merge-with","cljs.core/coll?","cljs.core.reduce","cljs.core/into","cljs.core/last","spec-tools.impl/unlift-keys","ns-name","p__40943","vec__40944","acc","k","spec-tools.impl/register-spec!","cljs.spec.alpha/def-impl","spec-tools.impl/coll-of-spec","pred","type","spec-tools.form/resolve-form","cpred","cljs.core/set?","cljs.core/vector?","cljs.core.sequence","cljs.core/List","cljs.spec.alpha.every_impl","spec-tools.impl/map-of-spec","kpred","vpred","forms","tuple","cljs.spec.alpha.tuple_impl","_","p__40963","map__40964","spec-tools.impl/keys-spec","req-specs","opt-specs","req-keys","opt-keys","pred-exprs","p1__40957#","p1__40958#","cljs.core/contains?","pred-forms","cljs.core/vec","keys-pred","p","or__4160__auto__","cljs.core/reduced","cljs.spec.alpha/map-spec-impl","spec-tools.impl/nilable-spec","cljs.spec.alpha/nilable-impl","spec-tools.impl/or-spec","ks","cljs.core.mapv","preds","cljs.core/second","cljs.spec.alpha/or-spec-impl"],"sourcesContent":["(ns spec-tools.impl\n  (:refer-clojure :exclude [resolve])\n  #?(:cljs (:require-macros [spec-tools.impl :refer [resolve]]))\n  (:require\n    #?(:cljs [cljs.analyzer.api])\n    [clojure.spec.alpha :as s]\n    [spec-tools.form :as form]\n    [clojure.walk :as walk])\n  (:import\n    #?@(:clj\n        [(clojure.lang Var)])))\n\n#?(:clj\n   (defn in-cljs? [env]\n     (:ns env)))\n\n;; ClojureScript 1.9.655 and later have a resolve macro - maybe this can be\n;; eventually converted to use it.\n#?(:clj\n   (defmacro resolve\n     [env sym]\n     `(if (in-cljs? ~env)\n        ((clojure.core/resolve 'cljs.analyzer.api/resolve) ~env ~sym)\n        (clojure.core/resolve ~env ~sym))))\n\n(defn- cljs-sym [x]\n  (if (map? x)\n    (:name x)\n    x))\n\n(defn- clj-sym [x]\n  (if (var? x)\n    (let [^Var v x]\n      (symbol (str (.name (.ns v)))\n              (str (.sym v))))\n    x))\n\n(defn ->sym [x]\n  #?(:clj  (clj-sym x)\n     :cljs (cljs-sym x)))\n\n(defn- unfn [cljs? expr]\n  (if (clojure.core/and (seq? expr)\n                        (symbol? (first expr))\n                        (= \"fn*\" (name (first expr))))\n    (let [[[s] & form] (rest expr)]\n      (conj (walk/postwalk-replace {s '%} form) '[%] (if cljs? 'cljs.core/fn 'clojure.core/fn)))\n    expr))\n\n#?(:clj\n   (defn cljs-resolve [env symbol]\n     (clojure.core/or (->> symbol (resolve env) cljs-sym) symbol)))\n\n(defn polish [x]\n  (cond\n    (seq? x) (flatten (keep polish x))\n    (symbol? x) nil\n    :else x))\n\n(defn polish-un [x]\n  (some-> x polish name keyword))\n\n(defn un-key [x]\n  (some-> x name keyword))\n\n(defn with-key->spec [{:keys [req req-un opt opt-un] :as data}]\n  (let [key->spec (->> (concat opt req) (map (juxt identity identity)) (into {}))\n        un-key->spec (->> (concat opt-un req-un) (map (juxt un-key identity)) (into {}))]\n    (assoc data :key->spec (merge key->spec un-key->spec))))\n\n(defn with-real-keys [{:keys [req-un opt-un] :as data}]\n  (cond-> data\n          req-un (update :req-un (partial mapv un-key))\n          opt-un (update :opt-un (partial mapv un-key))))\n\n(defn parse-keys [form]\n  (let [m (some->> form (rest) (apply hash-map))]\n    (cond-> m\n            (:req m) (update :req #(->> % flatten (keep polish) (into [])))\n            (:req-un m) (update :req-un #(->> % flatten (keep polish) (into [])))\n            (:opt-un m) (update :opt-un #(->> % (keep polish) (into [])))\n            true (-> with-key->spec with-real-keys))))\n\n(defn extract-keys [form]\n  (let [{:keys [req opt req-un opt-un]} (some->> form (rest) (apply hash-map))]\n    (flatten (map polish (concat req opt req-un opt-un)))))\n\n#?(:clj\n   (defn resolve-form [env pred]\n     (let [cljs? (in-cljs? env)\n           res (if cljs? (partial cljs-resolve env) clojure.core/resolve)]\n       (->> pred\n            (walk/postwalk\n              (fn [x]\n                (if (symbol? x)\n                  (let [y (res x)\n                        -var-get (fn [v] (if cljs? @v (var-get v)))\n                        sym-or-x (fn [v] (or (->sym v) x))]\n                    (cond\n                      (var? y) (if (s/get-spec (-var-get y))\n                                 (-var-get y)\n                                 (sym-or-x y))\n                      (some? y) (sym-or-x y)\n                      :else x))\n                  x)))\n            (unfn cljs?)))))\n\n(defn extract-pred-and-info [x]\n  (if (map? x)\n    [(:spec x) (dissoc x :spec)]\n    [x {}]))\n\n(defn strip-fn-if-needed [form]\n  (let [head (first form)]\n    ;; Deal with the form (clojure.core/fn [%] (foo ... %))\n    ;; We should just use core.match...\n    (if (and (= (count form) 3) (= head #?(:clj 'clojure.core/fn :cljs 'cljs.core/fn)))\n      (nth form 2)\n      form)))\n\n(defn normalize-symbol [kw]\n  (case (and (symbol? kw) (namespace kw))\n    \"spec-tools.spec\" (symbol \"clojure.core\" (name kw))\n    \"cljs.core\" (symbol \"clojure.core\" (name kw))\n    \"cljs.spec.alpha\" (symbol \"clojure.spec.alpha\" (name kw))\n    kw))\n\n(defn extract-form [spec]\n  (if (seq? spec) spec (s/form spec)))\n\n(defn qualified-name [key]\n  (if (keyword? key)\n    (if-let [nn (namespace key)]\n      (str nn \"/\" (name key))\n      (name key))\n    key))\n\n(defn nilable-spec? [spec]\n  (let [form (and spec (s/form spec))]\n    (boolean\n      (if (seq? form)\n        (some-> form\n                seq\n                first\n                #{'clojure.spec.alpha/nilable\n                  'cljs.spec.alpha/nilable})))))\n\n(defn unwrap\n  \"Unwrap [x] to x. Asserts that coll has exactly one element.\"\n  [coll]\n  {:pre [(= 1 (count coll))]}\n  (first coll))\n\n(defn deep-merge [& values]\n  (cond\n    (every? map? values)\n    (apply merge-with deep-merge values)\n\n    (every? coll? values)\n    (reduce into values)\n\n    :else\n    (last values)))\n\n(defn unlift-keys [data ns-name]\n  (reduce\n    (fn [acc [k v]]\n      (if (= ns-name (namespace k))\n        (assoc acc (keyword (name k)) v)\n        acc))\n    {} data))\n\n;;\n;; FIXME: using ^:skip-wiki functions from clojure.spec. might break.\n;;\n\n(defn register-spec! [k s]\n  (s/def-impl k (s/form s) s))\n\n;;\n;; functional clojure.spec\n;;\n\n(defn coll-of-spec [pred type]\n  (let [form (form/resolve-form pred)\n        cpred (if (set? type) set? vector?)]\n    (clojure.spec.alpha/every-impl\n      form\n      pred\n      {:into type\n       ::s/conform-all true\n       ::s/describe `(s/coll-of ~form :into ~type),\n       ::s/cpred cpred,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn map-of-spec [kpred vpred]\n  (let [forms (map form/resolve-form [kpred vpred])\n        tuple (s/tuple-impl forms [kpred vpred])]\n    (clojure.spec.alpha/every-impl\n      `(s/tuple ~@forms)\n      tuple\n      {:into {}\n       :conform-keys true\n       ::s/kfn (fn [_ v] (nth v 0))\n       ::s/conform-all true\n       ::s/describe `(s/map-of ~@forms :conform-keys true),\n       ::s/cpred map?,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn keys-spec [{:keys [req opt req-un opt-un]}]\n  (let [req-specs (flatten (map polish (concat req req-un)))\n        opt-specs (flatten (map polish (concat opt opt-un)))\n        req-keys (flatten (concat (map polish req) (map polish-un req-un)))\n        opt-keys (flatten (concat (map polish opt) (map polish-un opt-un)))\n        pred-exprs (concat\n                     [#(map? %)]\n                     (map (fn [x] #(contains? % x)) req-keys))\n        pred-forms (concat\n                     [`(fn [~'%] (map? ~'%))]\n                     (map (fn [k] `(fn [~'%] (contains? ~'% ~k))) req-keys))\n        keys-pred (fn [x]\n                    (reduce\n                      (fn [_ p]\n                        (clojure.core/or (p x) (reduced false)))\n                      true\n                      pred-exprs))]\n\n    (s/map-spec-impl\n      {:req-un req-un\n       :opt-un opt-un\n       :pred-exprs pred-exprs\n       :keys-pred keys-pred\n       :opt-keys opt-keys\n       :req-specs req-specs\n       :req req\n       :req-keys req-keys\n       :opt-specs opt-specs\n       :pred-forms pred-forms\n       :opt opt})))\n\n(defn nilable-spec [pred]\n  (let [form (form/resolve-form pred)]\n    (s/nilable-impl form pred nil)))\n\n(defn or-spec [v]\n  (let [ks (mapv first v)\n        preds (mapv second v)\n        forms (mapv form/resolve-form preds)]\n    (s/or-spec-impl ks forms preds nil)))\n"]}