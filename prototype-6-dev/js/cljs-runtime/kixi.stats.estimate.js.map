{"version":3,"sources":["kixi/stats/estimate.cljc"],"mappings":";AAKA,AAAA,AAAAA,AAAMI;AAAN,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAAA,AACuCQ;AADvC,AAAAN,AAAAF,AAAA,AACWI;AADX,AAAAF,AAAAF,AAAA,AACiBK;AADjB,AAAAH,AAAAF,AAAA,AACuBM;AADvB,AAAAJ,AAAAF,AAAA,AAC4BO;AAD5B,AAEE,AAAU,AAAA,AAAOD;AAAjB;;AAAA,AACE,AAAMG,AAAM,AAAGF,AAAMD;AACfI,AAAO,AAAGL,AAAM,AAAGD,AAAMK;AAD/B,AAEE,AAAA,AAAA,AAAAE,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAJKZ,AAAMC,AAAMC,AAAKC,AAAWC,AAE7BC,AACAC,AACJ,AAAA,AAAAK,AAAAhB,AAAAC,AAAAiB;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAG;;AAAA,AAAA,AAAA,AAAAH,AAAA,AAEYS,AAAEC;;AAFd,AAAA,AAAA,AAEYD;AAFZ,AAGI,AAAGd,AAAO,AAAGD,AAAMgB;;;AAHvB,AAAA,AAAA,AAAAV,AAAAG;;AAAA,AAAA,AAAA,AAAAH,AAAA,AAKeS;;AALf,AAAA,AAAA,AAKeA;AALf,AAAA,AAMKd,AAAOD;;;AANZ,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAI,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAJKhB,AAAMC,AAAMC,AAAKC,AAAWC,AAE7BC,AACAC,AACJa,AAAA,AAAAxB,AAAAC,AAAAiB;AAJKb,AAAMC,AAAMC,AAAKC,AAAWC,AAE7BC,AACAC,AACJ,AAAA,AAAAK,AAAAhB,AAAAC,AAAAiB;;;AAAAF;;AAJKX,AAAMC,AAAMC,AAAKC,AAAWC,AAE7BC,AACAC,AACJ,AAAAK,AAAAhB,AAAAC,AAAA;;;AAQN,AAAA,AAAA0B,AAAME,AACqDH;AAD3D,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA1B,AAAA0B;AAAAA,AAC8CnB;AAD9C,AAAAN,AAAAyB,AAAA,AACWE;AADX,AAAA3B,AAAAyB,AAAA,AACavB;AADb,AAAAF,AAAAyB,AAAA,AACmBtB;AADnB,AAAAH,AAAAyB,AAAA,AACyBrB;AADzB,AAAAJ,AAAAyB,AAAA,AAC8BG;AAD9B,AAAA5B,AAAAyB,AAAA,AACmCpB;AADnC,AAEE,AAAM,AAAK,AAAA,AAAGsB,AAAK,AAAK,AAAA,AAAOvB;AAA/B,AACE,AAACyB,AACA,AAAA,AAAG,AAAA,AAAK,AAAA,AAAGF,AACR,AAAGC,AAAK,AAAG,AAACE,AAAGzB,AAAOD,AACtB,AAAG,AAAA,AAAKuB,AAAG,AAAG,AAACG,AAAG,AAAGP,AAAErB,AAAQE;;AAJrC;;;AAMF,AAAA,AAAA2B,AAAME,AACyBV,AAAEW;AADjC,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAAjC,AAAAiC;AAAAA,AACkB1B;AADlB,AAAAN,AAAAgC,AAAA,AACWL;AADX,AAEE,AAAMQ,AAAW,AAAClC,AAAyBK;AACrC8B,AAAM,AAACC,AAAUF,AAAWZ;AAC5Be,AAAG,AAACZ,AAA0BpB,AAAYiB;AAC1CgB,AAAG,AAAA,AAAGZ;AACNa,AAAO,AAACC,AAAiB,AAAA,AAAA,AAACC,AAAQH,AAAKL;AACvCS,AAAI,AAAGH,AAAOF;AALpB,AAME,AAAA,AAAA,AAAA7B,AAAAC,AAAAC,AAAAiC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAPOnB,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAA,AAAAE,AAAAb,AAAAD,AAAAgB;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAA7B;;AAAA,AAAA,AAAA,AAAA6B,AAAA,AACUvB;;AADV,AAAA,AAAA,AACUA;AADV,AACa,AAAGc,AAAMO;;;AADtB,AAAA,AAAA,AAAAE,AAAA,AAEUvB;;AAFV,AAAA,AAAA,AAEUA;AAFV,AAEa,AAAGc,AAAMO;;;AAFtB,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAA5B,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAPOS,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJK,AAAA,AAAAhB,AAAAD,AAAAgB;AAPOpB,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAA,AAAAE,AAAAb,AAAAD,AAAAgB;;;AAAAF;;AAPOlB,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAAE,AAAAb,AAAAD,AAAA;;AAIJ,AAAA,AAAAkB,AAAME,AACqD5B;AAD3D,AAAA,AAAA2B,AAAAD;AAAAC,AAAA,AAAAnD,AAAAmD;AAAAA,AAC8C5C;AAD9C,AAAAN,AAAAkD,AAAA,AACWvB;AADX,AAAA3B,AAAAkD,AAAA,AACahD;AADb,AAAAF,AAAAkD,AAAA,AACmB/C;AADnB,AAAAH,AAAAkD,AAAA,AACyB9C;AADzB,AAAAJ,AAAAkD,AAAA,AAC8BtB;AAD9B,AAAA5B,AAAAkD,AAAA,AACmC7C;AADnC,AAEE,AAAM,AAAK,AAAA,AAAGsB,AAAK,AAAK,AAAA,AAAOvB;AAA/B,AACE,AAACyB,AACA,AAAA,AAAG,AAAA,AAAK,AAAA,AAAGF,AACR,AAAGC,AAAK,AAAG,AAACE,AAAGzB,AAAOD,AACtB,AAAA,AAAA,AAAK,AAAA,AAAKuB,AAAG,AAAG,AAACG,AAAG,AAAGP,AAAErB,AAAQE;;AAJvC;;;AAMF,AAAA,AAAAgD,AAAME,AACyB/B,AAAEW;AADjC,AAAA,AAAAmB,AAAAD;AAAAC,AAAA,AAAAtD,AAAAsD;AAAAA,AACkB/C;AADlB,AAAAN,AAAAqD,AAAA,AACW1B;AADX,AAEE,AAAMQ,AAAW,AAAClC,AAAyBK;AACrC8B,AAAM,AAACC,AAAUF,AAAWZ;AAC5Be,AAAG,AAACa,AAAqC7C,AAAYiB;AACrDgB,AAAG,AAAA,AAAGZ;AACNa,AAAO,AAACC,AAAiB,AAAA,AAAA,AAACC,AAAQH,AAAKL;AACvCS,AAAI,AAAGH,AAAOF;AALpB,AAME,AAAA,AAAA,AAAA7B,AAAAC,AAAAC,AAAA4C;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAPO9B,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAA,AAAAa,AAAAH,AAAAD,AAAAM;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAxC;;AAAA,AAAA,AAAA,AAAAwC,AAAA,AACUlC;;AADV,AAAA,AAAA,AACUA;AADV,AACa,AAAGc,AAAMO;;;AADtB,AAAA,AAAA,AAAAa,AAAA,AAEUlC;;AAFV,AAAA,AAAA,AAEUA;AAFV,AAEa,AAAGc,AAAMO;;;AAFtB,AAAA,AAAAa,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAvC,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAPOS,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJgB,AAAA,AAAAN,AAAAD,AAAAM;AAPO/B,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAA,AAAAa,AAAAH,AAAAD,AAAAM;;;AAAAF;;AAPO7B,AAAOrB,AAAaiB,AAAEW,AACzBC,AACAC,AACAE,AACAC,AACAC,AACAG,AACJ,AAAAa,AAAAH,AAAAD,AAAA","names":["p__36528","map__36529","cljs.core/--destructure-map","cljs.core.get","kixi.stats.estimate/simple-linear-regression","x-bar","y-bar","ss-x","ss-xy","sum-squares","slope","offset","js/kixi","js/kixi.stats","js/kixi.stats.estimate","js/kixi.stats.estimate.t_kixi$stats$estimate36530","kixi.stats.estimate/t_kixi$stats$estimate36530","_36532","meta36531","cljs.core/PROTOCOL_SENTINEL","this__4404__auto__","writer__4405__auto__","opt__4406__auto__","cljs.core/-write","kixi.stats.estimate/->t_kixi$stats$estimate36530","_","x","p__36543","map__36544","kixi.stats.estimate/regression-standard-error","n","ss-y","kixi.stats.math/sqrt","kixi.stats.math/sq","p__36563","map__36564","kixi.stats.estimate/regression-confidence-interval","alpha","regression","y-hat","kixi.stats.protocols/measure","se","df","t-crit","kixi.stats.distribution.critical_value","kixi.stats.distribution/t","err","js/kixi.stats.estimate.t_kixi$stats$estimate36565","kixi.stats.estimate/t_kixi$stats$estimate36565","_36567","meta36566","kixi.stats.estimate/->t_kixi$stats$estimate36565","p__36568","map__36569","kixi.stats.estimate/regression-prediction-standard-error","p__36570","map__36571","kixi.stats.estimate/regression-prediction-interval","js/kixi.stats.estimate.t_kixi$stats$estimate36574","kixi.stats.estimate/t_kixi$stats$estimate36574","_36576","meta36575","kixi.stats.estimate/->t_kixi$stats$estimate36574"],"sourcesContent":["(ns kixi.stats.estimate\n  (:require [kixi.stats.distribution :as d]\n            [kixi.stats.math :refer [sq sqrt]]\n            [kixi.stats.protocols :as p]))\n\n(defn simple-linear-regression\n  [{:keys [x-bar y-bar ss-x ss-xy] :as sum-squares}]\n  (when-not (zero? ss-x)\n    (let [slope (/ ss-xy ss-x)\n          offset (- y-bar (* x-bar slope))]\n      (reify\n        p/PDependent\n        (measure [_ x]\n          (+ offset (* slope x)))\n        p/PParameterised\n        (parameters [_]\n          [offset slope])))))\n\n(defn regression-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-confidence-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n\n(defn regression-prediction-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ 1 (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-prediction-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-prediction-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n"]}