{"version":3,"sources":["oz/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","p__31327","map__31328","cljs.core/--destructure-map","cljs.core.get","oz.core/apply-log-level","opts","log-level","cljs.core/Keyword","cljs.core.dissoc","cljs.core.assoc","G__31329","js/Error","cljs.core.keyword","js/module$node_modules$vega$build$vega_node.Debug","js/module$node_modules$vega$build$vega_node.Info","js/module$node_modules$vega$build$vega_node.Warn","var_args","G__31331","oz.core/embed-vega","p__31332","map__31333","elem","doc","oz.core.embed_vega","view-callback","cljs.core/clj->js","cljs.core.merge","js/module$node_modules$vega_embed$build$vega_embed","res","G__31334","err","js/console.log","oz.core/update-vega","old-doc","new-doc","old-opts","new-opts","G__31335","cljs.core._EQ_","or__4160__auto__","cljs.core.not_EQ_","G__31337","oz.core/vega","oz.core.vega","reagent.core.create_class","this","reagent.dom/dom-node","p__31338","vec__31339","cljs.core.nth","_","G__31343","oz.core/vega-lite","oz.core.vega_lite","oz.core/live-viewers-state","reagent.core.atom","oz.core/register-live-view","key","component","cljs.core.swap_BANG_","cljs.core/assoc","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","oz.core/register-live-views","p__31345","map__31346","seq31344","self__4759__auto__","cljs.core/seq","live-views","cljs.core/merge","oz.core/default-data-table-opts","G__31348","oz.core/data-table","p__31349","map__31350","data","oz.core.data_table","page","sort-key","sort-order","state","header","cljs.core.take","cljs.core.map","cljs.core.comp","cljs.core/set","cljs.core/keys","cljs.core.reduce","clojure.set/union","map__31351","cljs.core/deref","map__31352","per-page","tr-style","td-style","th-style","cljs.core.merge_with","opt1","opt2","cljs.core/map?","scoped-data","G__31353","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","last-page","cljs.core/quot","cljs.core/count","cljs.core/update","cljs.core/dec","cljs.core/inc","iter__4564__auto__","s__31355","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","b__31357","cljs.core/chunk-buffer","i__31356","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31354","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/name","G__31358","G__31359","s__31361","b__31363","i__31362","iter__31360","row","cljs.core/hash","s__31365","b__31367","i__31366","iter__31364","s__31369","b__31371","i__31370","iter__31368","oz.core.register_live_views","oz.core/live-view","live-viewers","live-viewer-keys","clojure.walk/prewalk","x","cljs.core/coll?","G__31373","cljs.core.into","oz.core/view-spec","cljs.core/chunk-first"],"sourcesContent":["(ns oz.core\n  (:require [\"vega-embed\" :as vegaEmbed]\n            [\"vega\" :as vega]\n            ;[\"leaflet-vega\" :as leafletVega]\n            ;[\"leaflet\" :as leaflet]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [reagent.core :as r]\n            [reagent.dom :as rd]))\n\n\n\n(enable-console-print!)\n\n\n(defn- apply-log-level\n  [{:as opts :keys [log-level]}]\n  (if (or (keyword? log-level) (string? log-level))\n    (-> opts\n        (dissoc :log-level)\n        (assoc :logLevel\n               (case (keyword log-level)\n                 :debug vega/Debug\n                 :info vega/Info\n                 :warn vega/Warn)))\n    opts))\n\n(defn ^:no-doc embed-vega\n  ([elem doc] (embed-vega elem doc {}))\n  ([elem doc {:as opts :keys [view-callback]}]\n   (when doc\n     (let [doc (clj->js doc)\n           opts (-> opts\n                    (dissoc :view-callback)\n                    (->> (merge {:renderer :canvas\n                                 :mode \"vega-lite\"}))\n                    (apply-log-level))\n           opts (merge {:renderer :canvas}\n                        ;; Have to think about how we want the defaults here to behave\n                       opts)]\n       (-> (vegaEmbed elem doc (clj->js opts))\n           (.then (fn [res]\n                    (when view-callback\n                      (view-callback (.-view res)))))\n           (.catch (fn [err]\n                     (js/console.log err))))))))\n\n;; WIP; TODO Finish figuring this out; A little thornier than I thought, because data can come in so many\n;; different shapes; Should clojure.spec this out:\n;; * url\n;; * named data\n;; * vega vs lite\n;; * data nested in layers\n;; * other?\n(defn ^:no-doc update-vega\n  ([elem old-doc new-doc old-opts new-opts]\n   (case\n     ;; Only rerender from scratch if the viz specification has actually changed, or if always rerender is\n     ;; specified\n     (or (:always-rerender new-opts)\n         (not= (dissoc old-doc :data) (dissoc new-doc :data))\n         (not= old-opts new-opts))\n     (embed-vega elem new-doc new-opts)\n     ;; Otherwise, just update the data component\n     ;; TODO This is the hard part to figure out\n     ;(= ())\n     ;()\n     ;; Otherwise, do nothing\n     :else\n     nil)))\n\n(defn vega\n  \"Reagent component that renders vega\"\n  ([doc] (vega doc {}))\n  ([doc opts]\n   ;; Is this the right way to do this? So vega component behaves abstractly like a vega-lite potentially?\n   (let [opts (merge {:mode \"vega\"} opts)]\n     (r/create-class\n      {:display-name \"vega\"\n       :component-did-mount (fn [this]\n                              (embed-vega (rd/dom-node this) doc opts))\n       ;; Need to look into this further to see how these args even work; may not be doing new-opts right here?\n       ;; (http://reagent-project.github.io/docs/master/reagent.core.html)\n       ;; (https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\n       :component-will-update (fn [this [_ new-doc new-opts]]\n                                ;(update-vega (rd/dom-node this) doc new-doc opts new-opts)\n                                (embed-vega (rd/dom-node this) new-doc new-opts))\n       :reagent-render (fn [doc]\n                         [:div.viz])}))))\n\n(defn vega-lite\n  \"Reagent component that renders vega-lite.\"\n  ([doc] (vega-lite doc {}))\n  ([doc opts]\n   ;; Which way should the merge go?\n   (vega doc (merge opts {:mode \"vega-lite\"}))))\n\n\n(def ^:private live-viewers-state\n  (r/atom {:vega vega\n           :vega-lite vega-lite}))\n\n(defn register-live-view\n  [key component]\n  (swap! live-viewers-state assoc key component))\n\n(defn register-live-views\n  [& {:as live-views}]\n  (swap! live-viewers-state merge live-views))\n\n\n(def ^:no-doc default-data-table-opts\n  {:per-page 50\n   :tr-style {}\n   :td-style {:padding-right 10}\n   :th-style {:padding-right 10\n              :cursor :pointer}})\n\n(defn data-table\n  ([data] (data-table data {}))\n  ([data {:keys [page sort-key sort-order]}]\n   (let [state (r/atom {:page (or page 0) :sort-key sort-key :sort-order (or sort-order :ascending)})\n         header (->> data (take 10) (map (comp set keys)) (reduce clojure.set/union))]\n     (fn [data opts]\n       (let [{:keys [page sort-key sort-order]} @state\n             {:keys [per-page tr-style td-style th-style]}\n             (merge-with (fn [opt1 opt2]\n                           (if (and (map? opt1) (map? opt2))\n                             (merge opt1 opt2)\n                             opt2))\n               default-data-table-opts\n               opts)\n             scoped-data (cond->> data\n                           sort-key (sort-by sort-key)\n                           (= :descending sort-order) (reverse)\n                           per-page (drop (* per-page page))\n                           per-page (take per-page))\n             last-page (quot (count data) per-page)]\n         [:div\n          (when (> (count data) per-page)\n            [:p\n             {:style {:margin-bottom 10}}\n             [:span\n              {:style {:padding-right 20}}\n              \"Current page: \" (inc page)]\n             (when (> page 0)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page dec))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"prev\"])\n             (when (< page last-page)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page inc))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"next\"])])\n          [:table\n           ;; header row\n           [:tr\n            {:style tr-style}\n            (for [key header]\n              ^{:key key}\n              [:th {:style th-style\n                    :on-click (fn [& _]\n                                (swap! state merge {:sort-key key\n                                                    :sort-order (if (and (= key sort-key) (= sort-order :ascending))\n                                                                  :descending\n                                                                  :ascending)}))}\n                (name key)\n                (when (= sort-key key)\n                  (case sort-order\n                    :ascending \"\u2303\"\n                    :descending \"\u2304\"))])]\n           (for [row scoped-data]\n             ^{:key (hash row)}\n             [:tr\n              {:style tr-style}\n              (for [key header]\n                ^{:key key}\n                [:td {:style td-style} (get row key)])])]])))))\n\n\n(register-live-views\n  :vega vega\n  :vega-lite vega-lite\n  :data-table data-table)\n\n(defn ^:no-doc live-view\n  ;; should handle sharing data with nodes that need it?\n  [doc]\n  ;; prewalk spec, rendering special hiccup tags like :vega and :vega-lite, and potentially other composites,\n  ;; rendering using the components above. Leave regular hiccup unchanged).\n  ;; TODO finish writing; already hooked in below so will break now\n  (let [live-viewers @live-viewers-state\n        live-viewer-keys (set (keys live-viewers))]\n    (clojure.walk/prewalk\n      (fn [x] (if (and (coll? x) (live-viewer-keys (first x)))\n                (into\n                  [(get live-viewers (first x))]\n                  (rest x))\n                x))\n      doc)))\n\n\n;; TODO Rename this to live-view; But need to make sure to edit in the repl tooling application code as well,\n;; since that's what actually uses this\n(def ^:no-doc view-spec live-view)\n  ;; should handle sharing data with nodes that need it?\n\n\n\n;(comment)\n  ;; This is still a work in progress\n  ;(defn ^:private render-leaflet-vega [dom-node]\n    ;;(.map leaflet dom-node)\n    ;(let [m (.map leaflet \"map\")\n          ;_ (.setView m (clj->js [51.505 -0.09]) 4)\n          ;tile (.tileLayer leaflet\n                           ;\"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png\"\n                           ;(clj->js {:attribution \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"}))\n\n          ;_ (.addTo tile m)\n          ;marker (.marker leaflet (clj->js [40.7128 -74.0059]))]\n      ;;(js/console.log (clj->js [40.7128 -74.0059]))\n      ;(.addTo marker m)))\n      ;;(.bindPopup marker \"a red-headed rhino\")))\n\n  ;;; This is still a work in progress\n  ;(defn ^:private leaflet-vega\n    ;\"WIP/Alpha wrapper around leaflet-vega\"\n    ;[]\n    ;(r/create-class\n      ;{:display-name \"leaflet-vega\"\n       ;:component-did-mount (fn [this]\n                              ;(render-leaflet-vega (rd/dom-node this)))\n       ;:component-did-update (fn [this [_]]\n                               ;(render-leaflet-vega (rd/dom-node this)))\n       ;:reagent-render (fn []\n                         ;[:div#map])})))\n\n\n"]}