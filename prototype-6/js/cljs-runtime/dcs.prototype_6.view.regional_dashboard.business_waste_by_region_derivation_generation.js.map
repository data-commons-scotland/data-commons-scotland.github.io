{"version":3,"sources":["dcs/prototype_6/view/regional_dashboard/business_waste_by_region_derivation_generation.cljs"],"mappings":";AAQA,AAAA,AAAMA,AAAYC,AAAMC,AAAOC;AAA/B,AACE,AAAMC,AAAW,AAACC,AAAM,AAAA,AAACC,AAAeH;AAAxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMI,AAI2DH,AAQJF;AAUvDM,AAAsBC,AACA,AAAA,AAAA,AAAA,AAACC,AAAwB,AAAA,AAAA,AAAA,AAAIH,AAC7B,AAAA,AAAA,AAAA,AAACG,AAAwB,AAAA,AAAA,AAAA,AAAIH;AAzBzD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA6BeN,AAISE,AACbI,AACAC;;AAEb,AAAA,AAAMG,AAAOT,AAAOU,AAA+CC;AAAnE,AACE,AAEMC,AAAgD,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAA,AAACC,AAAYf,AAAiD,AAAA,AAAAa;AAAaH;AAGpIM,AAAiD,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAA,AAACE,AAAc,AAAK,AAAA,AAAAF;AACrBL;AAGtDQ,AAAkD,AAAA,AAACC,AAA4BV,AAAYK;AATjG,AAAA,AAAA,AAAA,AAYIM,AAAa,AAAA,AAACxB,AAA+CE,AAAOoB,AACpEG;;AAEN,AAAA,AAAME;AAAN,AAAA,AAAA,AAAAD,AAAA,AAAAA,AAAA,AAAAA,AACGf,AAAOiB,AAAqBC,AAA6DC","names":["dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/chart-spec","title","region","data","year-count","cljs.core/count","cljs.core/group-by","layer-normal","layer-annotations","dcs.prototype-6.annotation-mech/layer-annotations","cljs.core/assoc-in","dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/chart","business-waste-by-region-derivation-generation","annotations","business-waste-by-region-derivation-generation'","p1__38700#","cljs.core.filter","cljs.core/contains?","business-waste-by-region-derivation-generation''","p1__38701#","cljs.core.map","cljs.core.assoc","business-waste-by-region-derivation-generation'''","dcs.prototype_6.annotation_mech.apply_annotations","oz.core/vega-lite","dcs.prototype-6.util/vega-embed-opts","cljs.core/deref","dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/root","dcs.prototype-6.state/region-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/annotations-derivation-cursor"],"sourcesContent":["(ns dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation\n  (:require\n   [oz.core :as oz]\n   [dcs.prototype-6.util :as util]\n   [dcs.prototype-6.annotation-mech :as anno-mech]\n   [dcs.prototype-6.state :as state]))\n\n\n(defn chart-spec [title region data]\n  (let [year-count (count (group-by :year data))\n        layer-normal {:mark       {:type \"line\" :point {:filled true #_:fill #_\"floralwhite\"}}\n                      :encoding   {:x       {:field    \"year\"\n                                             :type     \"temporal\"\n                                             :timeUnit \"year\"\n                                             :axis     {:tickCount year-count\n                                                        :title     \"year\"}}\n                                   :y       {:field \"tonnes\"\n                                             :type  \"quantitative\"\n                                             :scale {:zero false}\n                                             :axis  {:title \"tonnes\"}}\n                                   :color   {:field  \"region\"\n                                             :type   \"nominal\"\n                                             :scale  {:domain [region #_\"Scotland average\" #_\"Scot gov target\"]\n                                                      :range  [\"#fdae6b\" #_\"#1f77b4\" #_\"lightgrey\"]}\n                                             :legend nil}\n                                   :tooltip [{:field \"region\"\n                                              :type  \"nominal\"}\n                                             {:field \"year\"\n                                              :type  \"temporal\"}\n                                             {:field \"tonnes\"\n                                              :type  \"quantitative\"}]}}\n\n        layer-annotations (-> anno-mech/layer-annotations\n                              (assoc-in [:encoding :x] (-> layer-normal :encoding :x))\n                              (assoc-in [:encoding :y] (-> layer-normal :encoding :y))\n                              #_(assoc-in [:mark :dy] -8)\n                              #_(assoc-in [:mark :dx] 0))]\n    {:schema     \"https://vega.github.io/schema/vega/v5.json\"\n     :title      title\n     :width      200\n     :height     100\n     :background \"floralwhite\"\n     :data       {:values data}\n     :layer [layer-normal\n             layer-annotations]}))\n\n(defn chart [region business-waste-by-region-derivation-generation annotations]\n  (let [;; filter\n            ;;   Decided to comment-out the \"Scotland average\" (and \"Scot gov target\") because averaging business waste over the regions isn't so useful.\n        business-waste-by-region-derivation-generation' (filter #(contains? #{region #_\"Scotland average\" #_\"Scot gov target\"} (:region %)) business-waste-by-region-derivation-generation)\n\n            ;; stringify the year for Vega\n        business-waste-by-region-derivation-generation'' (map #(assoc % :year (str (:year %)))\n                                                              business-waste-by-region-derivation-generation')\n\n            ;; add annotation data\n        business-waste-by-region-derivation-generation''' (anno-mech/apply-annotations annotations business-waste-by-region-derivation-generation'' :business-waste-by-region-derivation-generation)]\n\n    [:div\n     [oz/vega-lite (chart-spec \"Total waste generated by business\" region business-waste-by-region-derivation-generation''')\n      util/vega-embed-opts]]))\n\n(defn root []\n  [chart @state/region-cursor @state/business-waste-by-region-derivation-generation-cursor @state/annotations-derivation-cursor])"]}