{"version":3,"sources":["dcs/prototype_6/view/regional_dashboard/business_waste_by_region_derivation_generation.cljs"],"mappings":";AAOA,AAAA,AAAMA,AAAYC,AAAMC,AAAOC;AAA/B,AACM,AAAMC,AAAW,AAACC,AAAM,AAAA,AAACC,AAAeH;AAAxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBF,AAISE,AAQ2BC,AAWLF;;AAavD,AAAA,AAAMK,AAAOL,AAAOM;AAApB,AACM,AAEMC,AAAgD,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAA,AAACC,AAAYV,AAAkD,AAAA,AAAAQ;AAAaF;AAGrIK,AAAiD,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAA,AAACE,AAAc,AAAK,AAAA,AAAAF;AACrBL;AAN5D,AAAA,AAAA,AAAA,AAQOQ,AAAa,AAAA,AAACjB,AAA+CE,AAAOW,AACpEK;;AAEb,AAAA,AAAME;AAAN,AAAA,AAAA,AAAAD,AAAA,AAAAA,AACOZ,AAAOc,AAAqBC","names":["dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/chart-spec","title","region","data","year-count","cljs.core/count","cljs.core/group-by","dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/chart","business-waste-by-region-derivation-generation","business-waste-by-region-derivation-generation'","p1__35951#","cljs.core.filter","cljs.core/contains?","business-waste-by-region-derivation-generation''","p1__35955#","cljs.core.map","cljs.core.assoc","oz.core/vega-lite","dcs.prototype-6.util/vega-embed-opts","cljs.core/deref","dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation/root","dcs.prototype-6.state/region-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor"],"sourcesContent":["(ns dcs.prototype-6.view.regional-dashboard.business-waste-by-region-derivation-generation\n  (:require\n   [oz.core :as oz]\n   [dcs.prototype-6.util :as util]\n   [dcs.prototype-6.state :as state]))\n\n\n(defn chart-spec [title region data]\n      (let [year-count (count (group-by :year data))]\n           {:schema     \"https://vega.github.io/schema/vega/v5.json\"\n            :title      title\n            :width      200\n            :height     100\n            :background \"floralwhite\"\n            :data       {:values data}\n            :mark       {:type \"line\" :point {:filled true #_:fill #_\"floralwhite\" }}\n            :selection  {:my {:type   \"multi\"\n                              :fields [\"region\"]\n                              :bind   \"legend\"}}\n            :encoding   {:x          {:field    \"year\"\n                                      :type     \"temporal\"\n                                      :timeUnit \"year\"\n                                      :axis     {:tickCount year-count\n                                                 :title     \"year\"}}\n                         :y          {:field \"tonnes\"\n                                      :type  \"quantitative\"\n                                      :scale {:zero false}\n                                      :axis  {:title \"tonnes\"}}\n                         :strokeDash {:condition {:test  \"datum.region == 'Scot gov target'\"\n                                                  :value [5 10]}\n                                      :value     [0]}\n                         :color      {:field \"region\"\n                                      :type  \"nominal\"\n                                      :scale {:domain [region #_\"Scotland average\" #_\"Scot gov target\"]\n                                              :range  [\"#fdae6b\" #_\"#1f77b4\" #_\"lightgrey\"]}\n                                      :legend nil}\n                         :opacity    {:condition {:selection \"my\"\n                                                  :value     1}\n                                      :value     0.2}\n                         :tooltip    [{:field \"region\"\n                                       :type  \"nominal\"}\n                                      {:field \"year\"\n                                       :type  \"temporal\"}\n                                      {:field \"tonnes\"\n                                       :type  \"quantitative\"}]}}))\n\n(defn chart [region business-waste-by-region-derivation-generation]\n      (let [;; filter\n            ;;   Decided to comment-out the \"Scotland average\" (and \"Scot gov target\") because averaging business waste over the regions isn't so useful.\n            business-waste-by-region-derivation-generation' (filter #(contains? #{region #_\"Scotland average\" #_\"Scot gov target\" } (:region %)) business-waste-by-region-derivation-generation)\n\n            ;; stringify the year for Vega\n            business-waste-by-region-derivation-generation'' (map #(assoc % :year (str (:year %)))\n                                                                  business-waste-by-region-derivation-generation')]\n           [:div\n            [oz/vega-lite (chart-spec \"Total waste generated by business\" region business-waste-by-region-derivation-generation'')\n             util/vega-embed-opts]]))\n\n(defn root []\n      [chart @state/region-cursor @state/business-waste-by-region-derivation-generation-cursor])"]}