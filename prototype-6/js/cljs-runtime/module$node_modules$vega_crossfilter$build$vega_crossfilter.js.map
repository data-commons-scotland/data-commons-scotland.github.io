{
"version":3,
"file":"module$node_modules$vega_crossfilter$build$vega_crossfilter.js",
"lineCount":22,
"mappings":"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",
"sources":["node_modules/vega-crossfilter/build/vega-crossfilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_crossfilter$build$vega_crossfilter\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.d3, global.vega, global.vega));\n}(this, (function (exports, d3Array, vegaDataflow, vegaUtil) { 'use strict';\n\n  const array8 = n => new Uint8Array(n);\n  const array16 = n => new Uint16Array(n);\n  const array32 = n => new Uint32Array(n);\n\n  /**\n   * Maintains CrossFilter state.\n   */\n\n  function Bitmaps() {\n    let width = 8,\n        data = [],\n        seen = array32(0),\n        curr = array(0, width),\n        prev = array(0, width);\n    return {\n      data: () => data,\n      seen: () => seen = lengthen(seen, data.length),\n\n      add(array) {\n        for (let i = 0, j = data.length, n = array.length, t; i < n; ++i) {\n          t = array[i];\n          t._index = j++;\n          data.push(t);\n        }\n      },\n\n      remove(num, map) {\n        // map: index -> boolean (true => remove)\n        const n = data.length,\n              copy = Array(n - num),\n              reindex = data; // reuse old data array for index map\n\n        let t, i, j; // seek forward to first removal\n\n        for (i = 0; !map[i] && i < n; ++i) {\n          copy[i] = data[i];\n          reindex[i] = i;\n        } // condense arrays\n\n\n        for (j = i; i < n; ++i) {\n          t = data[i];\n\n          if (!map[i]) {\n            reindex[i] = j;\n            curr[j] = curr[i];\n            prev[j] = prev[i];\n            copy[j] = t;\n            t._index = j++;\n          } else {\n            reindex[i] = -1;\n          }\n\n          curr[i] = 0; // clear unused bits\n        }\n\n        data = copy;\n        return reindex;\n      },\n\n      size: () => data.length,\n      curr: () => curr,\n      prev: () => prev,\n      reset: k => prev[k] = curr[k],\n      all: () => width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,\n\n      set(k, one) {\n        curr[k] |= one;\n      },\n\n      clear(k, one) {\n        curr[k] &= ~one;\n      },\n\n      resize(n, m) {\n        const k = curr.length;\n\n        if (n > k || m > width) {\n          width = Math.max(m, width);\n          curr = array(n, width, curr);\n          prev = array(n, width);\n        }\n      }\n\n    };\n  }\n\n  function lengthen(array, length, copy) {\n    if (array.length >= length) return array;\n    copy = copy || new array.constructor(length);\n    copy.set(array);\n    return copy;\n  }\n\n  function array(n, m, array) {\n    const copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n    if (array) copy.set(array);\n    return copy;\n  }\n\n  function Dimension (index, i, query) {\n    const bit = 1 << i;\n    return {\n      one: bit,\n      zero: ~bit,\n      range: query.slice(),\n      bisect: index.bisect,\n      index: index.index,\n      size: index.size,\n\n      onAdd(added, curr) {\n        const dim = this,\n              range = dim.bisect(dim.range, added.value),\n              idx = added.index,\n              lo = range[0],\n              hi = range[1],\n              n1 = idx.length;\n        let i;\n\n        for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;\n\n        for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;\n\n        return dim;\n      }\n\n    };\n  }\n\n  /**\n   * Maintains a list of values, sorted by key.\n   */\n\n  function SortedIndex() {\n    let index = array32(0),\n        value = [],\n        size = 0;\n\n    function insert(key, data, base) {\n      if (!data.length) return [];\n      const n0 = size,\n            n1 = data.length,\n            addi = array32(n1);\n      let addv = Array(n1),\n          oldv,\n          oldi,\n          i;\n\n      for (i = 0; i < n1; ++i) {\n        addv[i] = key(data[i]);\n        addi[i] = i;\n      }\n\n      addv = sort(addv, addi);\n\n      if (n0) {\n        oldv = value;\n        oldi = index;\n        value = Array(n0 + n1);\n        index = array32(n0 + n1);\n        merge(base, oldv, oldi, n0, addv, addi, n1, value, index);\n      } else {\n        if (base > 0) for (i = 0; i < n1; ++i) {\n          addi[i] += base;\n        }\n        value = addv;\n        index = addi;\n      }\n\n      size = n0 + n1;\n      return {\n        index: addi,\n        value: addv\n      };\n    }\n\n    function remove(num, map) {\n      // map: index -> remove\n      const n = size;\n      let idx, i, j; // seek forward to first removal\n\n      for (i = 0; !map[index[i]] && i < n; ++i); // condense index and value arrays\n\n\n      for (j = i; i < n; ++i) {\n        if (!map[idx = index[i]]) {\n          index[j] = idx;\n          value[j] = value[i];\n          ++j;\n        }\n      }\n\n      size = n - num;\n    }\n\n    function reindex(map) {\n      for (let i = 0, n = size; i < n; ++i) {\n        index[i] = map[index[i]];\n      }\n    }\n\n    function bisect(range, array) {\n      let n;\n\n      if (array) {\n        n = array.length;\n      } else {\n        array = value;\n        n = size;\n      }\n\n      return [d3Array.bisectLeft(array, range[0], 0, n), d3Array.bisectRight(array, range[1], 0, n)];\n    }\n\n    return {\n      insert: insert,\n      remove: remove,\n      bisect: bisect,\n      reindex: reindex,\n      index: () => index,\n      size: () => size\n    };\n  }\n\n  function sort(values, index) {\n    values.sort.call(index, (a, b) => {\n      const x = values[a],\n            y = values[b];\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    return d3Array.permute(values, index);\n  }\n\n  function merge(base, value0, index0, n0, value1, index1, n1, value, index) {\n    let i0 = 0,\n        i1 = 0,\n        i;\n\n    for (i = 0; i0 < n0 && i1 < n1; ++i) {\n      if (value0[i0] < value1[i1]) {\n        value[i] = value0[i0];\n        index[i] = index0[i0++];\n      } else {\n        value[i] = value1[i1];\n        index[i] = index1[i1++] + base;\n      }\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      value[i] = value0[i0];\n      index[i] = index0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      value[i] = value1[i1];\n      index[i] = index1[i1] + base;\n    }\n  }\n\n  /**\n   * An indexed multi-dimensional filter.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n   * @param {Array} params.query - An array of per-dimension range queries.\n   */\n\n  function CrossFilter(params) {\n    vegaDataflow.Transform.call(this, Bitmaps(), params);\n    this._indices = null;\n    this._dims = null;\n  }\n  CrossFilter.Definition = {\n    'type': 'CrossFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'query',\n      'type': 'array',\n      'array': true,\n      'required': true,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }]\n  };\n  vegaUtil.inherits(CrossFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!this._dims) {\n        return this.init(_, pulse);\n      } else {\n        var init = _.modified('fields') || _.fields.some(f => pulse.modified(f.fields));\n\n        return init ? this.reinit(_, pulse) : this.eval(_, pulse);\n      }\n    },\n\n    init(_, pulse) {\n      const fields = _.fields,\n            query = _.query,\n            indices = this._indices = {},\n            dims = this._dims = [],\n            m = query.length;\n      let i = 0,\n          key,\n          index; // instantiate indices and dimensions\n\n      for (; i < m; ++i) {\n        key = fields[i].fname;\n        index = indices[key] || (indices[key] = SortedIndex());\n        dims.push(Dimension(index, i, query[i]));\n      }\n\n      return this.eval(_, pulse);\n    },\n\n    reinit(_, pulse) {\n      const output = pulse.materialize().fork(),\n            fields = _.fields,\n            query = _.query,\n            indices = this._indices,\n            dims = this._dims,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            out = output.rem = output.add,\n            mod = output.mod,\n            m = query.length,\n            adds = {};\n      let add, index, key, mods, remMap, modMap, i, n, f; // set prev to current state\n\n      prev.set(curr); // if pulse has remove tuples, process them first\n\n      if (pulse.rem.length) {\n        remMap = this.remove(_, pulse, output);\n      } // if pulse has added tuples, add them to state\n\n\n      if (pulse.add.length) {\n        bits.add(pulse.add);\n      } // if pulse has modified tuples, create an index map\n\n\n      if (pulse.mod.length) {\n        modMap = {};\n\n        for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {\n          modMap[mods[i]._index] = 1;\n        }\n      } // re-initialize indices as needed, update curr bitmap\n\n\n      for (i = 0; i < m; ++i) {\n        f = fields[i];\n\n        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n          key = f.fname;\n\n          if (!(add = adds[key])) {\n            indices[key] = index = SortedIndex();\n            adds[key] = add = index.insert(f, pulse.source, 0);\n          }\n\n          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n        }\n      } // visit each tuple\n      // if filter state changed, push index to add/rem\n      // else if in mod and passes a filter, push index to mod\n\n\n      for (i = 0, n = bits.data().length; i < n; ++i) {\n        if (remMap[i]) {\n          // skip if removed tuple\n          continue;\n        } else if (prev[i] !== curr[i]) {\n          // add if state changed\n          out.push(i);\n        } else if (modMap[i] && curr[i] !== all) {\n          // otherwise, pass mods through\n          mod.push(i);\n        }\n      }\n\n      bits.mask = (1 << m) - 1;\n      return output;\n    },\n\n    eval(_, pulse) {\n      const output = pulse.materialize().fork(),\n            m = this._dims.length;\n      let mask = 0;\n\n      if (pulse.rem.length) {\n        this.remove(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (_.modified('query') && !_.modified('fields')) {\n        mask |= this.update(_, pulse, output);\n      }\n\n      if (pulse.add.length) {\n        this.insert(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (pulse.mod.length) {\n        this.modify(pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      this.value.mask = mask;\n      return output;\n    },\n\n    insert(_, pulse, output) {\n      const tuples = pulse.add,\n            bits = this.value,\n            dims = this._dims,\n            indices = this._indices,\n            fields = _.fields,\n            adds = {},\n            out = output.add,\n            n = bits.size() + tuples.length,\n            m = dims.length;\n      let k = bits.size(),\n          j,\n          key,\n          add; // resize bitmaps and add tuples as needed\n\n      bits.resize(n, m);\n      bits.add(tuples);\n      const curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(); // add to dimensional indices\n\n      for (j = 0; j < m; ++j) {\n        key = fields[j].fname;\n        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n        dims[j].onAdd(add, curr);\n      } // set previous filters, output if passes at least one filter\n\n\n      for (; k < n; ++k) {\n        prev[k] = all;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    modify(pulse, output) {\n      const out = output.mod,\n            bits = this.value,\n            curr = bits.curr(),\n            all = bits.all(),\n            tuples = pulse.mod;\n      let i, n, k;\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    remove(_, pulse, output) {\n      const indices = this._indices,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            map = {},\n            out = output.rem,\n            tuples = pulse.rem;\n      let i, n, k, f; // process tuples, output if passes at least one filter\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        map[k] = 1; // build index map\n\n        prev[k] = f = curr[k];\n        curr[k] = all;\n        if (f !== all) out.push(k);\n      } // remove from dimensional indices\n\n\n      for (k in indices) {\n        indices[k].remove(n, map);\n      }\n\n      this.reindex(pulse, n, map);\n      return map;\n    },\n\n    // reindex filters and indices after propagation completes\n    reindex(pulse, num, map) {\n      const indices = this._indices,\n            bits = this.value;\n      pulse.runAfter(() => {\n        const indexMap = bits.remove(num, map);\n\n        for (const key in indices) indices[key].reindex(indexMap);\n      });\n    },\n\n    update(_, pulse, output) {\n      const dims = this._dims,\n            query = _.query,\n            stamp = pulse.stamp,\n            m = dims.length;\n      let mask = 0,\n          i,\n          q; // survey how many queries have changed\n\n      output.filters = 0;\n\n      for (q = 0; q < m; ++q) {\n        if (_.modified('query', q)) {\n          i = q;\n          ++mask;\n        }\n      }\n\n      if (mask === 1) {\n        // only one query changed, use more efficient update\n        mask = dims[i].one;\n        this.incrementOne(dims[i], query[i], output.add, output.rem);\n      } else {\n        // multiple queries changed, perform full record keeping\n        for (q = 0, mask = 0; q < m; ++q) {\n          if (!_.modified('query', q)) continue;\n          mask |= dims[q].one;\n          this.incrementAll(dims[q], query[q], stamp, output.add);\n          output.rem = output.add; // duplicate add/rem for downstream resolve\n        }\n      }\n\n      return mask;\n    },\n\n    incrementAll(dim, query, stamp, out) {\n      const bits = this.value,\n            seen = bits.seen(),\n            curr = bits.curr(),\n            prev = bits.prev(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      }\n\n      dim.range = query.slice();\n    },\n\n    incrementOne(dim, query, add, rem) {\n      const bits = this.value,\n            curr = bits.curr(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      }\n\n      dim.range = query.slice();\n    }\n\n  });\n\n  /**\n   * Selectively filters tuples by resolving against a filter bitmap.\n   * Useful for processing the output of a cross-filter transform.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n   *   parameter value is a reference to a {@link CrossFilter} transform.\n   */\n\n  function ResolveFilter(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  ResolveFilter.Definition = {\n    'type': 'ResolveFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'ignore',\n      'type': 'number',\n      'required': true,\n      'description': 'A bit mask indicating which filters to ignore.'\n    }, {\n      'name': 'filter',\n      'type': 'object',\n      'required': true,\n      'description': 'Per-tuple filter bitmaps from a CrossFilter transform.'\n    }]\n  };\n  vegaUtil.inherits(ResolveFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const ignore = ~(_.ignore || 0),\n            // bit mask where zeros -> dims to ignore\n      bitmap = _.filter,\n            mask = bitmap.mask; // exit early if no relevant filter changes\n\n      if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n      const output = pulse.fork(pulse.ALL),\n            data = bitmap.data(),\n            curr = bitmap.curr(),\n            prev = bitmap.prev(),\n            pass = k => !(curr[k] & ignore) ? data[k] : null; // propagate all mod tuples that pass the filter\n\n\n      output.filter(output.MOD, pass); // determine add & rem tuples via filter functions\n      // for efficiency, we do *not* populate new arrays,\n      // instead we add filter functions applied downstream\n\n      if (!(mask & mask - 1)) {\n        // only one filter changed\n        output.filter(output.ADD, pass);\n        output.filter(output.REM, k => (curr[k] & ignore) === mask ? data[k] : null);\n      } else {\n        // multiple filters changed\n        output.filter(output.ADD, k => {\n          const c = curr[k] & ignore,\n                f = !c && c ^ prev[k] & ignore;\n          return f ? data[k] : null;\n        });\n        output.filter(output.REM, k => {\n          const c = curr[k] & ignore,\n                f = c && !(c ^ (c ^ prev[k] & ignore));\n          return f ? data[k] : null;\n        });\n      } // add filter to source data in case of reflow...\n\n\n      return output.filter(output.SOURCE, t => pass(t._index));\n    }\n\n  });\n\n  exports.crossfilter = CrossFilter;\n  exports.resolvefilter = ResolveFilter;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","transforms","d3","d3Array","vegaDataflow","vegaUtil","Bitmaps","width","data","seen","array32","curr","array","prev","length","copy","constructor","set","add","i","j","n","t","_index","push","remove","num","map","Array","reindex","size","reset","k","all","one","clear","resize","m","Math","max","array8","array16","Dimension","index","query","bit","zero","range","slice","bisect","onAdd","added","dim","value","idx","lo","hi","n1","SortedIndex","insert","key","base","n0","addi","addv","sort","oldv","oldi","i0","i1","value1","bisectLeft","bisectRight","values","call","a","b","x","y","permute","CrossFilter","params","Transform","_dims","_indices","ResolveFilter","Uint8Array","Uint16Array","Uint32Array","Definition","inherits","transform","_","pulse","modified","fields","some","f","reinit","eval","init","indices","dims","fname","output","materialize","fork","bits","out","rem","mod","adds","remMap","modMap","mods","source","mask","update","modify","tuples","runAfter","indexMap","stamp","q","filters","incrementOne","incrementAll","old","lo1","hi1","lo0","hi0","min","ignore","bitmap","filter","StopPropagation","ALL","pass","MOD","ADD","c","REM","SOURCE","crossfilter","resolvefilter","Object","defineProperty"]
}
