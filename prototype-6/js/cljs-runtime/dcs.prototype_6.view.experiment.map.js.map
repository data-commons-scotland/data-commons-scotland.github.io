{"version":3,"sources":["dcs/prototype_6/view/experiment/map.cljs"],"mappings":";;;AAKA,AAAA,AAAKA;AACL,AAAKC,AAAQ,AAAA,AAAKC;AAElB,AAAKC,AAAI,AAACC,AAAoBC;AAC9B,AAAKC,AAAO,AAACF,AAAoBG;AACjC,AAAKC,AAAM,AAACJ,AAAoBK;AAChC,AAAKC,AAAU,AAACN,AAAoBO;AACpC,AAAKC,AAAW,AAACR,AAAoBS;AACrC,AAAKC,AAAO,AAACV,AAAoBW;AACjC,AAAKC,AAAa,AAACZ,AAAoBa;AAEvC,AAAA,AAAMC,AAAWC,AAAUC;AAA3B,AACM,AAACC,AAAiBD,AAAK,AAAA,AAACE,AAAeH,AAAW,AAACI;;AAEzD,AAAA,AAAMC,AAAgBC;AAAtB,AACM,AAAIA;AAAJ,AAAa,AAAOA,AAAS,AAAOA;;AAApC;;;AAEN,AAAA,AAAAC,AAAMI;AAAN,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF,AAAA,AAA2BI;AAA3B,AAAAF,AAAAF,AAAA,AAA8BK;AAA9B,AACM,AAACC,AAAqB,AAACV,AAAQQ,AAAI,AAACR,AAAQS;;AAElD,AAAA,AAAME,AAAYC;AAAlB,AACM,AAAMC,AAAE,AAAYD;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AACcC,AAAE,AAAgB,AAACZ,AACnBY,AAAE,AAAgB,AAACZ,AACnBY,AAAE,AAAgB,AAACZ,AACnBY,AAAE,AAAgB,AAACZ;;AAEvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKa;AAKL,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL,AAAKC,AAAqB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMF;AAIjC,AAAKG,AAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMF;AAKlC,AAAA,AAAMI;AAAN,AACM,AAAAC,AAAkB,AAAA,AAAKP;AAAvB,AAAAQ,AAAAD,AAAA,AAAA,AAAOG;AAAP,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZF,AACkB,AAAA,AAAKT;AADvB,AAAAQ,AAAAC,AAAA,AAAA,AACOG;AADP,AAAAJ,AAAAC,AAAA,AAAA,AACYI;AADZ,AAEU,AAACC,AAAW,AAGZ,AAAA,AAACG;AAHW,AAAA,AACK,AAACF,AAAK,AAAGL,AAAK,AAAG,AAAGE,AAAKF,AAAM,AAACM,AAChC,AAACD,AAAK,AAAGJ,AAAK,AAAG,AAAGE,AAAKF,AAAM,AAACK;;;AAGjE,AAAA,AAAME;AAAN,AACM,AAAMC,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAgB,AAAA,AAACC,AAAQ,AAACC,AAAIC,AAAO,AAACC,AAAO,AAAClB,AACtCN;AADvB,AAMK,AAACyB,AAAeN;;AAEZ,AAAKO,AAAMC;AAAX,AACI,AAAMC,AAAO,AAASC;AAAT,AACI,AAAA,AAACC,AAAMJ,AAAMK,AAAe,AAAA,AAAIF,AAAG,AAAkBA;;AADtE,AAEK;AAwCAV","names":["dcs.prototype-6.view.experiment.map/copy-osm","dcs.prototype-6.view.experiment.map/osm-url","js/window.location.protocol","dcs.prototype-6.view.experiment.map/Map","reagent.core/adapt-react-class","js/module$node_modules$react_leaflet$cjs$index.Map","dcs.prototype-6.view.experiment.map/Marker","js/module$node_modules$react_leaflet$cjs$index.Marker","dcs.prototype-6.view.experiment.map/Popup","js/module$node_modules$react_leaflet$cjs$index.Popup","dcs.prototype-6.view.experiment.map/TileLayer","js/module$node_modules$react_leaflet$cjs$index.TileLayer","dcs.prototype-6.view.experiment.map/LayerGroup","js/module$node_modules$react_leaflet$cjs$index.LayerGroup","dcs.prototype-6.view.experiment.map/Circle","js/module$node_modules$react_leaflet$cjs$index.Circle","dcs.prototype-6.view.experiment.map/CircleMarker","js/module$node_modules$react_leaflet$cjs$index.CircleMarker","dcs.prototype-6.view.experiment.map/make-icon","image-url","opts","js/module$node_modules$leaflet$dist$leaflet_src.icon","cljs.core.assoc","cljs.core/clj->js","dcs.prototype-6.view.experiment.map/latLng->latlon","lat-lng","p__9709","map__9710","cljs.core/--destructure-map","cljs.core.get","dcs.prototype-6.view.experiment.map/make-bounds","sw","ne","js/module$node_modules$leaflet$dist$leaflet_src.latLngBounds","dcs.prototype-6.view.experiment.map/map-bounds","map","b","dcs.prototype-6.view.experiment.map/default-bounds","dcs.prototype-6.view.experiment.map/default-center","dcs.prototype-6.view.experiment.map/default-highlight-opts","dcs.prototype-6.view.experiment.map/hover-highlight-opts","cljs.core.merge","dcs.prototype-6.view.experiment.map/select-highlight-opts","dcs.prototype-6.view.experiment.map/random-coordinates","vec__9711","cljs.core.nth","vec__9714","lat1","lng1","lat2","lng2","cljs.core.repeatedly","cljs.core/long","js/Math.random","cljs.core.take","dcs.prototype-6.view.experiment.map/root","x-state","reagent.core.atom","cljs.core.into","cljs.core.map","cljs.core/vector","cljs.core.range","js/console.log","state","_","ref-fn","el","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns dcs.prototype-6.view.experiment.map\n  (:require [reagent.core :as r]\n            [leaflet :as leaflet]\n            [react-leaflet :as react-leaflet]))\n\n(def copy-osm \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\")\n(def osm-url (str js/window.location.protocol \"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"))\n\n(def Map (r/adapt-react-class react-leaflet/Map))\n(def Marker (r/adapt-react-class react-leaflet/Marker))\n(def Popup (r/adapt-react-class react-leaflet/Popup))\n(def TileLayer (r/adapt-react-class react-leaflet/TileLayer))\n(def LayerGroup (r/adapt-react-class react-leaflet/LayerGroup))\n(def Circle (r/adapt-react-class react-leaflet/Circle))\n(def CircleMarker (r/adapt-react-class react-leaflet/CircleMarker))\n\n(defn make-icon [image-url opts]\n      (leaflet/icon (-> opts (assoc :iconUrl image-url) (clj->js))))\n\n(defn latLng->latlon [lat-lng]\n      (if lat-lng [(.-lat lat-lng) (.-lng lat-lng)]))\n\n(defn make-bounds [{:keys [sw ne]}]\n      (leaflet/latLngBounds (clj->js sw) (clj->js ne)))\n\n(defn map-bounds [map]\n      (let [b (.getBounds map)]\n           {:sw (-> b (.getSouthWest) (latLng->latlon))\n            :nw (-> b (.getNorthWest) (latLng->latlon))\n            :ne (-> b (.getNorthEast) (latLng->latlon))\n            :se (-> b (.getSouthEast) (latLng->latlon))}))\n\n(def default-bounds {:sw [59.7121 14.9854]\n                     :nw [70.5102 14.9854]\n                     :ne [70.5102 37.3096]\n                     :se [59.7121 37.3096]})\n\n(def default-center [65.6583 26.1475])\n\n(def default-highlight-opts {:stroke true\n                             :color \"#000000\"\n                             :weight 5\n                             :opacity 0.3\n                             :fill true\n                             :fill-color \"#000000\"\n                             :fill-opacity 0.1})\n\n(def hover-highlight-opts (merge default-highlight-opts\n                                 {:stroke false\n                                  :fill-color \"#555555\"\n                                  :fill-opacity 0.25}))\n(def select-highlight-opts (merge default-highlight-opts\n                                  {:color \"#0494D2\"\n                                   :opacity 0.5\n                                   :fill-color \"#0494D2\"}))\n\n(defn random-coordinates []\n      (let [[lat1 lng1] (:nw default-bounds)\n            [lat2 lng2] (:se default-bounds)]\n           (->> (repeatedly (fn []\n                                [(long (+ lat1 (* (- lat2 lat1) (js/Math.random))))\n                                 (long (+ lng1 (* (- lng2 lng1) (js/Math.random))))]))\n                (take 10))))\n\n(defn root []\n      (let [x-state (r/atom {:points (into {} (map vector (range) (random-coordinates)))\n                     :bounds default-bounds\n                     :selected nil\n                     :hover nil\n                     :leaflet nil})]\n\n           (js/console.log x-state)\n\n               (fn [state _]\n                   (let [ref-fn (fn [^js el]\n                                    (swap! state assoc :leaflet (if el (.-leafletElement el))))]\n                        (fn [state _]\n                            [:div\n                             [Map\n                              {:center default-center\n                               :max-zoom 18\n                               :min-zoom 5\n                               :bounds (make-bounds default-bounds)\n                               :on-click #(swap! state assoc :selected nil)\n                               :on-move-end (fn [e] (swap! state assoc :bounds (map-bounds (.-target e))))\n                               :on-zoom-end (fn [e] (swap! state assoc :bounds (map-bounds (.-target e))))\n                               :style {:min-height \"640px\"}\n                               :ref ref-fn}\n\n                              [TileLayer\n                               {:url osm-url\n                                :attribution copy-osm}]\n\n                              (for [[id latlng] (:points @state)]\n                                   [Marker\n                                    {:key id\n                                     :title (str id)\n                                     :position latlng\n                                     :on-click #(swap! state assoc :selected id)\n                                     :on-mouse-over #(swap! state assoc :hover id)\n                                     :on-mouse-out #(swap! state assoc :hover nil)}])\n\n                              (if-let [s (:selected @state)]\n                                      [CircleMarker\n                                       (merge select-highlight-opts\n                                              {:key \"selected\"\n                                               :center (get (:points @state) s)\n                                               :radius 25})])\n\n                              (if-let [h (:hover @state)]\n                                      [CircleMarker\n                                       (merge hover-highlight-opts\n                                              {:key \"hovering\"\n                                               :center (get (:points @state) h)\n                                               :radius 25})])]])\n\n                        x-state))))\n"]}