{"version":3,"sources":["dcs/prototype_6/view/regional_dashboard/map.cljs"],"mappings":"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","names":["dcs.prototype-6.view.regional-dashboard.map/dom-id","dcs.prototype-6.view.regional-dashboard.map/init-lat","dcs.prototype-6.view.regional-dashboard.map/init-lng","dcs.prototype-6.view.regional-dashboard.map/init-zoom","dcs.prototype-6.view.regional-dashboard.map/basemap-url","dcs.prototype-6.view.regional-dashboard.map/basemap-maxzoom","dcs.prototype-6.view.regional-dashboard.map/basemap-attribution","dcs.prototype-6.view.regional-dashboard.map/component-holder","reagent.core.atom","dcs.prototype-6.view.regional-dashboard.map/geojson-layer-holder","dcs.prototype-6.view.regional-dashboard.map/x-for-region-holder","cljs.core.atom","dcs.prototype-6.view.regional-dashboard.map/style-neutral","dcs.prototype-6.view.regional-dashboard.map/style-selected","dcs.prototype-6.view.regional-dashboard.map/style-highlighted","dcs.prototype-6.view.regional-dashboard.map/style","feature","properties-map","cljs.core.js__GT_clj","region","cljs.core.get","cljs.core/deref","dcs.prototype-6.state/region-cursor","cljs.core._EQ_","dcs.prototype-6.view.regional-dashboard.map/highlight-feature","e","x","dcs.prototype-6.view.regional-dashboard.map/reset-highlight","geojson-layer","dcs.prototype-6.view.regional-dashboard.map/style-neutral-the-previously-selected","temp__5735__auto__","x-for-region","dcs.prototype-6.view.regional-dashboard.map/zoom-to-feature","component","cljs.core.not_EQ_","cljs.core/reset!","js/window","reitit.frontend.easy.href","dcs.prototype-6.view.regional-dashboard.map/on-each-feature","layer","dcs.prototype-6.view.regional-dashboard.map/did-mount","js/L","basemap-layer","geojson","dcs.prototype-6.state/geojson-cursor","dcs.prototype-6.view.regional-dashboard.map/did-update","this","prev-props","reagent.core/props","dcs.prototype-6.view.regional-dashboard.map/render","dcs.prototype-6.view.regional-dashboard.map/component","reagent.core.create_class","dcs.prototype-6.view.regional-dashboard.map/root"],"sourcesContent":["(ns dcs.prototype-6.view.regional-dashboard.map\n  (:require [reagent.core :as r]\n            [reitit.frontend.easy :as rfe]\n            [dcs.prototype-6.state :as state]))\n\n(def dom-id \"map-ui\")\n(def init-lat 58.30)\n(def init-lng -3.70)\n(def init-zoom 6)\n(def basemap-url \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\")\n(def basemap-maxzoom 18)\n(def basemap-attribution \"<a href='https://data-commons-scotland.github.io/dcs-wcs-prototype-3/pages-output/data/about/'>Data</a>\")\n\n(def component-holder (r/atom nil))\n(def geojson-layer-holder (r/atom nil))\n\n\n(def x-for-region-holder (atom nil)) ;; A hack. Replace the nedd for this with a function that find this in the geojson-layer using the name of the region.\n\n(def style-neutral #js{;; :fillColor getColor(feature.properties.density)\n                       :weight       1\n                       :opacity      0.7\n                       :color        \"gray\"\n                       \"fillOpacity\" 0.2})\n\n(def style-selected #js{:weight       1\n                        :color        \"#fdae6b\"\n                        \"dashArray\"   \"\"\n                        \"fillOpacity\" 0.2})\n\n(def style-highlighted #js{:weight       2\n                           :color        \"#666\"\n                           \"dashArray\"   \"\"\n                           \"fillOpacity\" 0.4})\n\n(defn style [^js feature]\n      (let [properties-map (js->clj (.. feature -properties))\n            region (get properties-map \"LAD13NM\")]\n           (do\n             #_(js/console.log (str \"styling \" region))\n             (if (and (some? @state/region-cursor)\n                      (= @state/region-cursor region))\n               style-selected\n               style-neutral))))\n\n(defn highlight-feature [e]\n      (let [^js x (.. e -target)\n            properties-map (js->clj (.. x -feature -properties))\n            region (get properties-map \"LAD13NM\")]\n           (do\n             (.openTooltip x)\n             (.setStyle x style-highlighted)\n             (.bringToFront x)\n             #_(js/console.log (str \"entered \" region)))))\n\n(defn reset-highlight [e]\n      (let [x (.. e -target)\n            geojson-layer @geojson-layer-holder]\n           (do\n             (.closeTooltip x)\n             (.resetStyle geojson-layer x))))\n\n(defn style-neutral-the-previously-selected []\n      (when-let [x-for-region @x-for-region-holder]\n                (.setStyle x-for-region style-neutral)))\n\n(defn zoom-to-feature [e]\n      (let [^js x (.. e -target)\n            component @component-holder\n            properties-map (js->clj (.. x -feature -properties))\n            region (get properties-map \"LAD13NM\")]\n           (do\n             (when (not= @state/region-cursor region)\n                   (do\n                     (style-neutral-the-previously-selected) ;; Hack! There will be a more elegant way to achieve this\n                     ;(.fitBounds component (.getBounds x))\n                     (.setStyle x style-selected)\n                     (reset! x-for-region-holder x)\n                     (reset! state/region-cursor region)\n                     (set! (.-location js/window) (rfe/href :dcs.prototype-6.router/dashboard-view nil {:region region}))))\n             #_(js/console.log (str \"selected \" region)))))\n\n(defn on-each-feature [^js feature layer]\n      (let [properties-map (js->clj (.. feature -properties))\n            region (get properties-map \"LAD13NM\")]\n           (do\n             (.bindTooltip layer region)\n             (.on layer #js{:mouseover highlight-feature\n                            :mouseout  reset-highlight\n                            :click     zoom-to-feature}))))\n\n(defn did-mount []\n      (let [component (.map js/L dom-id)\n            basemap-layer (.tileLayer js/L basemap-url\n                                      #js{\"maxZoom\"    basemap-maxzoom\n                                          :attribution basemap-attribution})]\n           (do\n             (reset! component-holder component)\n             (.setView component (array init-lat init-lng) init-zoom)\n             (.addTo basemap-layer component)\n\n             ;; If we have the geojson already then add it to the map\n             (when-let [geojson @state/geojson-cursor]\n                       (let [geojson-layer (.geoJson js/L @state/geojson-cursor\n                                                     #js{:style          style\n                                                         \"onEachFeature\" on-each-feature})\n                             component @component-holder]\n                            (do\n                              (reset! geojson-layer-holder geojson-layer)\n                              (.addTo geojson-layer component))))\n             )))\n\n(defn did-update [this prev-props]\n      (let [geojson (:data (r/props this))\n            geojson-layer (.geoJson js/L @state/geojson-cursor\n                                    #js{:style          style\n                                        \"onEachFeature\" on-each-feature})\n            component @component-holder]\n           (do\n             (reset! geojson-layer-holder geojson-layer)\n             (.addTo geojson-layer component))))\n\n(defn render []\n      [:div#map-ui])\n\n(defn component []\n      (r/create-class {:reagent-render       render\n                       :component-did-mount  did-mount\n                       :component-did-update did-update}))\n\n(defn root []\n      [component {:data @state/geojson-cursor}])\n\n"]}