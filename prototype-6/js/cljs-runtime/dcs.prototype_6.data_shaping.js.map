{"version":3,"sources":["dcs/prototype_6/data_shaping.cljs"],"mappings":"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","names":["dcs.prototype-6.data-shaping/rollup-population-regions","population","cljs.core/group-by","cljs.core.map","p__32662","vec__32663","cljs.core.nth","year","coll","cljs.core.apply","cljs.core/+","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","household-co2e","p__32666","vec__32667","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-waste","cljs.core.juxt","p__32670","vec__32671","vec__32674","material","management","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","business-waste-by-region","p__32677","vec__32678","vec__32681","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","p__32684","vec__32685","vec__32688","region","dcs.prototype-6.data-shaping/rollup-household-waste-materials","p__32691","vec__32692","vec__32695","dcs.prototype-6.data-shaping/rollup-household-waste-managements","p__32698","vec__32699","vec__32702","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","p__32706","vec__32707","vec__32710","total-tonnes","recycled-tonnes","p1__32705#","cljs.core.filter","cljs.core._EQ_","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","p__32713","vec__32714","vec__32717","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","waste-site","p1__32720#","cljs.core.remove","p__32722","vec__32723","all","cljs.core/count","household","p1__32721#","cljs.core/contains?","cljs.core/set","non-household","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","stirling-bin-collection","p__32726","vec__32727","vec__32730","quarter","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","p__32733","vec__32734","vec__32737","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","p__32741","vec__32742","vec__32745","p1__32740#","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","stirling-community-food-tonnes","counter-party","p1__32748#","subflows","p1__32749#","counter-parties","p1__32750#","source-keys","p1__32751#","cljs.core.distinct","not-waste-sources","waste-sources","p1__32752#","used-as-food-outcomes","not-used-as-food-outcomes","subflows-1a","iter__4564__auto__","s__32754","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","b__32756","cljs.core/chunk-buffer","i__32755","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32753","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","from","sum-counter-party-tonnes","subflows-1b","s__32758","b__32760","i__32759","iter__32757","subflows-2","sum-subflows-tonnes","subflows-3","sum-counter-parties-tonnes","subflows-4","s__32762","b__32764","i__32763","iter__32761","to","ordered-froms","ordered-tos","comparator","p__32765","p__32766","vec__32767","vec__32770","a-from","a-to","b-from","b-to","cljs.core.not_EQ_","flow","cljs.core.sort_by","cljs.core/second","cljs.core.concat","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.prototype-6.data-shaping)\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-population-regions [population]\n      (->> population\n           (group-by :year)\n           (map (fn [[year coll]] {:region     \"Scotland\"\n                                   :year       year\n                                   :population (->> coll\n                                                    (map :population)\n                                                    (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-co2e-regions [household-co2e]\n      (->> household-co2e\n           (group-by :year)\n           (map (fn [[year coll]] {:region \"Scotland\"\n                                   :year   year\n                                   :tonnes (->> coll\n                                                (map :tonnes)\n                                                (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-waste-regions [household-waste]\n      (->> household-waste\n           (group-by (juxt :year :material :management))\n           (map (fn [[[year material management] coll]] {:region     \"Scotland\"\n                                                         :year       year\n                                                         :material   material\n                                                         :management management\n                                                         :tonnes     (->> coll\n                                                                          (map :tonnes)\n                                                                          (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-business-waste-by-region-regions [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :year :material))\n           (map (fn [[[year material] coll]] {:region   \"Scotland\"\n                                              :year     year\n                                              :material material\n                                              :tonnes   (->> coll\n                                                             (map :tonnes)\n                                                             (apply +))}))))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-household-waste-materials-and-management [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Roll-up to get values for (region, year, management) triples\n(defn rollup-household-waste-materials [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :management))\n           (map (fn [[[region year management] coll]] {:region     region\n                                                       :year       year\n                                                       :management management\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Roll-up to get values for (region, year, material) triples\n(defn rollup-household-waste-managements [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :material))\n           (map (fn [[[region year material] coll]] {:region     region\n                                                       :year       year\n                                                       :material   material\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Calculate the percentage recycled values for (region, year) pairs\n(defn calc-household-waste-percentage-recycled [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region     region\n                                            :year       year\n                                            :percentage (let [total-tonnes (->> coll\n                                                                                (map :tonnes)\n                                                                                (apply +))\n                                                              recycled-tonnes (->> coll\n                                                                                   (filter #(= \"Recycled\" (:management %)))\n                                                                                   (map :tonnes)\n                                                                                   (apply +))]\n                                                             (double (* 100 (/ recycled-tonnes total-tonnes))))}))))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-business-waste-by-region-materials [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Count the waste sites per category in each region\n(defn count-waste-sites-per-category-per-region [waste-site]\n      (->> waste-site\n           (remove #(= \"Not operational\" (:status %)))\n           (group-by :region)\n           (map (fn [[region coll]] (let [all (count coll)\n                                          household (->> coll\n                                                         (filter #(contains? (set (:accepts %)) \"Household\"))\n                                                         count)\n                                          non-household (- all household)]\n                                         {:region        region\n                                          :household     household\n                                          :non-household non-household})))))\n\n\n;; Roll-up to get values for (region, year, quarter) triples\n(defn rollup-stirling-bin-collection-ma-re-mi [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter))\n           (map (fn [[[region year quarter] coll]] {:region  region\n                                                    :year    year\n                                                    :quarter quarter\n                                                    :tonnes  (->> coll\n                                                                  (map :tonnes)\n                                                                  (apply +))}))))\n\n\n;; Roll-up to get values for (region, year, quarter, material) quadruples\n(defn rollup-stirling-bin-collection-re-mi [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter :material))\n           (map (fn [[[region year quarter material] coll]] {:region   region\n                                                             :year     year\n                                                             :quarter  quarter\n                                                             :material material\n                                                             :tonnes   (->> coll\n                                                                            (map :tonnes)\n                                                                            (apply +))}))))\n\n\n;; Calculate the percentage recycled values for (region, year, quarter) triples\n(defn calc-stirling-bin-collection-percentage-recycled [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter))\n           (map (fn [[[region year quarter] coll]] {:region     region\n                                                    :year       year\n                                                    :quarter    quarter\n                                                    :percentage (let [total-tonnes (->> coll\n                                                                                        (map :tonnes)\n                                                                                        (apply +))\n                                                                      recycled-tonnes (->> coll\n                                                                                           (filter #(:recycling? %))\n                                                                                           (map :tonnes)\n                                                                                           (apply +))]\n                                                                     (double (* 100 (/ recycled-tonnes total-tonnes))))}))))\n\n\n;; Calculate the flow (paths and amounts) of food material through the Stirling Community Food system\n(defn calc-stirling-community-food-flow [stirling-community-food-tonnes]\n      (letfn [(sum-counter-party-tonnes [counter-party]\n                                           (->> stirling-community-food-tonnes\n                                                (filter #(and (= \"in\" (:io-direction %))\n                                                              (= counter-party (:counter-party %))))\n                                                (map :tonnes)\n                                                (apply +)))\n\n              (sum-subflows-tonnes [subflows]\n                                      (->> subflows\n                                           (map #(nth % 2))\n                                           (apply +)))\n\n              (sum-counter-parties-tonnes [counter-parties]\n                                             (->> stirling-community-food-tonnes\n                                                  (filter #(and (= \"out\" (:io-direction %))\n                                                                (contains? counter-parties (:counter-party %))))\n                                                  (map :tonnes)\n                                                  (apply +)))]\n\n             (let [source-keys (->> stirling-community-food-tonnes\n                                    (filter #(= \"in\" (:io-direction %)))\n                                    (map :counter-party)\n                                    distinct)\n\n                   not-waste-sources #{\"Purchased\" \"Donated not waste\"}\n                   waste-sources (remove #(contains? not-waste-sources %) source-keys)\n\n                   used-as-food-outcomes #{\"Used as food\"}\n                   not-used-as-food-outcomes #{\"Donated to animal scantuary\" \"Used by individuals for compost\" \"Council compost, Energen biogas, etc.\"}\n\n                   subflows-1a\n                   (for [from waste-sources]\n                        [from \"Would-be waste\" (sum-counter-party-tonnes from)])\n\n                   subflows-1b\n                   (for [from not-waste-sources]\n                        [from \"Not waste\" (sum-counter-party-tonnes from)])\n\n                   subflows-2\n                   [[\"Not waste\" \"Stirling Community Food\" (sum-subflows-tonnes subflows-1b)]\n                    [\"Would-be waste\" \"Stirling Community Food\" (sum-subflows-tonnes subflows-1a)]]\n\n                   subflows-3\n                   [[\"Stirling Community Food\" \"Used as food\" (sum-counter-parties-tonnes used-as-food-outcomes)]\n                    [\"Stirling Community Food\" \"Not used as food\" (sum-counter-parties-tonnes not-used-as-food-outcomes)]]\n\n                   subflows-4\n                   (for [to not-used-as-food-outcomes]\n                        [\"Not used as food\" to (sum-counter-parties-tonnes #{to})])\n\n                   ;; concat and order them\n\n                   ordered-froms [\"Purchased\"\n                             \"Donated not waste\"\n                             \"Local supermarkets\"\n                             \"Fareshare\"\n                             \"Donated as waste\"\n                             \"Other\"\n                             \"Not waste\"\n                             \"Would-be waste\"\n                             \"Stirling Community Food\"]\n\n                   ordered-tos [\"Used as food\" ;; should be no need to worry about the earlier ones in the flow\n                                \"Not used as food\"\n                                \"Donated to animal scantuary\"\n                                \"Used by individuals for compost\"\n                                \"Council compost, Energen biogas, etc.\"]\n\n                   comparator (fn [[a-from a-to] [b-from b-to]] (if (not= a-from b-from)\n                                                      (< (.indexOf ordered-froms a-from) (.indexOf ordered-froms b-from))\n                                                      (< (.indexOf ordered-tos a-to) (.indexOf ordered-tos b-to))))\n\n                   flow (sort-by (juxt first second)\n                                 comparator\n                                 (concat subflows-1a subflows-1b subflows-2 subflows-3 subflows-4))]\n\n                  flow)))\n\n\n\n"]}