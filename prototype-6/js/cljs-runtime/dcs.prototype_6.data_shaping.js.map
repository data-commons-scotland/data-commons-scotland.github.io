{"version":3,"sources":["dcs/prototype_6/data_shaping.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAOC;AAAb,AACM,AAAMC,AAAG,AAACC,AAA+BC,AAAMC;AACrCC,AAAM,AAACC,AAAUC,AAASN,AAAGD;AADvC,AAEK,AAAGK;;AAId,AAAA,AAAMG,AAA2BC;AAAjC,AAGW,AAACE,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAC+BD,AACAC,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAN3CT,AACA,AAAA,AAACC;;AAQZ,AAAA,AAAMS,AAA+BC;AAArC,AAGW,AAACT,AAAI,AAAAU;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAP,AAAAQ,AAAA,AAAA,AAAMP;AAAN,AAAAD,AAAAQ,AAAA,AAAA,AAAWN;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2BD,AACKC,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAN5CE,AACA,AAAA,AAACV;;AAQZ,AAAA,AAAMa,AAAgCC;AAAtC,AAGW,AAACb,AAAI,AAAAe;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAd,AAAAa,AAAA,AAAA;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAAOb;AAAP,AAAAD,AAAAc,AAAA,AAAA,AAAYC;AAAZ,AAAAf,AAAAc,AAAA,AAAA,AAAqBE;AAArB,AAAAhB,AAAAa,AAAA,AAAA,AAAiCX;AAAjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqDD,AACAc,AACAC,AACKd,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AARtEM,AACA,AAACd,AAAS,AAAA,AAAA,AAAA,AAACe;;AAatB,AAAA,AAAMM,AAAwCC;AAA9C,AACE,AAAQ,AAAA,AAAAE,AAACC;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAF;AAAaF;AAA5C;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAQ,AAAA,AAAAI,AAACC;AAAD,AAAO,AAAA,AAACF,AAAO,AAAA,AAAAC;AAAWL;AAAlC;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAMM,AAAmB,AAAA,AAAQ,AAAA,AAAA;AAC3BC,AAAa,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAA,AAACN,AAAO,AAAA,AAAAK;AAAWT;AACzCW,AAAkBX,AAAyB,AAAA,AAACrB,AAAW,AAACM,AAAM2B;AAFpE,AAGE,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA7C,AAAA+C,AAAMqB;AAAN,AAAA,AAAApB,AAAA;AAAAC;AAAA,AAAA,AAAAL,AAAA,AAAA;;AAAA,AAAA,AAAAK,AAAAA;;AAAA,AAAA,AAAAJ,AAAA,AAAAC,AAAAG;AAAA,AAAA,AAAAJ;AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAA,AAAAK,AAAAD;AAAA,AAAAE,AAo5E+C,AAAA6O,AAAA/O;AAp5E/CG,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AACM5C;AADN,AAAA,AAAA,AAAA8C,AAAAJ,AAEE,AAAAkB,AAA2CJ;AAA3CI,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF,AAAA,AAAc9C;AAAd,AAAAgD,AAAAF,AAAA,AAAuB7C;AAAvB,AAAA+C,AAAAF,AAAA,AAAkCI;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEehE,AACAc,AACAC,AACA,AAAGiD,AAAO,AAAA,AAAGA,AAAOxC,AAAmB,AAAA,AAAGxB;;;AAP3D,AAAA,AAAA4C,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAb;;AAAA,AAAAU,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAtD,AAAAiD,AACMrC;AADN,AAAA,AAAAmD,AAEE,AAAAY,AAA2CP;AAA3CO,AAAA,AAAAF,AAAAE;AAAA,AAAAD,AAAAC,AAAA,AAAcjD;AAAd,AAAAgD,AAAAC,AAAA,AAAuBhD;AAAvB,AAAA+C,AAAAC,AAAA,AAAkCC;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEehE,AACAc,AACAC,AACA,AAAGiD,AAAO,AAAA,AAAGA,AAAOxC,AAAmB,AAAA,AAAGxB;AAP3D,AAAAiD,AAAA,AAAAG,AAAAf;;;AAAA;;;;;AAAA,AAAA;;;AAAAgB,AAAA,AAAAnB,AAAA,AAAAE,AACkB,AAAA,AAACqB,AAAW,AAAK,AAAAC,AAAK9B;AAAL+B,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;AAAL;AAD9B,AAAA,AAAAN;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAH,AAAArB;;AAAA,AAAA,AAAAqB,AAAArB;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAkBL;;AAUtB,AAAA,AAAMwC,AAAyCC;AAA/C,AAGW,AAACtE,AAAI,AAAAuE;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAtE,AAAAqE,AAAA,AAAA;AAAA,AAAArE,AAAAsE,AAAA,AAAA,AAAOrE;AAAP,AAAAD,AAAAsE,AAAA,AAAA,AAAYvD;AAAZ,AAAAf,AAAAqE,AAAA,AAAA,AAAsBnE;AAAtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACwCD,AACAc,AACKb,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAPzD+D,AACA,AAACvE,AAAS,AAAA,AAAA,AAACe;;AAYtB,AAAA,AAAM4D,AAAiDC;AAAvD,AACE,AAAQ,AAAA,AAAAC,AAACpD;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAmD;AAAaD;AAA5C;AAAA,AAAA,AAAA,AAAArD,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAQ,AAAA,AAAAuD,AAAClD;AAAD,AAAO,AAAA,AAACF,AAAO,AAAA,AAAAoD;AAAWF;AAAlC;AAAA,AAAA,AAAA,AAAArD,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAMM,AAAmB,AAAA,AAAQ,AAAA,AAAA;AAC3BC,AAAa,AAAA,AAAAiD,AAAC/C;AAAD,AAAS,AAAA,AAACN,AAAO,AAAA,AAAAqD;AAAWH;AACzC3C,AAAkB2C,AAAkC,AAAA,AAAC3E,AAAW,AAACM,AAAM2B;AAF7E,AAGE,AAAAC,AAAA,AAAA6C;AAAA,AAAA,AAAA3C,AAAA,AAAA;AAAA,AAAA,AAAA2C,AAAAA;;AAAA,AAAA,AAAA1C,AAAA,AAAAC,AAAAyC;AAAA,AAAA,AAAA1C;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA7C,AAAA+C,AAAMqB;AAAN,AAAA,AAAApB,AAAA;AAAAwC;AAAA,AAAA,AAAA5C,AAAA,AAAA;;AAAA,AAAA,AAAA4C,AAAAA;;AAAA,AAAA,AAAA3C,AAAA,AAAAC,AAAA0C;AAAA,AAAA,AAAA3C;AAAA,AAAA,AAAA2C,AAAA3C;AAAA,AAAA,AAAA,AAAAK,AAAAsC;AAAA,AAAArC,AAs3E+C,AAAA6O,AAAAxM;AAt3E/CpC,AAAA,AAAAC,AAAAF;AAAAsC,AAAA,AAAAlC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAsC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAtC;AAAA,AAAA,AAAAK,AAAAN,AAAAuC,AACM9E;AADN,AAAA,AAAA,AAAA8C,AAAA+B,AAEE,AAAAI,AAAgCzB;AAAhCyB,AAAA,AAAApB,AAAAoB;AAAA,AAAAnB,AAAAmB,AAAA,AAAcnE;AAAd,AAAAgD,AAAAmB,AAAA,AAAuBjB;AAAvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEehE,AACAc,AACA,AAAGkD,AAAO,AAAA,AAAGA,AAAOxC,AAAmB,AAAA,AAAGxB;;;AAN3D,AAAA,AAAA8E,AAAA;;;;AAAA;;;;;AAAA,AAAA/B,AAAA,AAAAC,AAAA6B,AAAA,AAAAE,AAAA,AAAA7B,AAAA0B;;AAAA,AAAA7B,AAAA,AAAAC,AAAA6B,AAAA;;;AAAA,AAAA,AAAAzF,AAAAwF,AACM5E;AADN,AAAA,AAAAmD,AAEE,AAAA+B,AAAgC1B;AAAhC0B,AAAA,AAAArB,AAAAqB;AAAA,AAAApB,AAAAoB,AAAA,AAAcpE;AAAd,AAAAgD,AAAAoB,AAAA,AAAuBlB;AAAvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEehE,AACAc,AACA,AAAGkD,AAAO,AAAA,AAAGA,AAAOxC,AAAmB,AAAA,AAAGxB;AAN3D,AAAA+E,AAAA,AAAA3B,AAAAwB;;;AAAA;;;;;AAAA,AAAA;;;AAAAvB,AAAA,AAAAnB,AAAA,AAAAE,AACkB,AAAA,AAACqB,AAAW,AAAK,AAAAC,AAAK9B;AAAL+B,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;AAAL;AAD9B,AAAA,AAAAN;AAAA,AAAAC,AAAAD,AAAA,AAAA2B,AAAA,AAAA5B,AAAAuB;;AAAA,AAAA,AAAAvB,AAAAuB;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA7C,AAAkBL;;AAStB,AAAA,AAAM0D,AAAiD1E;AAAvD,AAGW,AAACb,AAAI,AAAAwF;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAvF,AAAAsF,AAAA,AAAA;AAAA,AAAAtF,AAAAuF,AAAA,AAAA,AAAOC;AAAP,AAAAxF,AAAAuF,AAAA,AAAA,AAActF;AAAd,AAAAD,AAAAsF,AAAA,AAAA,AAAoBpF;AAApB,AAAA,AAAA,AAAA,AAAA,AAAoCsF,AACAvF,AACKC,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AANrDM,AACA,AAACd,AAAS,AAAA,AAAA,AAACe;;AAQtB,AAAA,AAAM8E,AAAkC/E;AAAxC,AAGW,AAACb,AAAI,AAAA6F;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAA5F,AAAA2F,AAAA,AAAA;AAAA,AAAA3F,AAAA4F,AAAA,AAAA,AAAOJ;AAAP,AAAAxF,AAAA4F,AAAA,AAAA,AAAc3F;AAAd,AAAAD,AAAA4F,AAAA,AAAA,AAAmB5E;AAAnB,AAAAhB,AAAA2F,AAAA,AAAA,AAA+BzF;AAA/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmDsF,AACAvF,AACAe,AACKd,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAPpEM,AACA,AAACd,AAAS,AAAA,AAAA,AAAA,AAACe;;AAStB,AAAA,AAAMkF,AAAoCnF;AAA1C,AAGW,AAACb,AAAI,AAAAiG;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAhG,AAAA+F,AAAA,AAAA;AAAA,AAAA/F,AAAAgG,AAAA,AAAA,AAAOR;AAAP,AAAAxF,AAAAgG,AAAA,AAAA,AAAc/F;AAAd,AAAAD,AAAAgG,AAAA,AAAA,AAAmBjF;AAAnB,AAAAf,AAAA+F,AAAA,AAAA,AAA6B7F;AAA7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiDsF,AACEvF,AACAc,AACKb,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAPpEM,AACA,AAACd,AAAS,AAAA,AAAA,AAAA,AAACe;;AAStB,AAAA,AAAMsF,AAA0CvF;AAAhD,AAGW,AAACb,AAAI,AAAAqG;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAApG,AAAAmG,AAAA,AAAA;AAAA,AAAAnG,AAAAoG,AAAA,AAAA,AAAOZ;AAAP,AAAAxF,AAAAoG,AAAA,AAAA,AAAcnG;AAAd,AAAAD,AAAAmG,AAAA,AAAA,AAAoBjG;AAApB,AAAA,AAAA,AAAA,AAAA,AAAwCsF,AACAvF,AACA,AAAMoG,AAAkBnG,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AACzBkG,AACqB,AAAA,AAAAC,AAAC3E,AACD,AAAA,AAAC/B,AACD,AAACM,AAAMC;AAFP,AAAS,AAAA,AAACkB,AAAa,AAAA,AAAAiF;AADvBrG;AAH3B,AAOa,AAAA,AAAO,AAAGoG,AAAgBD;;AAXpF3F,AACA,AAACd,AAAS,AAAA,AAAA,AAACe;;AAgBtB,AAAA,AAAM6F,AAA4DC;AAAlE,AACE,AAAQ,AAAA,AAAAC,AAACrF;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAoF;AAAaD;AAA5C;AAAA,AAAA,AAAA,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAQ,AAAA,AAAAwF,AAACnF;AAAD,AAAO,AAAA,AAACF,AAAO,AAAA,AAAAqF;AAAWF;AAAlC;AAAA,AAAA,AAAA,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAAMsC,AAAgB,AAACpE,AAAM,AAAA,AAAAuH,AAAChF;AAAD,AAAS,AAAA,AAACN,AAAO,AAAA,AAAAsF;AAAWH;AACnDI,AAAgB,AAAA,AAAapD;AAC7BqD,AAAgB,AAAG,AAAA,AAAMD,AAAiB,AAAA,AAAA;AAC1ChF,AAAqB4E,AAA6C,AAAA,AAAC5G,AAAW,AAACM,AAAM2B;AAH3F,AAIE,AAAAC,AAAA,AAAAgF;AAAA,AAAA,AAAA9E,AAAA,AAAA;AAAA,AAAA,AAAA8E,AAAAA;;AAAA,AAAA,AAAA7E,AAAA,AAAAC,AAAA4E;AAAA,AAAA,AAAA7E;AAAA,AAAA,AAAA6E,AAAA7E;AAAA,AAAA,AAAA,AAAAK,AAAAwE;AAAA,AAAAvE,AAozE+C,AAAA6O,AAAAtK;AApzE/CtE,AAAA,AAAAC,AAAAF;AAAAwE,AAAA,AAAApE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAwE,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAxE;AAAA,AAAA,AAAAK,AAAAN,AAAAyE,AAAMhH;AAAN,AAAA,AAAA,AAAA8C,AAAAiE,AAAA,AAAA,AAAA,AAAA,AAAA,AAEe/G,AACA,AAAG4G,AAAgB,AAAGC,AAAgB,AAAA,AAAG7G;;AAHxD,AAAA,AAAAgH,AAAA;;;;AAAA;;;;;AAAA,AAAAjE,AAAA,AAAAC,AAAA+D,AAAA,AAAAE,AAAA,AAAA/D,AAAA4D;;AAAA,AAAA/D,AAAA,AAAAC,AAAA+D,AAAA;;;AAAA,AAAA,AAAA3H,AAAA0H,AAAM9G;AAAN,AAAA,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA8D,AAAA,AAAA7D,AAAA0D,AAEe9G,AACA,AAAG4G,AAAgB,AAAGC,AAAgB,AAAA,AAAG7G;;;AAHxD;;;;AAAA,AAAA;;AAAA,AAAA,AAAA8B,AAAW,AAAA,AAAC2B,AAAW,AAAK,AAAAC,AAAK9B;AAAL+B,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;AAAL;;AAM3B,AAAA,AAAMuD,AAA2ChD;AAAjD,AAGW,AAACtE,AAAI,AAAAuH;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAtH,AAAAqH,AAAA,AAAA;AAAA,AAAArH,AAAAsH,AAAA,AAAA,AAAO9B;AAAP,AAAAxF,AAAAsH,AAAA,AAAA,AAAcrH;AAAd,AAAAD,AAAAqH,AAAA,AAAA,AAAoBnH;AAApB,AAAA,AAAA,AAAA,AAAA,AAAoCsF,AACAvF,AACKC,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AANrD+D,AACA,AAACvE,AAAS,AAAA,AAAA,AAACe;;AAQtB,AAAA,AAAM4G,AAA2CC;AAAjD,AAIW,AAAC3H,AAAI,AAAA8H;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA3H,AAAA4H,AAAA,AAAA,AAAMpC;AAAN,AAAAxF,AAAA4H,AAAA,AAAA,AAAa1H;AAAb,AAAoB,AAAM2H,AAAI,AAACnF,AAAMxC;AACX4H,AAAU,AACK,AAAA,AAAAC,AAACnG,AACDc;AADA,AAAS,AAAA,AAACsF,AAAU,AAACC,AAAI,AAAA,AAAAF;AADzB7H;AAGfgI,AAAc,AAAGL,AAAIC;AAJ3B,AAAA,AAAA,AAAA,AAAA,AAKqBtC,AACAsC,AACAI;AAT9C,AAAA,AAAAT,AAACC,AACD,AAAA,AAAC9H;AADD,AAAS,AAAA,AAAC0B,AAAoB,AAAA,AAAAmG;AAD9BD;;AAcX,AAAA,AAAMW,AAAyCC;AAA/C,AAGW,AAACvI,AAAI,AAAAwI;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAvI,AAAAsI,AAAA,AAAA;AAAA,AAAAtI,AAAAuI,AAAA,AAAA,AAAO/C;AAAP,AAAAxF,AAAAuI,AAAA,AAAA,AAActI;AAAd,AAAAD,AAAAuI,AAAA,AAAA,AAAmBC;AAAnB,AAAAxI,AAAAsI,AAAA,AAAA,AAA4BpI;AAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAA6CsF,AACAvF,AACAuI,AACKtI,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAP9DgI,AACA,AAACxI,AAAS,AAAA,AAAA,AAAA,AAACe;;AAUtB,AAAA,AAAM8H,AAAsCL;AAA5C,AAGW,AAACvI,AAAI,AAAA6I;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAA5I,AAAA2I,AAAA,AAAA;AAAA,AAAA3I,AAAA4I,AAAA,AAAA,AAAOpD;AAAP,AAAAxF,AAAA4I,AAAA,AAAA,AAAc3I;AAAd,AAAAD,AAAA4I,AAAA,AAAA,AAAmBJ;AAAnB,AAAAxI,AAAA4I,AAAA,AAAA,AAA2B7H;AAA3B,AAAAf,AAAA2I,AAAA,AAAA,AAAqCzI;AAArC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuDsF,AACAvF,AACAuI,AACAzH,AACKb,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AARxEgI,AACA,AAACxI,AAAS,AAAA,AAAA,AAAA,AAAA,AAACe;;AAWtB,AAAA,AAAMkI,AAAkDT;AAAxD,AAGW,AAACvI,AAAI,AAAAiJ;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAhJ,AAAA+I,AAAA,AAAA;AAAA,AAAA/I,AAAAgJ,AAAA,AAAA,AAAOxD;AAAP,AAAAxF,AAAAgJ,AAAA,AAAA,AAAc/I;AAAd,AAAAD,AAAAgJ,AAAA,AAAA,AAAmBR;AAAnB,AAAAxI,AAAA+I,AAAA,AAAA,AAA4B7I;AAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgDsF,AACAvF,AACAuI,AACA,AAAMnC,AAAkBnG,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AACzBkG,AACqB,AAAA,AAAA2C,AAACrH,AACD,AAAA,AAAC/B,AACD,AAACM,AAAMC;AAFP,AAAS,AAAA,AAAA6I;AADT/I;AAH3B,AAOa,AAAA,AAAO,AAAGoG,AAAgBD;;AAZ5F+B,AACA,AAACxI,AAAS,AAAA,AAAA,AAAA,AAACe;;AAetB,AAAA,AAAMuI,AAAmCC;AAAzC,AACM,AAAA,AAAmCC;AAAnC,AAE0C,AAAA,AAAAC,AAACzH,AAED,AAAA,AAAC/B,AACD,AAACM,AAAMC;AAHP,AAAS,AAAK,AAAA,AAACkB,AAAO,AAAA,AAAA+H,AACR,AAAC/H,AAAE8H,AAAc,AAAA,AAAAC;AAF/BF;;AAD1C,AAO8BG;AAP9B,AASqC,AAAA,AAAAC,AAAC1J,AACD,AAACM,AAAMC;AADP,AAAM,AAAAmJ,AAAA,AAACvJ;AADPsJ;;AARrC,AAYqCE;AAZrC,AAc4C,AAAA,AAAAC,AAAC7H,AAED,AAAA,AAAC/B,AACD,AAACM,AAAMC;AAHP,AAAS,AAAK,AAAA,AAACkB,AAAQ,AAAA,AAAAmI,AACT,AAACzB,AAAUwB,AAAgB,AAAA,AAAAC;AAFzCN;;AAb5C,AAmBO,AAAMO,AAAY,AACK,AAAA,AAAAC,AAAC/H,AACD,AAAA,AAAC/B,AACD+J;AAFA,AAAS,AAAA,AAACtI,AAAO,AAAA,AAAAqI;AADjBR;AAAvB,AAAA,AAAA,AAKMU;AACAC,AAAc,AAAA,AAAAC,AAACrC;AAAD,AAAS,AAAAqC,AAAC/B,AAAU6B;AAAqBH;AAN7D,AAAA,AAQMM;AARN,AAAA,AAAA,AAAA,AASMC;AAEAC,AACA,AAAAnI,AAAA,AAAAoI;AAAA,AAAA,AAAAlI,AAAA,AAAA;AAAA,AAAA,AAAAkI,AAAAA;;AAAA,AAAA,AAAAjI,AAAA,AAAAC,AAAAgI;AAAA,AAAA,AAAAjI;AAAA,AAAA,AAAAiI,AAAAjI;AAAA,AAAA,AAAA,AAAAK,AAAA4H;AAAA,AAAA3H,AA2sEgC,AAAA6O,AAAAlH;AA3sEhC1H,AAAA,AAAAC,AAAAF;AAAA4H,AAAA,AAAAxH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA4H,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5H;AAAA,AAAA,AAAAK,AAAAN,AAAA6H,AAAME;AAAN,AAAA,AAAA,AAAAxH,AAAAqH,AAAA,AAAA,AACMG,AAAsB,AAACC,AAAyBD;;AADtD,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAArH,AAAA,AAAAC,AAAAmH,AAAA,AAAAE,AAAA,AAAAnH,AAAAgH;;AAAA,AAAAnH,AAAA,AAAAC,AAAAmH,AAAA;;;AAAA,AAAA,AAAA/K,AAAA8K,AAAMI;AAAN,AAAA,AAAAnH,AAAA,AAAA,AAAA,AAAAkH,AAAA,AAAAjH,AAAA8G,AACMI,AAAsB,AAACC,AAAyBD;;;AADtD;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxI,AAAW+H;;AAGXW,AACA,AAAA1I,AAAA,AAAA2I;AAAA,AAAA,AAAAzI,AAAA,AAAA;AAAA,AAAA,AAAAyI,AAAAA;;AAAA,AAAA,AAAAxI,AAAA,AAAAC,AAAAuI;AAAA,AAAA,AAAAxI;AAAA,AAAA,AAAAwI,AAAAxI;AAAA,AAAA,AAAA,AAAAK,AAAAmI;AAAA,AAAAlI,AAusEgC,AAAA6O,AAAA3G;AAvsEhCjI,AAAA,AAAAC,AAAAF;AAAAmI,AAAA,AAAA/H,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAmI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAnI;AAAA,AAAA,AAAAK,AAAAN,AAAAoI,AAAML;AAAN,AAAA,AAAA,AAAAxH,AAAA4H,AAAA,AAAA,AACMJ,AAAiB,AAACC,AAAyBD;;AADjD,AAAA,AAAAK,AAAA;;;;AAAA;;;;;AAAA,AAAA5H,AAAA,AAAAC,AAAA0H,AAAA,AAAAE,AAAA,AAAA1H,AAAAuH;;AAAA,AAAA1H,AAAA,AAAAC,AAAA0H,AAAA;;;AAAA,AAAA,AAAAtL,AAAAqL,AAAMH;AAAN,AAAA,AAAAnH,AAAA,AAAA,AAAA,AAAAyH,AAAA,AAAAxH,AAAAqH,AACMH,AAAiB,AAACC,AAAyBD;;;AADjD;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxI,AAAW8H;;AAhBjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAmBMiB,AACwC,AAACC,AAAoBN,AAChB,AAACM,AAAoBb;AArBxE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAuBMc,AAC2C,AAACC,AAA2BjB,AACxB,AAACiB,AAA2BhB;AAE3EiB,AACA,AAAAnJ,AAAA,AAAAoJ;AAAA,AAAA,AAAAlJ,AAAA,AAAA;AAAA,AAAA,AAAAkJ,AAAAA;;AAAA,AAAA,AAAAjJ,AAAA,AAAAC,AAAAgJ;AAAA,AAAA,AAAAjJ;AAAA,AAAA,AAAAiJ,AAAAjJ;AAAA,AAAA,AAAA,AAAAK,AAAA4I;AAAA,AAAA3I,AA2rEgC,AAAA6O,AAAAlG;AA3rEhC1I,AAAA,AAAAC,AAAAF;AAAA4I,AAAA,AAAAxI,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA4I,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5I;AAAA,AAAA,AAAAK,AAAAN,AAAA6I,AAAME;AAAN,AAAA,AAAA,AAAAxI,AAAAqI,AAAA,AAAA,AACyBG,AAAG,AAAA,AAACN,AAA6BM;;AAD1D,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAArI,AAAA,AAAAC,AAAAmI,AAAA,AAAAE,AAAA,AAAAnI,AAAAgI;;AAAA,AAAAnI,AAAA,AAAAC,AAAAmI,AAAA;;;AAAA,AAAA,AAAA/L,AAAA8L,AAAMI;AAAN,AAAA,AAAAnI,AAAA,AAAA,AAAA,AAAAkI,AAAA,AAAAjI,AAAA8H,AACyBI,AAAG,AAAA,AAACN,AAA6BM;;;AAD1D;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxJ,AAASkI;;AA5Bf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiCMuB;AAjCN,AAAA,AAAA,AAAA,AAAA,AAAA,AA2CMC;AAMAC,AAAW,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA3L,AAAA6L,AAAA,AAAA,AAAME;AAAN,AAAA/L,AAAA6L,AAAA,AAAA,AAAaG;AAAbF,AAAAF;AAAA,AAAA5L,AAAA8L,AAAA,AAAA,AAAoBG;AAApB,AAAAjM,AAAA8L,AAAA,AAAA,AAA2BI;AAA3B,AAAkC,AAAI,AAACC,AAAKJ,AAAOE;AAC3B,AAAG,AAAUT,AAAcO,AAAQ,AAAUP,AAAcS;;AAC3D,AAAG,AAAUR,AAAYO,AAAM,AAAUP,AAAYS;;;AAExFE,AAAK,AAACC,AAAQ,AAAC1L,AAAKtB,AAAMC,AACZoM,AACA,AAACnI,AAAO2G,AAAYO,AAAYK,AAAWE,AAAWE;AAvD1E,AAyDKkB;;AAKlB,AAAA,AAAME,AAA2BC;AAAjC,AACM,AAAA,AAAA,AAAA,AAAA,AACMC;AADN,AAAA,AAAA,AAAA,AAIMC;AAEAC,AAE4C,AAAC7M,AAAI,AAAA8M,AAcLe,AACA,AAAA,AAACrB,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAC1L;AAfL,AAAA,AAAAiM,AAAAD;AAAAE,AAAA,AAAA7M,AAAA4M,AAAA,AAAA;AAAA,AAAA5M,AAAA6M,AAAA,AAAA,AAAOC;AAAP,AAAA9M,AAAA6M,AAAA,AAAA,AAAgBE;AAAhB,AAAA/M,AAAA4M,AAAA,AAAA,AAAsB1M;AAAtB,AAA6B,AAAA6B,AAAA,AAAAiL;AAAA,AAAA,AAAA/K,AAAA,AAAA;AAAA,AAAA,AAAA+K,AAAAA;;AAAA,AAAA,AAAA9K,AAAA,AAAAC,AAAA6K;AAAA,AAAA,AAAA9K;AAAA,AAAA,AAAA8K,AAAA9K;AAAA,AAAA,AAAA,AAAAK,AAAAyK;AAAA,AAAAxK,AAgpEvC,AAAA6O,AAAArE;AAhpEuCvK,AAAA,AAAAC,AAAAF;AAAAyK,AAAA,AAAArK,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyK,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzK;AAAA,AAAA,AAAAK,AAAAN,AAAA0K,AAAME;AAAN,AAAA,AAAA,AAAArK,AAAAkK,AACK,AAAMI,AAAW,AAACtJ,AAAIyI,AAAYY;AAC5BE,AAAa,AAAAC,AAAI,AAAA,AAAA,AACK,AAAA,AAAC3L,AACDvC;AADAmO;AAAA,AAAS,AAAClM,AAAE+L,AAAW,AAAA,AAAAG;;AADvBtN;AAAT,AAAA,AAAAqN;AAAAA;;AAAA;;;AAKbE,AAAU,AAAGH,AAAa,AAACvJ,AAAI0I,AAAaW;AANlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOkBN,AACAC,AACAM,AACAD,AACEE,AACFG;;;AAbvB,AAAA,AAAAP,AAAA;;;;AAAA;;;;;AAAA,AAAAlK,AAAA,AAAAC,AAAAgK,AAAA,AAAAE,AAAA,AAAAhK,AAAA6J;;AAAA,AAAAhK,AAAA,AAAAC,AAAAgK,AAAA;;;AAAA,AAAA,AAAA5N,AAAA2N,AAAMI;AAAN,AAAA,AAAAhK,AACK,AAAMiK,AAAW,AAACtJ,AAAIyI,AAAYY;AAC5BE,AAAa,AAAAC,AAAI,AAAA,AAAA,AACK,AAAA,AAAC3L,AACDvC;AADAmO;AAAA,AAAS,AAAClM,AAAE+L,AAAW,AAAA,AAAAG;;AADvBtN;AAAT,AAAA,AAAAqN;AAAAA;;AAAA;;;AAKbE,AAAU,AAAGH,AAAa,AAACvJ,AAAI0I,AAAaW;AANlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOkBN,AACAC,AACAM,AACAD,AACEE,AACFG;AAbvB,AAAAN,AAAA,AAAA9J,AAAA2J;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjL,AAAA,AAAA,AAAA,AAAA;AAFlCwK,AACA,AAAC3M,AAAS,AAAA,AAAA,AAACe;AAkBvDgN,AAA6C,AAYK,AAAC9N,AAAI,AAAAkO,AAGLL,AACA,AAAA,AAAA,AAACrB,AACDkC;AALK,AAAA,AAAAP,AAAAD;AAAA,AAAA/N,AAAAgO,AAAA,AAAA,AAAMC;AAAN,AAAAjO,AAAAgO,AAAA,AAAA,AAAQ9N;AAAR,AAAe,AAAMgO,AAAU,AAACjP,AAAM,AAACY,AAAI,AAAAsO;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAAtK,AAAAsK;AAAA,AAAArK,AAAAqK,AAAA,AAAahB;AAAb,AAAArJ,AAAAqK,AAAA,AAAeX;AAAf,AAAA,AAA6BL,AAAEK;AAAYvN;AAAvE,AAEK,AAAA,AAAAmO,AAACxO;AAAD,AAAM,AAAAwO,AAAA,AAACC,AAAeJ;AAAWhO;AAZ1D,AAACL,AAAI,AAAA+N,AASL,AAAA,AAAChO;AATI,AAAA,AAAAiO,AAAAD;AAAAE,AAAA,AAAA9N,AAAA6N,AAAA,AAAA;AAAA,AAAA7N,AAAA8N,AAAA,AAAA,AAAOhB;AAAP,AAAA9M,AAAA8N,AAAA,AAAA,AAAgBT;AAAhB,AAAArN,AAAA8N,AAAA,AAAA,AAA2BV;AAA3B,AAAApN,AAAA6N,AAAA,AAAA,AAA8B3N;AAA9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkD4M,AACAO,AACAD,AACOlN,AACA,AAAA,AAACL,AACD,AAACM,AAAMC,AACTF,AACA,AAAA,AAACL,AACD,AAACM,AAAMC;AAVnEsM,AACA,AAAC9M,AAAS,AAAA,AAAA,AAAA,AAACe;AAkB7D6N,AAAwC,AAEK,AAAC3O,AAAI,AAAA4O,AAGLf,AACA,AAAA,AAAA,AAACrB,AACDkC;AALK,AAAA,AAAAG,AAAAD;AAAAE,AAAA,AAAA3O,AAAA0O,AAAA,AAAA;AAAA,AAAA1O,AAAA2O,AAAA,AAAA,AAAOV;AAAP,AAAAjO,AAAA2O,AAAA,AAAA,AAASV;AAAT,AAAAjO,AAAA0O,AAAA,AAAA,AAAYxO;AAAZ,AAAmB,AAAMgO,AAAU,AAACjP,AAAM,AAACY,AAAI,AAAA+O;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA/K,AAAA+K;AAAA,AAAA9K,AAAA8K,AAAA,AAAazB;AAAb,AAAArJ,AAAA8K,AAAA,AAAepB;AAAf,AAAA,AAA6BL,AAAEK;AAAYvN;AAAvE,AAEK,AAAA,AAAA4O,AAACjP;AAAD,AAAM,AAAAiP,AAAA,AAACR,AAAeJ;AAAWhO;AAJ9DwM,AACA,AAAC9M,AAAS,AAAA,AAAA,AAACe;AA7C9D,AAAA,AAqDMgN,AAA6Ca;;AAIzD,AAAA,AAAMO,AAAkCC,AAAaC,AAA2BC;AAAhF,AACE,AAAMC,AAC8B,AAACtP,AAAI,AAAAuP,AACL,AAAA,AAACG;AADI,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAAvL,AAAAuL;AAAA,AAAAtL,AAAAsL,AAAA,AAAavC;AAAb,AAAA/I,AAAAsL,AAAA,AAAsBtC;AAAtB,AAAAhJ,AAAAsL,AAAA,AAA2BC;AAA3B,AAAA,AAAA,AAA6CxC,AAASC,AAAMuC;AADjEL;AAG9BO,AAC8B,AAAC3P,AAAI,AAAA4P,AACL,AAAA,AAACF;AADI,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA5L,AAAA4L;AAAA,AAAA3L,AAAA2L,AAAA,AAAa3O;AAAb,AAAAgD,AAAA2L,AAAA,AAAsBC;AAAtB,AAAA,AAAqC5O,AAAS4O;AADnDT;AAG9BU,AAAyB,AAAK9C,AAASC;AAAd,AACQD,AAASC,AACV,AAAA,AAAChJ,AAAIoL,AACL,AAACpL,AAAIyL;;AACrCK,AAC8B,AAAChQ,AAAI,AAAAiQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAAjM,AAAAiM;AAAAA,AACYE;AADZ,AAAAlM,AAAAgM,AAAA,AAAajD;AAAb,AAAA/I,AAAAgM,AAAA,AAAsBhD;AAAtB,AAAAhJ,AAAAgM,AAAA,AAA2BC;AAA3B,AAEE,AAAA,AAAC1B,AAAM2B,AACM,AAAGD,AAAO,AAACJ,AAAoB9C,AAASC;AAJ5DiC;AAK9BkB,AAAqB,AAaK,AAACrQ,AAAI,AAAA4Q,AAML/C;AANK,AAAA,AAAAgD,AAAAD;AAAAC,AAAA,AAAA5M,AAAA4M;AAAA,AAAA3M,AAAA2M,AAAA,AAAa5D;AAAb,AAAA/I,AAAA2M,AAAA,AAAsBH;AAAtB,AAAAxM,AAAA2M,AAAA,AAA2BC;AAA3B,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOD,AACgBJ,AACAzD,AACA6D;AAT/B,AAAC9Q,AAAI,AAAAwQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAAxM,AAAAwM;AAAA,AAAAvM,AAAAuM,AAAA,AAAaxD;AAAb,AAAA/I,AAAAuM,AAAA,AAAsBC;AAAtB,AAAA,AAAA,AAAA,AAAA,AACazD,AACAyD,AACA,AAAA,AAAK,AAACC,AAAW,AAAA,AAAGD;AARtC,AAAC1Q,AAAI,AAAAsQ;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAnQ,AAAAoQ,AAAA,AAAA,AAAMtD;AAAN,AAAA9M,AAAAoQ,AAAA,AAAA,AAAelQ;AAAf,AAAA,AAAA,AAAA,AACa4M,AACA,AAAC3M,AAAMC,AAAE,AAAA,AAACP,AAAUK;AALtC2P,AAEA,AAAA,AAACjQ;AAkB3BiR,AAAiB,AAeK,AAAChR,AAAI,AAAAsR,AAOLzD;AAPK,AAAA,AAAA0D,AAAAD;AAAAC,AAAA,AAAAtN,AAAAsN;AAAA,AAAArN,AAAAqN,AAAA,AAAatE;AAAb,AAAA/I,AAAAqN,AAAA,AAAsBrE;AAAtB,AAAAhJ,AAAAqN,AAAA,AAA2Bb;AAA3B,AAAAxM,AAAAqN,AAAA,AAAgCT;AAAhC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOD,AACgBJ,AACAzD,AACAC,AACA4D;AAX/B,AAAC9Q,AAAI,AAAAoR;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAApN,AAAAoN;AAAA,AAAAnN,AAAAmN,AAAA,AAAapE;AAAb,AAAA/I,AAAAmN,AAAA,AAAsBnE;AAAtB,AAAAhJ,AAAAmN,AAAA,AAA2BX;AAA3B,AAAA,AAAA,AAAA,AAAA,AAAA,AACazD,AACAC,AACAwD,AACA,AAAA,AAAK,AAACC,AAAW,AAAA,AAAGD;AAVtC,AAAC1Q,AAAI,AAAAiR;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAhR,AAAA+Q,AAAA,AAAA;AAAA,AAAA/Q,AAAAgR,AAAA,AAAA,AAAOlE;AAAP,AAAA9M,AAAAgR,AAAA,AAAA,AAAgBjE;AAAhB,AAAA/M,AAAA+Q,AAAA,AAAA,AAAsB7Q;AAAtB,AAAA,AAAA,AAAA,AAAA,AACa4M,AACAC,AACA,AAAC5M,AAAMC,AAAE,AAAA,AAACP,AAAUK;AANtC2P,AAEA,AAACjQ,AAAS,AAAA,AAAA,AAACe;AArCvC,AAAA,AA2DGuP,AAAqBW","names":["dcs.prototype-6.data-shaping/trend","xy-pairs","rf","kixi.stats.core/simple-linear-regression","cljs.core/first","cljs.core/second","jsobj","cljs.core.transduce","cljs.core/identity","dcs.prototype-6.data-shaping/rollup-population-regions","population","cljs.core/group-by","cljs.core.map","p__33938","vec__33939","cljs.core.nth","year","coll","cljs.core.apply","cljs.core/+","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","household-co2e","p__33942","vec__33943","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-waste","cljs.core.juxt","p__33946","vec__33947","vec__33950","material","management","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste","household-waste-scotland","js/Error","p1__33953#","cljs.core/every?","cljs.core._EQ_","p1__33954#","cljs.core/some","per-year-multipler","records-2011","p1__33955#","cljs.core.filter","max-year","cljs.core/max","iter__4564__auto__","s__33957","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4560__auto__","s__33959","cljs.core/chunked-seq?","c__4562__auto__","size__4563__auto__","cljs.core/count","b__33961","cljs.core/chunk-buffer","i__33960","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33958","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4561__auto__","cljs.core.concat","iter__33956","record-2011","cljs.core.range","x__4252__auto__","y__4253__auto__","map__33962","cljs.core/--destructure-map","cljs.core.get","map__33963","tonnes","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","business-waste-by-region","p__33964","vec__33965","vec__33968","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-business-waste-by-region","business-waste-by-region-scotland","p1__33971#","p1__33972#","p1__33973#","s__33975","s__33977","b__33979","i__33978","iter__33976","iter__33974","map__33980","map__33981","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","p__33982","vec__33983","vec__33986","region","dcs.prototype-6.data-shaping/rollup-household-waste-materials","p__33989","vec__33990","vec__33993","dcs.prototype-6.data-shaping/rollup-household-waste-managements","p__33996","vec__33997","vec__34000","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","p__34004","vec__34005","vec__34008","total-tonnes","recycled-tonnes","p1__34003#","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste-percentage-recycled","household-waste-percentage-recycled-scotland","p1__34011#","p1__34012#","p1__34013#","percentage-2011","per-year-change","s__34015","b__34017","i__34016","iter__34014","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","p__34018","vec__34019","vec__34022","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","waste-site","p1__34025#","cljs.core.remove","p__34027","vec__34028","all","household","p1__34026#","cljs.core/contains?","cljs.core/set","non-household","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","stirling-bin-collection","p__34031","vec__34032","vec__34035","quarter","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","p__34038","vec__34039","vec__34042","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","p__34046","vec__34047","vec__34050","p1__34045#","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","stirling-community-food-tonnes","counter-party","p1__34053#","subflows","p1__34054#","counter-parties","p1__34055#","source-keys","p1__34056#","cljs.core.distinct","not-waste-sources","waste-sources","p1__34057#","used-as-food-outcomes","not-used-as-food-outcomes","subflows-1a","s__34059","b__34061","i__34060","iter__34058","from","sum-counter-party-tonnes","subflows-1b","s__34063","b__34065","i__34064","iter__34062","subflows-2","sum-subflows-tonnes","subflows-3","sum-counter-parties-tonnes","subflows-4","s__34067","b__34069","i__34068","iter__34066","to","ordered-froms","ordered-tos","comparator","p__34070","p__34071","vec__34072","vec__34075","a-from","a-to","b-from","b-to","cljs.core.not_EQ_","flow","cljs.core.sort_by","dcs.prototype-6.data-shaping/calc-ace-furniture-trends","sold-counts","yyyy-MM-dds","month-counts","sold-items-by-avg-count-per-month-at-x","p__34081","vec__34082","vec__34085","category","item","s__34089","b__34091","i__34090","iter__34088","x","yyyy-MM-dd","period-count","or__4160__auto__","p1__34078#","avg-count","cljs.core/flatten","sold-categories-by-avg-count-per-month-trend","p__34098","vec__34099","vec__34102","p__34092","vec__34093","_","trend-val","p__34096","map__34097","p1__34079#","cljs.core.assoc","cljs.core/reverse","sold-items-by-avg-count-per-month-trend","p__34105","vec__34106","vec__34109","p__34112","map__34113","p1__34080#","dcs.prototype-6.data-shaping/calc-ace-furniture-flights-worth","sold-weights","furniture-to-waste-streams","co2e-multiplier","furniture->waste-stream","p__34114","map__34115","waste-stream","cljs.core.into","waste-stream->multiplier","p__34116","map__34117","multiplier","get-co2e-multiplier","sold-weights-with-co2es","p__34118","map__34119","weight","m","flights-per-category","p__34124","vec__34125","p__34122","map__34123","co2e","Math/round","p__34120","map__34121","flights","cljs.core.repeat","flights-per-item","p__34132","vec__34133","vec__34136","p__34130","map__34131","p__34128","map__34129","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.prototype-6.data-shaping\n  (:require [kixi.stats.core :as stats]))\n\n\n; Compute 'the trend of y'.\n; (Returns the gradient of a linear approximation to the curve decribed by xy-pairs.)\n(defn trend [xy-pairs]\n      (let [rf (stats/simple-linear-regression first second)\n            ^js jsobj (transduce identity rf xy-pairs)]\n           (. jsobj -slope)))\n\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-population-regions [population]\n      (->> population\n           (group-by :year)\n           (map (fn [[year coll]] {:region     \"Scotland\"\n                                   :year       year\n                                   :count (->> coll\n                                               (map :count)\n                                               (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-co2e-regions [household-co2e]\n      (->> household-co2e\n           (group-by :year)\n           (map (fn [[year coll]] {:region \"Scotland\"\n                                   :year   year\n                                   :tonnes (->> coll\n                                                (map :tonnes)\n                                                (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-waste-regions [household-waste]\n      (->> household-waste\n           (group-by (juxt :year :material :management))\n           (map (fn [[[year material management] coll]] {:region     \"Scotland\"\n                                                         :year       year\n                                                         :material   material\n                                                         :management management\n                                                         :tonnes     (->> coll\n                                                                          (map :tonnes)\n                                                                          (apply +))}))))\n\n;; Calculate the Scottish Government target.\n;;   https://www.gov.scot/policies/managing-waste/ says that\n;;     by 2025, the Scottish Government aims to\n;;     reduce total waste arising in Scotland by 15% against 2011 levels.\n(defn calc-scotGovTarget-for-household-waste [household-waste-scotland]\n  (assert (every? #(= \"Scotland\" (:region %)) household-waste-scotland) \"expected all :region values to be \\\"Scotland\\\"\")\n  (assert (some #(= 2011 (:year %)) household-waste-scotland) \"expected some :year values to be 2011\") ;; slightly too weak but better than no checking\n  (let [per-year-multipler (/ 0.15 (- 2025 2011)) ;; NB assumes a linear, year-on-year reduction from 2011 towards the 2025 target \n        records-2011 (filter #(= 2011 (:year %)) household-waste-scotland)\n        max-year     (->> household-waste-scotland (map :year) (apply max))]\n    (for [record-2011 records-2011\n          year        (range 2011 (inc (min max-year 2025)))]\n      (let [{:keys [material management tonnes]} record-2011]\n        {:region     \"Scot gov target\"\n         :year       year\n         :material   material\n         :management management\n         :tonnes     (- tonnes (* tonnes per-year-multipler (- year 2011)))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-business-waste-by-region-regions [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :year :material))\n           (map (fn [[[year material] coll]] {:region   \"Scotland\"\n                                              :year     year\n                                              :material material\n                                              :tonnes   (->> coll\n                                                             (map :tonnes)\n                                                             (apply +))}))))\n\n;; Calculate the Scottish Government target.\n;;   https://www.gov.scot/policies/managing-waste/ says that\n;;     by 2025, the Scottish Government aims to\n;;     reduce total waste arising in Scotland by 15% against 2011 levels.\n(defn calc-scotGovTarget-for-business-waste-by-region [business-waste-by-region-scotland]\n  (assert (every? #(= \"Scotland\" (:region %)) business-waste-by-region-scotland) \"expected all :region values to be \\\"Scotland\\\"\")\n  (assert (some #(= 2011 (:year %)) business-waste-by-region-scotland) \"expected some :year values to be 2011\") ;; slightly too weak but better than no checking\n  (let [per-year-multipler (/ 0.15 (- 2025 2011)) ;; NB assumes a linear, year-on-year reduction from 2011 towards the 2025 target \n        records-2011 (filter #(= 2011 (:year %)) business-waste-by-region-scotland)\n        max-year     (->> business-waste-by-region-scotland (map :year) (apply max))]\n    (for [record-2011 records-2011\n          year        (range 2011 (inc (min max-year 2025)))]\n      (let [{:keys [material tonnes]} record-2011]\n        {:region     \"Scot gov target\"\n         :year       year\n         :material   material\n         :tonnes     (- tonnes (* tonnes per-year-multipler (- year 2011)))}))))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-household-waste-materials-and-management [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Roll-up to get values for (region, year, management) triples\n(defn rollup-household-waste-materials [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :management))\n           (map (fn [[[region year management] coll]] {:region     region\n                                                       :year       year\n                                                       :management management\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Roll-up to get values for (region, year, material) triples\n(defn rollup-household-waste-managements [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :material))\n           (map (fn [[[region year material] coll]] {:region     region\n                                                       :year       year\n                                                       :material   material\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Calculate the percentage recycled values for (region, year) pairs\n(defn calc-household-waste-percentage-recycled [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region     region\n                                            :year       year\n                                            :percentage (let [total-tonnes (->> coll\n                                                                                (map :tonnes)\n                                                                                (apply +))\n                                                              recycled-tonnes (->> coll\n                                                                                   (filter #(= \"Recycled\" (:management %)))\n                                                                                   (map :tonnes)\n                                                                                   (apply +))]\n                                                             (double (* 100 (/ recycled-tonnes total-tonnes))))}))))\n\n;; Calculate the Scottish Government target.\n;;   https://www.gov.scot/policies/managing-waste/ says that\n;;     by 2025, the Scottish Government aims to\n;;     recycle 70% of remaining waste.\n(defn calc-scotGovTarget-for-household-waste-percentage-recycled [household-waste-percentage-recycled-scotland]\n  (assert (every? #(= \"Scotland\" (:region %)) household-waste-percentage-recycled-scotland) \"expected all :region values to be \\\"Scotland\\\"\")\n  (assert (some #(= 2011 (:year %)) household-waste-percentage-recycled-scotland) \"expected some :year values to be 2011\") ;; slightly too weak but better than no checking\n  (let [record-2011     (first (filter #(= 2011 (:year %)) household-waste-percentage-recycled-scotland))\n        percentage-2011 (:percentage record-2011)\n        per-year-change (/ (- 70 percentage-2011) (- 2025 2011)) ;; NB assumes a linear, year-on-year change from 2011 towards the 2025 target \n        max-year        (->> household-waste-percentage-recycled-scotland (map :year) (apply max))]\n    (for [year (range 2011 (inc (min max-year 2025)))]\n      {:region     \"Scot gov target\"\n       :year       year\n       :percentage (+ percentage-2011 (* per-year-change (- year 2011)))})))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-business-waste-by-region-materials [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Count the waste sites per category in each region\n(defn count-waste-sites-per-category-per-region [waste-site]\n      (->> waste-site\n           (remove #(= \"Not operational\" (:status %)))\n           (group-by :region)\n           (map (fn [[region coll]] (let [all (count coll)\n                                          household (->> coll\n                                                         (filter #(contains? (set (:accepts %)) \"Household\"))\n                                                         count)\n                                          non-household (- all household)]\n                                         {:region        region\n                                          :household     household\n                                          :non-household non-household})))))\n\n\n;; Roll-up to get values for (region, year, quarter) triples\n(defn rollup-stirling-bin-collection-ma-re-mi [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter))\n           (map (fn [[[region year quarter] coll]] {:region  region\n                                                    :year    year\n                                                    :quarter quarter\n                                                    :tonnes  (->> coll\n                                                                  (map :tonnes)\n                                                                  (apply +))}))))\n\n\n;; Roll-up to get values for (region, year, quarter, material) quadruples\n(defn rollup-stirling-bin-collection-re-mi [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter :material))\n           (map (fn [[[region year quarter material] coll]] {:region   region\n                                                             :year     year\n                                                             :quarter  quarter\n                                                             :material material\n                                                             :tonnes   (->> coll\n                                                                            (map :tonnes)\n                                                                            (apply +))}))))\n\n\n;; Calculate the percentage recycled values for (region, year, quarter) triples\n(defn calc-stirling-bin-collection-percentage-recycled [stirling-bin-collection]\n      (->> stirling-bin-collection\n           (group-by (juxt :region :year :quarter))\n           (map (fn [[[region year quarter] coll]] {:region     region\n                                                    :year       year\n                                                    :quarter    quarter\n                                                    :percentage (let [total-tonnes (->> coll\n                                                                                        (map :tonnes)\n                                                                                        (apply +))\n                                                                      recycled-tonnes (->> coll\n                                                                                           (filter #(:recycling? %))\n                                                                                           (map :tonnes)\n                                                                                           (apply +))]\n                                                                     (double (* 100 (/ recycled-tonnes total-tonnes))))}))))\n\n\n;; Calculate the flow (paths and amounts) of food material through the Stirling Community Food system\n(defn calc-stirling-community-food-flow [stirling-community-food-tonnes]\n      (letfn [(sum-counter-party-tonnes [counter-party]\n                                           (->> stirling-community-food-tonnes\n                                                (filter #(and (= \"in\" (:io-direction %))\n                                                              (= counter-party (:counter-party %))))\n                                                (map :tonnes)\n                                                (apply +)))\n\n              (sum-subflows-tonnes [subflows]\n                                      (->> subflows\n                                           (map #(nth % 2))\n                                           (apply +)))\n\n              (sum-counter-parties-tonnes [counter-parties]\n                                             (->> stirling-community-food-tonnes\n                                                  (filter #(and (= \"out\" (:io-direction %))\n                                                                (contains? counter-parties (:counter-party %))))\n                                                  (map :tonnes)\n                                                  (apply +)))]\n\n             (let [source-keys (->> stirling-community-food-tonnes\n                                    (filter #(= \"in\" (:io-direction %)))\n                                    (map :counter-party)\n                                    distinct)\n\n                   not-waste-sources #{\"Purchased\" \"Donated not waste\"}\n                   waste-sources (remove #(contains? not-waste-sources %) source-keys)\n\n                   used-as-food-outcomes #{\"Used as food\"}\n                   not-used-as-food-outcomes #{\"Donated to animal sanctuary\" \"Used by individuals for compost\" \"Council compost, Energen biogas, etc.\"}\n\n                   subflows-1a\n                   (for [from waste-sources]\n                        [from \"Would-be waste\" (sum-counter-party-tonnes from)])\n\n                   subflows-1b\n                   (for [from not-waste-sources]\n                        [from \"Not waste\" (sum-counter-party-tonnes from)])\n\n                   subflows-2\n                   [[\"Not waste\" \"Stirling Community Food\" (sum-subflows-tonnes subflows-1b)]\n                    [\"Would-be waste\" \"Stirling Community Food\" (sum-subflows-tonnes subflows-1a)]]\n\n                   subflows-3\n                   [[\"Stirling Community Food\" \"Used as food\" (sum-counter-parties-tonnes used-as-food-outcomes)]\n                    [\"Stirling Community Food\" \"Not used as food\" (sum-counter-parties-tonnes not-used-as-food-outcomes)]]\n\n                   subflows-4\n                   (for [to not-used-as-food-outcomes]\n                        [\"Not used as food\" to (sum-counter-parties-tonnes #{to})])\n\n                   ;; concat and order them\n\n                   ordered-froms [\"Purchased\"\n                             \"Donated not waste\"\n                             \"Local supermarkets\"\n                             \"Fareshare\"\n                             \"Donated as waste\"\n                             \"Other\"\n                             \"Not waste\"\n                             \"Would-be waste\"\n                             \"Stirling Community Food\"]\n\n                   ordered-tos [\"Used as food\" ;; should be no need to worry about the earlier ones in the flow\n                                \"Not used as food\"\n                                \"Donated to animal sanctuary\"\n                                \"Used by individuals for compost\"\n                                \"Council compost, Energen biogas, etc.\"]\n\n                   comparator (fn [[a-from a-to] [b-from b-to]] (if (not= a-from b-from)\n                                                      (< (.indexOf ordered-froms a-from) (.indexOf ordered-froms b-from))\n                                                      (< (.indexOf ordered-tos a-to) (.indexOf ordered-tos b-to))))\n\n                   flow (sort-by (juxt first second)\n                                 comparator\n                                 (concat subflows-1a subflows-1b subflows-2 subflows-3 subflows-4))]\n\n                  flow)))\n\n;; Calculate for the ACE furniture sold counts,\n;;   the avg-count-per-month for each accounting period (for each category/item)\n;;   and then the trend (for each category/item).\n(defn calc-ace-furniture-trends [sold-counts]\n      (let [;; The x value for a yyyy-MM-dd, is the yyyy-MM-dd's index\n            yyyy-MM-dds [\"2018-02-28\" \"2019-02-28\" \"2019-08-31\"]\n\n            ;; The x value for a month-count, is the month-count's index\n            month-counts [12 12 6]\n\n            sold-items-by-avg-count-per-month-at-x (->> sold-counts\n                                                        (group-by (juxt :category :item))\n                                                        (map (fn [[[category item] coll]] (for [x [0 1 2]]\n                                                                                               (let [yyyy-MM-dd (get yyyy-MM-dds x)\n                                                                                                     period-count (or (->> coll\n                                                                                                                           (filter #(= yyyy-MM-dd (:yyyy-MM-dd %)))\n                                                                                                                           first\n                                                                                                                           :count)\n                                                                                                                      0)\n                                                                                                     avg-count (/ period-count (get month-counts x))]\n                                                                                                    {:category   category\n                                                                                                     :item       item\n                                                                                                     :yyyy-MM-dd yyyy-MM-dd\n                                                                                                     :x          x\n                                                                                                     :period-count period-count\n                                                                                                     :avg-count  avg-count}))))\n                                                        flatten\n                                                        (sort-by (juxt :category :item :yyyy-MM-dd :x)))\n\n            sold-categories-by-avg-count-per-month-trend (->> sold-items-by-avg-count-per-month-at-x\n                                                              (group-by (juxt :category :yyyy-MM-dd :x))\n                                                              (map (fn [[[category yyyy-MM-dd x] coll]] {:category   category\n                                                                                                         :yyyy-MM-dd yyyy-MM-dd\n                                                                                                         :x          x\n                                                                                                         :period-count (->> coll\n                                                                                                                            (map :period-count)\n                                                                                                                            (apply +))\n                                                                                                         :avg-count  (->> coll\n                                                                                                                          (map :avg-count)\n                                                                                                                          (apply +))}))\n                                                              (group-by :category)\n                                                              (map (fn [[_ coll]] (let [trend-val (trend (map (fn [{:keys [x avg-count]}] [x avg-count]) coll))]\n                                                                                       ;; put this calculated trend-val into each item in the coll\n                                                                                       (map #(assoc % :trend trend-val) coll))))\n                                                              flatten\n                                                              (sort-by :trend)\n                                                              reverse)\n\n            sold-items-by-avg-count-per-month-trend (->> sold-items-by-avg-count-per-month-at-x\n                                                         (group-by (juxt :category :item))\n                                                         (map (fn [[[_ _] coll]] (let [trend-val (trend (map (fn [{:keys [x avg-count]}] [x avg-count]) coll))]\n                                                                                      ;; put this calculated trend-val into each item in the coll\n                                                                                      (map #(assoc % :trend trend-val) coll))))\n                                                         flatten\n                                                         (sort-by :trend)\n                                                         reverse)]\n\n           [sold-categories-by-avg-count-per-month-trend sold-items-by-avg-count-per-month-trend]))\n\n;; Calculate for the ACE furniture sold weights,\n;;   the flights-worth-of-CO2e for each category/item.\n(defn calc-ace-furniture-flights-worth [sold-weights furniture-to-waste-streams co2e-multiplier]\n  (let [furniture->waste-stream  (->> furniture-to-waste-streams\n                                      (map (fn [{:keys [category item waste-stream]}] [[category item] waste-stream]))\n                                      (into {}))\n        waste-stream->multiplier (->> co2e-multiplier\n                                      (map (fn [{:keys [material multiplier]}] [material multiplier]))\n                                      (into {}))\n        get-co2e-multiplier      (fn [category item]\n                                   (->> [category item]\n                                        (get furniture->waste-stream)\n                                        (get waste-stream->multiplier)))\n        sold-weights-with-co2es  (->> sold-weights\n                                      (map (fn [{:keys [category item weight]\n                                                 :as   m}]\n                                             (assoc m\n                                                    :co2e (* weight (get-co2e-multiplier category item))))))\n        flights-per-category (->> sold-weights-with-co2es\n                                               ;; roll-up to per-category\n                                  (group-by :category)\n                                  (map (fn [[category coll]]\n                                         {:category category\n                                          :co2e     (apply + (map :co2e coll))}))\n                                               ;; and calcuate the avoided CO2e in terms of flights (Glasgow -> Berlin, one-way)\n                                               ;; 202.5 = average kg of CO2e per flight \n                                  (map (fn [{:keys [category co2e]}]\n                                         {:category category\n                                          :co2e     co2e\n                                          :flights  (int (Math/round (/ co2e 202.5)))}))\n                                               ;; for a Vega emoji representation, create a record per flight\n                                  (map (fn [{:keys [category co2e flights]}]\n                                         (repeat flights\n                                                 {:co2e          co2e\n                                                  :category      category\n                                                  :flights-total flights\n                                                  :flight        1})))\n                                  flatten)\n        flights-per-item (->> sold-weights-with-co2es\n                          ;; roll-up to per-item\n                              (group-by (juxt :category :item))\n                              (map (fn [[[category item] coll]]\n                                     {:category category\n                                      :item     item\n                                      :co2e     (apply + (map :co2e coll))}))\n                          ;; and calcuate the avoided CO2e in terms of flights (Glasgow -> Berlin, one-way)\n                          ;; 202.5 = average kg of CO2e per flight \n                              (map (fn [{:keys [category item co2e]}]\n                                     {:category category\n                                      :item     item\n                                      :co2e     co2e\n                                      :flights  (int (Math/round (/ co2e 202.5)))}))\n                          ;; for a Vega emoji representation, create a record per flight\n                              (map (fn [{:keys [category item co2e flights]}]\n                                     (repeat flights\n                                             {:co2e          co2e\n                                              :category      category\n                                              :item          item\n                                              :flights-total flights\n                                              :flight        1})))\n                              flatten)]\n    \n    [flights-per-category flights-per-item]))"]}