{"version":3,"sources":["dcs/prototype_6/deriver.cljs"],"mappings":"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","names":["dcs.prototype-6.deriver/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","dcs.prototype-6.state/household-waste-holder","population","dcs.prototype-6.state/population-holder","js/console.log","start-time","dcs.prototype-6.util/now","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","cljs.core/first","household-waste-derivation-generation","cljs.core.map","p__117479","map__117481","cljs.core/--destructure-map","tonnes","household-waste-derivation-management","p__117483","map__117484","management","household-waste-derivation-composition","p__117486","map__117487","material","household-waste-derivation-percent-recycled","household-waste'","p1__117441#","cljs.core.remove","cljs.core._EQ_","regions-and-scotland","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","household-waste-percentage-recycled-scotland","p1__117442#","cljs.core.filter","scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste-percentage-recycled","cljs.core.concat","latest-year","cljs.core.apply","cljs.core/max","household-waste-derivation-generation-positions","p1__117443#","cljs.core/contains?","p1__117444#","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__117446#","p__117494","vec__117495","cljs.core.nth","coll","p1__117452#","cljs.core/PersistentVector","dcs.prototype-6.data-shaping/trend","household-waste-derivation-percent-recycled-positions","p1__117454#","p1__117457#","cljs.core/reverse","p1__117468#","p__117499","vec__117500","p1__117472#","cljs.core/reset!","dcs.prototype-6.state/household-waste-derivation-generation-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-cursor","dcs.prototype-6.state/household-waste-derivation-management-cursor","dcs.prototype-6.state/household-waste-derivation-composition-cursor","dcs.prototype-6.state/household-waste-derivation-generation-positions-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-cursor","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.deriver/maybe-calc-household-co2e-derivations","household-co2e","dcs.prototype-6.state/household-co2e-holder","household-co2e-derivation-generation","p__117508","map__117509","household-co2e-derivation-generation-positions","p1__117503#","p1__117504#","p1__117505#","p__117510","vec__117511","p1__117506#","dcs.prototype-6.state/household-co2e-derivation-generation-cursor","dcs.prototype-6.state/household-co2e-derivation-generation-positions-cursor","dcs.prototype-6.deriver/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__117521","map__117522","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-composition-cursor","dcs.prototype-6.deriver/maybe-calc-waste-site-derivations","waste-site","dcs.prototype-6.state/waste-site-holder","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","dcs.prototype-6.state/waste-site-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-bin-collection-derivations","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","derivation-generation0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","derivation-composition0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","derivation-missed","p__117524","vec__117525","vec__117528","quarter","cljs.core/+","population-max-year","x__4252__auto__","y__4253__auto__","derivation-generation","p__117532","map__117533","derivation-composition","p__117534","map__117536","dcs.prototype-6.state/stirling-bin-collection-derivation-generation-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-composition-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-percent-recycled-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-missed-bins-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-tonnes-derivations","dcs.prototype-6.state/stirling-community-food-tonnes-holder","derivation-tonnes","derivation-flow","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-tonnes-cursor","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-flow-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-footfall-derivations","footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","derivation","dcs.prototype-6.state/stirling-community-food-footfall-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-fairshare-material-derivations","raw","dcs.prototype-6.state/fairshare-material-holder","dcs.prototype-6.state/fairshare-material-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-fairshare-co2e-derivations","dcs.prototype-6.state/fairshare-co2e-holder","dcs.prototype-6.state/fairshare-co2e-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-ace-furniture-counts-derivations","dcs.prototype-6.state/ace-furniture-counts-holder","vec__117538","orig","category-trends","item-trends","dcs.prototype-6.data-shaping/calc-ace-furniture-trends","dcs.prototype-6.state/ace-furniture-counts-derivation-orig-cursor","dcs.prototype-6.state/ace-furniture-counts-derivation-category-trends-cursor","dcs.prototype-6.state/ace-furniture-counts-derivation-item-trends-cursor","dcs.prototype-6.deriver/maybe-calc-ace-furniture-weights-derivations","raw-weights","dcs.prototype-6.state/ace-furniture-weights-holder","furniture-to-waste-streams","dcs.prototype-6.state/ace-furniture-to-waste-streams-holder","co2e-multiplier","dcs.prototype-6.state/co2e-multiplier-holder","vec__117541","flights-per-category","flights-per-item","dcs.prototype-6.data-shaping/calc-ace-furniture-flights-worth","dcs.prototype-6.state/ace-furniture-weights-derivation-orig-cursor","dcs.prototype-6.state/ace-furniture-weights-derivation-flights-per-category-cursor","dcs.prototype-6.state/ace-furniture-weights-derivation-flights-per-item-cursor","dcs.prototype-6.deriver/maybe-calc-household-waste-analysis-derivations","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","household-waste-analysis-derivation","dcs.prototype-6.state/household-waste-analysis-derivation-cursor","cljs.core/add-watch","_key","_atom","_old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.deriver\n  (:require [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping]))\n\n\n(defn maybe-calc-household-waste-derivations \n  []\n  (let [household-waste @state/household-waste-holder\n        population      @state/population-holder]\n\n    (when (and (some? household-waste)\n               (some? population))\n      (js/console.log \"Calculating household-waste-derivations\")\n\n      (let [start-time                                            (util/now)\n\n            ;; Roll-up to get values for (region, year) pairs\n            household-waste-derivation-generation0                (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n            ;; Roll-up to get values for (region, year, management) triples\n            household-waste-derivation-management0                (data-shaping/rollup-household-waste-materials household-waste)\n\n            ;; Roll-up to get values for (region, year, material) triples\n            household-waste-derivation-composition0               (data-shaping/rollup-household-waste-managements household-waste)\n\n            ;; Prep for the per citizen calculation\n            population-for-lookup                                 (group-by (juxt :region :year) population)\n            lookup-population                                     (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n            ;; Calculate the per citizen values\n            household-waste-derivation-generation                 (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                           :year   year\n                                                                                                           :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-generation0)\n            household-waste-derivation-management                 (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                      :year       year\n                                                                                                                      :management management\n                                                                                                                      :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-management0)\n            household-waste-derivation-composition                (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                    :year     year\n                                                                                                                    :material material\n                                                                                                                    :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                       household-waste-derivation-composition0)\n\n            ;; Calculate the percentage recycled values\n            household-waste-derivation-percent-recycled          (let [household-waste' (remove #(= \"Scot gov target\" (:region %)) household-waste) ;; remove the \"Scot gov target\" records that an earlier stage added\n                                                                       regions-and-scotland (data-shaping/calc-household-waste-percentage-recycled household-waste')\n                                                                       household-waste-percentage-recycled-scotland (filter #(= \"Scotland\" (:region %)) regions-and-scotland)\n                                                                       scotGovTarget (data-shaping/calc-scotGovTarget-for-household-waste-percentage-recycled household-waste-percentage-recycled-scotland)]\n                                                                   (concat regions-and-scotland scotGovTarget))\n\n            ;; Calculate positions\n            latest-year                                           (->> household-waste\n                                                                       (map :year)\n                                                                       (apply max))\n            household-waste-derivation-generation-positions       {:latest-positions (->> household-waste-derivation-generation\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (filter #(= latest-year (:year %)))\n                                                                                          (sort-by :tonnes)\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :year     latest-year})))\n                                                                   :trend-positions  (->> household-waste-derivation-generation\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (group-by :region)\n                                                                                          (map (fn [[region coll]] {:region region\n                                                                                                                    :trend  (->> coll\n                                                                                                                                 (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                 data-shaping/trend)}))\n                                                                                          (sort-by :trend)\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :trend    (:trend data-shaping/trend)})))}\n\n            household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (filter #(= latest-year (:year %)))\n                                                                                          (sort-by :percentage)\n                                                                                          reverse\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :year     latest-year})))\n                                                                   :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                          (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                          (group-by :region)\n                                                                                          (map (fn [[region coll]] {:region region\n                                                                                                                    :trend  (->> coll\n                                                                                                                                 (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                 data-shaping/trend)}))\n                                                                                          (sort-by :trend)\n                                                                                          reverse\n                                                                                          (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                   :position (inc ix)\n                                                                                                                   :trend    (:trend data-shaping/trend)})))}]\n\n        (reset! state/household-waste-derivation-generation-cursor household-waste-derivation-generation)\n        (reset! state/household-waste-derivation-percent-recycled-cursor household-waste-derivation-percent-recycled)\n        (reset! state/household-waste-derivation-management-cursor household-waste-derivation-management)\n        (reset! state/household-waste-derivation-composition-cursor household-waste-derivation-composition)\n        (reset! state/household-waste-derivation-generation-positions-cursor household-waste-derivation-generation-positions)\n        (reset! state/household-waste-derivation-percent-recycled-positions-cursor household-waste-derivation-percent-recycled-positions)\n        (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations \n  []\n  (let [household-co2e @state/household-co2e-holder\n        population     @state/population-holder]\n\n    (when (and (some? household-co2e)\n               (some? population))\n      (js/console.log \"Calculating household-co2e-derivations\")\n\n      (let [start-time                                     (util/now)\n\n                       ;; Prep for the per citizen calculation\n            population-for-lookup                          (group-by (juxt :region :year) population)\n            lookup-population                              (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n            household-co2e-derivation-generation           (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                    :year   year\n                                                                                                    :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                household-co2e)\n\n                       ;; Calculate positions\n            latest-year                                    (->> household-co2e\n                                                                (map :year)\n                                                                (apply max))\n            household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                   (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                   (filter #(= latest-year (:year %)))\n                                                                                   (sort-by :tonnes)\n                                                                                   (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                            :position (inc ix)\n                                                                                                            :year     latest-year})))\n                                                            :trend-positions  (->> household-co2e-derivation-generation\n                                                                                   (remove #(contains? #{\"Scotland\" \"Scot gov target\"} (:region %)))\n                                                                                   (group-by :region)\n                                                                                   (map (fn [[region coll]] {:region region\n                                                                                                             :trend  (->> coll\n                                                                                                                          (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                          data-shaping/trend)}))\n                                                                                   (sort-by :trend)\n                                                                                   (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                            :position (inc ix)\n                                                                                                            :trend    (:trend data-shaping/trend)})))}]\n\n        (reset! state/household-co2e-derivation-generation-cursor household-co2e-derivation-generation)\n        (reset! state/household-co2e-derivation-generation-positions-cursor household-co2e-derivation-generation-positions)\n        (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations \n  []\n  (let [business-waste-by-region @state/business-waste-by-region-holder]\n\n    (when (some? business-waste-by-region)\n      (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n      (let [start-time                                      (util/now)\n            \n            region-count                                    (->> business-waste-by-region\n                                                                 (map :region)\n                                                                 distinct\n                                                                 count)\n\n            ;; Roll-up to get values for (region, year) pairs\n            business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n            ;; Scotland (total) -> Scotland average\n            business-waste-by-region-derivation-generation  (map (fn [{:keys [region year tonnes]\n                                                                       :as   original}] (if (contains? #{\"Scotland\" \"Scot gov target\"} region)\n                                                                                          {:region (if (= \"Scotland\" region)\n                                                                                                     \"Scotland average\"\n                                                                                                     \"Scot gov target\")\n                                                                                           :year   year\n                                                                                           :tonnes (double (/ tonnes region-count))}\n                                                                                          original))\n                                                                 business-waste-by-region-derivation-generation0)\n\n            ;; No actual deriving needed for the composition\n            business-waste-by-region-derivation-composition business-waste-by-region]\n\n        (reset! state/business-waste-by-region-derivation-generation-cursor business-waste-by-region-derivation-generation)\n        (reset! state/business-waste-by-region-derivation-composition-cursor business-waste-by-region-derivation-composition)\n        (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-waste-site-derivations \n  []\n  (let [waste-site @state/waste-site-holder]\n\n    (when (some? waste-site)\n      (js/console.log \"Calculating waste-site-derivations\")\n\n      (let [start-time            (util/now)\n\n            waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n        (reset! state/waste-site-derivation-cursor waste-site-derivation)\n        (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-bin-collection-derivations \n  []\n  (let [stirling-bin-collection @state/stirling-bin-collection-holder\n        population              @state/population-holder]\n\n    (when (and (some? stirling-bin-collection)\n               (some? population))\n      (js/console.log \"Calculating stirling-bin-collection-derivations\")\n\n      (let [start-time                  (util/now)\n\n            ;; Roll-up to get values for (region, year, quarter) triples\n            derivation-generation0      (data-shaping/rollup-stirling-bin-collection-ma-re-mi stirling-bin-collection)\n\n            ;; Roll-up to get values for (region, year, quarter, material) quadruples\n            derivation-composition0     (data-shaping/rollup-stirling-bin-collection-re-mi stirling-bin-collection)\n\n            ;; Calculate the percentage recycled values\n            derivation-percent-recycled (data-shaping/calc-stirling-bin-collection-percentage-recycled stirling-bin-collection)\n\n            ;; Filter for missed-bin? then roll-up to get values for (year, quarter) pairs\n            derivation-missed           (->> stirling-bin-collection\n                                             (filter :missed-bin?)\n                                             (group-by (juxt :year :quarter))\n                                             (map (fn [[[year quarter] coll]] {:year    year\n                                                                               :quarter quarter\n                                                                               :tonnes  (->> coll\n                                                                                             (map :tonnes)\n                                                                                             (apply +))})))\n\n            ;; Prep for the per citizen calculation\n            population-max-year         (->> population (map :year) (apply max)) ;; assume all regions have the same max year\n            population-for-lookup       (group-by (juxt :region :year) population)\n            lookup-population           (fn [region year] (-> population-for-lookup\n                                                              (get [region (min year population-max-year)]) ;; use population-max-year to avoid an out-of-bounds\n                                                              first\n                                                              :population))\n\n            ;; Calculate the per citizen values\n            derivation-generation       (map (fn [{:keys [region year quarter tonnes]}] {:region  region\n                                                                                         :year    year\n                                                                                         :quarter quarter\n                                                                                         :tonnes  (double (/ tonnes (lookup-population region year)))})\n                                             derivation-generation0)\n            derivation-composition      (map (fn [{:keys [region year quarter material tonnes]}] {:region   region\n                                                                                                  :year     year\n                                                                                                  :quarter  quarter\n                                                                                                  :material material\n                                                                                                  :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                             derivation-composition0)]\n\n        (reset! state/stirling-bin-collection-derivation-generation-cursor derivation-generation)\n        (reset! state/stirling-bin-collection-derivation-composition-cursor derivation-composition)\n        (reset! state/stirling-bin-collection-derivation-percent-recycled-cursor derivation-percent-recycled)\n        (reset! state/stirling-bin-collection-derivation-missed-bins-cursor derivation-missed)\n        (js/console.log (str \"Calculating stirling-bin-collection-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-tonnes-derivations \n  []\n  (let [tonnes @state/stirling-community-food-tonnes-holder]\n\n    (when (some? tonnes)\n    (js/console.log \"Calculating stirling-community-food-tonnes-derivations\")\n\n    (let [start-time        (util/now)\n\n          derivation-tonnes tonnes\n\n          derivation-flow   (data-shaping/calc-stirling-community-food-flow tonnes)]\n\n      (reset! state/stirling-community-food-tonnes-derivation-tonnes-cursor derivation-tonnes)\n      (reset! state/stirling-community-food-tonnes-derivation-flow-cursor derivation-flow)\n      (js/console.log (str \"Calculating stirling-community-food-tonnes-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-footfall-derivations \n  []\n  (let [footfall @state/stirling-community-food-footfall-holder]\n\n    (when (some? footfall)\n      (js/console.log \"Calculating stirling-community-food-footfall-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation footfall]\n\n        (reset! state/stirling-community-food-footfall-derivation-cursor derivation)\n        (js/console.log (str \"Calculating stirling-community-food-footfall-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-fairshare-material-derivations \n  []\n  (let [raw @state/fairshare-material-holder]\n\n    (when (some? raw)\n      (js/console.log \"Calculating fairshare-material-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation raw]                            ;; no transformation required\n        \n        (reset! state/fairshare-material-derivation-cursor derivation)\n        (js/console.log (str \"Calculating fairshare-material-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-fairshare-co2e-derivations \n  []\n  (let [raw @state/fairshare-co2e-holder]\n\n    (when (some? raw)\n      (js/console.log \"Calculating fairshare-co2e-derivations\")\n\n      (let [start-time (util/now)\n\n            derivation raw]                            ;; no transformation required\n        \n        (reset! state/fairshare-co2e-derivation-cursor derivation)\n        (js/console.log (str \"Calculating fairshare-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-ace-furniture-counts-derivations \n  []\n  (let [raw @state/ace-furniture-counts-holder]\n\n    (when (some? raw)\n      (js/console.log \"Calculating ace-furniture-counts-derivations\")\n\n      (let [start-time                    (util/now)\n\n            orig                          raw                            ;; no transformation required\n            [category-trends item-trends] (data-shaping/calc-ace-furniture-trends raw)]\n\n        (reset! state/ace-furniture-counts-derivation-orig-cursor orig)\n        (reset! state/ace-furniture-counts-derivation-category-trends-cursor category-trends)\n        (reset! state/ace-furniture-counts-derivation-item-trends-cursor item-trends)\n        (js/console.log (str \"Calculating ace-furniture-counts-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-ace-furniture-weights-derivations \n  []\n  (let [raw-weights @state/ace-furniture-weights-holder\n        furniture-to-waste-streams @state/ace-furniture-to-waste-streams-holder\n        co2e-multiplier @state/co2e-multiplier-holder]\n\n    (when (and (some? raw-weights)\n               (some? furniture-to-waste-streams)\n               (some? co2e-multiplier))\n      (js/console.log \"Calculating ace-furniture-weights-derivations\")\n      \n      (let [start-time      (util/now)\n\n            orig raw-weights                      ; no transformation required\n            [flights-per-category flights-per-item] (data-shaping/calc-ace-furniture-flights-worth raw-weights furniture-to-waste-streams co2e-multiplier)]\n        \n        (reset! state/ace-furniture-weights-derivation-orig-cursor orig)\n        (reset! state/ace-furniture-weights-derivation-flights-per-category-cursor flights-per-category)\n        (reset! state/ace-furniture-weights-derivation-flights-per-item-cursor flights-per-item)\n        (js/console.log (str \"Calculating ace-furniture-weights-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-waste-analysis-derivations \n  []\n  (let [household-waste-analysis @state/household-waste-analysis-holder]\n\n    (when (some? household-waste-analysis)\n      (js/console.log \"Calculating household-waste-analysis-derivations\")\n\n      (let [start-time                          (util/now)\n\n            household-waste-analysis-derivation household-waste-analysis]\n\n        (reset! state/household-waste-analysis-derivation-cursor household-waste-analysis-derivation)\n        (js/console.log (str \"Calculating household-waste-analysis-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch state/population-holder :household-waste-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/population-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch state/waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n(add-watch state/stirling-bin-collection-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/stirling-community-food-tonnes-holder :stirling-community-food-tonnes-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-tonnes-derivations))))\n\n(add-watch state/stirling-community-food-footfall-holder :stirling-community-food-footfall-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-footfall-derivations))))\n\n(add-watch state/fairshare-material-holder :fairshare-material-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-fairshare-material-derivations))))\n\n(add-watch state/fairshare-co2e-holder :fairshare-co2e-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-fairshare-co2e-derivations))))\n\n(add-watch state/ace-furniture-counts-holder :ace-furniture-counts-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-counts-derivations))))\n\n(add-watch state/ace-furniture-weights-holder :ace-furniture-weights-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-weights-derivations))))\n\n(add-watch state/ace-furniture-to-waste-streams-holder :ace-furniture-weights-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-ace-furniture-weights-derivations))))\n\n(add-watch state/co2e-multiplier-holder :ace-furniture-weights-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n             (when new-state\n               (maybe-calc-ace-furniture-weights-derivations))))\n\n(add-watch state/household-waste-analysis-holder :household-waste-analysis-derivations-dependency\n           (fn [_key _atom _old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-analysis-derivations))))\n\n\n"]}