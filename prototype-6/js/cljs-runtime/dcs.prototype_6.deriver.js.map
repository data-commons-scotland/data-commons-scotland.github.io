{"version":3,"sources":["dcs/prototype_6/deriver.cljs"],"mappings":"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","names":["dcs.prototype-6.deriver/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","dcs.prototype-6.state/household-waste-holder","population","dcs.prototype-6.state/population-holder","js/console.log","start-time","dcs.prototype-6.util/now","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","cljs.core/first","household-waste-derivation-generation","cljs.core.map","p__29123","map__29124","cljs.core/--destructure-map","tonnes","household-waste-derivation-management","p__29125","map__29126","management","household-waste-derivation-composition","p__29127","map__29128","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core.apply","cljs.core/max","household-waste-derivation-generation-positions","p1__29116#","cljs.core.remove","cljs.core._EQ_","p1__29117#","cljs.core.filter","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__29118#","p__29129","vec__29130","cljs.core.nth","coll","p1__29119#","cljs.core/PersistentVector","dcs.prototype-6.data-shaping/trend","household-waste-derivation-percent-recycled-positions","p1__29120#","p1__29121#","cljs.core/reverse","p__29133","vec__29134","p1__29122#","cljs.core/reset!","dcs.prototype-6.state/household-waste-derivation-generation-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-cursor","dcs.prototype-6.state/household-waste-derivation-management-cursor","dcs.prototype-6.state/household-waste-derivation-composition-cursor","dcs.prototype-6.state/household-waste-derivation-generation-positions-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-cursor","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.deriver/maybe-calc-household-co2e-derivations","household-co2e","dcs.prototype-6.state/household-co2e-holder","household-co2e-derivation-generation","p__29141","map__29142","household-co2e-derivation-generation-positions","p1__29137#","p1__29138#","p1__29139#","p__29143","vec__29144","p1__29140#","dcs.prototype-6.state/household-co2e-derivation-generation-cursor","dcs.prototype-6.state/household-co2e-derivation-generation-positions-cursor","dcs.prototype-6.deriver/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__29147","map__29148","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-composition-cursor","dcs.prototype-6.deriver/maybe-calc-waste-site-derivations","waste-site","dcs.prototype-6.state/waste-site-holder","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","dcs.prototype-6.state/waste-site-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-bin-collection-derivations","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","derivation-generation0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","derivation-composition0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","derivation-missed","p__29149","vec__29150","vec__29153","quarter","cljs.core/+","population-max-year","x__4252__auto__","y__4253__auto__","derivation-generation","p__29157","map__29158","derivation-composition","p__29159","map__29160","dcs.prototype-6.state/stirling-bin-collection-derivation-generation-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-composition-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-percent-recycled-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-missed-bins-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-tonnes-derivations","dcs.prototype-6.state/stirling-community-food-tonnes-holder","derivation-tonnes","derivation-flow","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-tonnes-cursor","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-flow-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-footfall-derivations","footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","derivation","dcs.prototype-6.state/stirling-community-food-footfall-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-fairshare-material-derivations","raw","dcs.prototype-6.state/fairshare-material-holder","dcs.prototype-6.state/fairshare-material-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-fairshare-co2e-derivations","dcs.prototype-6.state/fairshare-co2e-holder","dcs.prototype-6.state/fairshare-co2e-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-ace-furniture-counts-derivations","dcs.prototype-6.state/ace-furniture-counts-holder","vec__29163","orig","category-trends","item-trends","dcs.prototype-6.data-shaping/calc-ace-furniture-trends","dcs.prototype-6.state/ace-furniture-counts-derivation-orig-cursor","dcs.prototype-6.state/ace-furniture-counts-derivation-category-trends-cursor","dcs.prototype-6.state/ace-furniture-counts-derivation-item-trends-cursor","dcs.prototype-6.deriver/maybe-calc-ace-furniture-weights-derivations","dcs.prototype-6.state/ace-furniture-weights-holder","dcs.prototype-6.state/ace-furniture-weights-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-household-waste-analysis-derivations","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","household-waste-analysis-derivation","dcs.prototype-6.state/household-waste-analysis-derivation-cursor","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.deriver\n  (:require [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping]))\n\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @state/household-waste-holder\n            population @state/population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"Calculating household-waste-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-generation-positions {:latest-positions (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (filter #(= latest-year (:year %)))\n                                                                                               (sort-by :tonnes)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :year     latest-year})))\n                                                                        :trend-positions  (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (group-by :region)\n                                                                                               (map (fn [[region coll]] {:region region\n                                                                                                                         :trend  (->> coll\n                                                                                                                                      (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                      data-shaping/trend)}))\n                                                                                               (sort-by :trend)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :trend    (:trend data-shaping/trend)})))}\n\n                       household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                                     (remove #(= \"Scotland\" (:region %)))\n                                                                                                     (filter #(= latest-year (:year %)))\n                                                                                                     (sort-by :percentage)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :year     latest-year})))\n                                                                              :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                                     (group-by :region)\n                                                                                                     (map (fn [[region coll]] {:region region\n                                                                                                                               :trend  (->> coll\n                                                                                                                                            (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                            data-shaping/trend)}))\n                                                                                                     (sort-by :trend)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :trend    (:trend data-shaping/trend)})))}]\n\n                      (reset! state/household-waste-derivation-generation-cursor household-waste-derivation-generation)\n                      (reset! state/household-waste-derivation-percent-recycled-cursor household-waste-derivation-percent-recycled)\n                      (reset! state/household-waste-derivation-management-cursor household-waste-derivation-management)\n                      (reset! state/household-waste-derivation-composition-cursor household-waste-derivation-composition)\n                      (reset! state/household-waste-derivation-generation-positions-cursor household-waste-derivation-generation-positions)\n                      (reset! state/household-waste-derivation-percent-recycled-positions-cursor household-waste-derivation-percent-recycled-positions)\n                      (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @state/household-co2e-holder\n            population @state/population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"Calculating household-co2e-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                     :year   year\n                                                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                 household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (filter #(= latest-year (:year %)))\n                                                                                              (sort-by :tonnes)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :year     latest-year})))\n                                                                       :trend-positions  (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (group-by :region)\n                                                                                              (map (fn [[region coll]] {:region region\n                                                                                                                        :trend  (->> coll\n                                                                                                                                     (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                     data-shaping/trend)}))\n                                                                                              (sort-by :trend)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :trend    (:trend data-shaping/trend)})))}]\n\n                      (reset! state/household-co2e-derivation-generation-cursor household-co2e-derivation-generation)\n                      (reset! state/household-co2e-derivation-generation-positions-cursor household-co2e-derivation-generation-positions)\n                      (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @state/business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n           (let [start-time (util/now)\n\n                 region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! state/business-waste-by-region-derivation-generation-cursor business-waste-by-region-derivation-generation)\n                (reset! state/business-waste-by-region-derivation-composition-cursor business-waste-by-region-derivation-composition)\n                (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-waste-site-derivations []\n      (let [waste-site @state/waste-site-holder]\n\n           (when (some? waste-site))\n           (js/console.log \"Calculating waste-site-derivations\")\n\n           (let [start-time (util/now)\n\n                 waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n                (reset! state/waste-site-derivation-cursor waste-site-derivation)\n                (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-stirling-bin-collection-derivations []\n      (let [stirling-bin-collection @state/stirling-bin-collection-holder\n            population @state/population-holder]\n\n           (when (and (some? stirling-bin-collection)\n                      (some? population))\n                 (js/console.log \"Calculating stirling-bin-collection-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year, quarter) triples\n                       derivation-generation0 (data-shaping/rollup-stirling-bin-collection-ma-re-mi stirling-bin-collection)\n\n                       ;; Roll-up to get values for (region, year, quarter, material) quadruples\n                       derivation-composition0 (data-shaping/rollup-stirling-bin-collection-re-mi stirling-bin-collection)\n\n                       ;; Calculate the percentage recycled values\n                       derivation-percent-recycled (data-shaping/calc-stirling-bin-collection-percentage-recycled stirling-bin-collection)\n\n                       ;; Filter for missed-bin? then roll-up to get values for (year, quarter) pairs\n                       derivation-missed (->> stirling-bin-collection\n                                              (filter :missed-bin?)\n                                              (group-by (juxt :year :quarter))\n                                              (map (fn [[[year quarter] coll]] {:year    year\n                                                                                :quarter quarter\n                                                                                :tonnes  (->> coll\n                                                                                              (map :tonnes)\n                                                                                              (apply +))})))\n\n                       ;; Prep for the per citizen calculation\n                       population-max-year (->> population (map :year) (apply max)) ;; assume all regions have the same max year\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup\n                                                               (get [region (min year population-max-year)]) ;; use population-max-year to avoid an out-of-bounds\n                                                               first\n                                                               :population))\n\n                       ;; Calculate the per citizen values\n                       derivation-generation (map (fn [{:keys [region year quarter tonnes]}] {:region  region\n                                                                                              :year    year\n                                                                                              :quarter quarter\n                                                                                              :tonnes  (double (/ tonnes (lookup-population region year)))})\n                                                  derivation-generation0)\n                       derivation-composition (map (fn [{:keys [region year quarter material tonnes]}] {:region   region\n                                                                                                        :year     year\n                                                                                                        :quarter  quarter\n                                                                                                        :material material\n                                                                                                        :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                   derivation-composition0)]\n\n                      (reset! state/stirling-bin-collection-derivation-generation-cursor derivation-generation)\n                      (reset! state/stirling-bin-collection-derivation-composition-cursor derivation-composition)\n                      (reset! state/stirling-bin-collection-derivation-percent-recycled-cursor derivation-percent-recycled)\n                      (reset! state/stirling-bin-collection-derivation-missed-bins-cursor derivation-missed)\n                      (js/console.log (str \"Calculating stirling-bin-collection-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-tonnes-derivations []\n      (let [tonnes @state/stirling-community-food-tonnes-holder]\n\n           (when (some? tonnes))\n           (js/console.log \"Calculating stirling-community-food-tonnes-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation-tonnes tonnes\n\n                 derivation-flow (data-shaping/calc-stirling-community-food-flow tonnes)]\n\n                (reset! state/stirling-community-food-tonnes-derivation-tonnes-cursor derivation-tonnes)\n                (reset! state/stirling-community-food-tonnes-derivation-flow-cursor derivation-flow)\n                (js/console.log (str \"Calculating stirling-community-food-tonnes-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-stirling-community-food-footfall-derivations []\n      (let [footfall @state/stirling-community-food-footfall-holder]\n\n           (when (some? footfall))\n           (js/console.log \"Calculating stirling-community-food-footfall-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation footfall]\n\n                (reset! state/stirling-community-food-footfall-derivation-cursor derivation)\n                (js/console.log (str \"Calculating stirling-community-food-footfall-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-fairshare-material-derivations []\n      (let [raw @state/fairshare-material-holder]\n\n           (when (some? raw))\n           (js/console.log \"Calculating fairshare-material-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation raw]                            ;; no transformation required\n\n                (reset! state/fairshare-material-derivation-cursor derivation)\n                (js/console.log (str \"Calculating fairshare-material-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-fairshare-co2e-derivations []\n      (let [raw @state/fairshare-co2e-holder]\n\n           (when (some? raw))\n           (js/console.log \"Calculating fairshare-co2e-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation raw]                            ;; no transformation required\n\n                (reset! state/fairshare-co2e-derivation-cursor derivation)\n                (js/console.log (str \"Calculating fairshare-co2e-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-ace-furniture-counts-derivations []\n      (let [raw @state/ace-furniture-counts-holder]\n\n           (when (some? raw))\n           (js/console.log \"Calculating ace-furniture-counts-derivations\")\n\n           (let [start-time (util/now)\n\n                 orig raw                            ;; no transformation required\n                 [category-trends item-trends] (data-shaping/calc-ace-furniture-trends raw)]\n\n                (reset! state/ace-furniture-counts-derivation-orig-cursor orig)\n                (reset! state/ace-furniture-counts-derivation-category-trends-cursor category-trends)\n                (reset! state/ace-furniture-counts-derivation-item-trends-cursor item-trends)\n                (js/console.log (str \"Calculating ace-furniture-counts-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-ace-furniture-weights-derivations []\n      (let [raw @state/ace-furniture-weights-holder]\n\n           (when (some? raw))\n           (js/console.log \"Calculating ace-furniture-weights-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation raw]                            ;; no transformation required\n\n                (reset! state/ace-furniture-weights-derivation-cursor derivation)\n                (js/console.log (str \"Calculating ace-furniture-weights-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-household-waste-analysis-derivations []\n      (let [household-waste-analysis @state/household-waste-analysis-holder]\n\n           (when (some? household-waste-analysis))\n           (js/console.log \"Calculating household-waste-analysis-derivations\")\n\n           (let [start-time (util/now)\n\n                 household-waste-analysis-derivation household-waste-analysis]\n\n                (reset! state/household-waste-analysis-derivation-cursor household-waste-analysis-derivation)\n                (js/console.log (str \"Calculating household-waste-analysis-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch state/population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/population-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch state/waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n(add-watch state/stirling-bin-collection-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/stirling-community-food-tonnes-holder :stirling-community-food-tonnes-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-tonnes-derivations))))\n\n(add-watch state/stirling-community-food-footfall-holder :stirling-community-food-footfall-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-footfall-derivations))))\n\n(add-watch state/fairshare-material-holder :fairshare-material-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-fairshare-material-derivations))))\n\n(add-watch state/fairshare-co2e-holder :fairshare-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-fairshare-co2e-derivations))))\n\n(add-watch state/ace-furniture-counts-holder :ace-furniture-counts-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-counts-derivations))))\n\n(add-watch state/ace-furniture-weights-holder :ace-furniture-weights-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-ace-furniture-weights-derivations))))\n\n(add-watch state/household-waste-analysis-holder :household-waste-analysis-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-analysis-derivations))))\n\n\n"]}