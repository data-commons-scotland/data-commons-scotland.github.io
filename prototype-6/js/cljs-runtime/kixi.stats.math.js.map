{"version":3,"sources":["kixi/stats/math.cljc"],"mappings":"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","names":["kixi.stats.math/PI","js/Math.PI","kixi.stats.math/abs","x","G__35786","kixi.stats.math/sqrt","js/Math.sqrt","kixi.stats.math/sq","kixi.stats.math/pow","n","js/Math.pow","kixi.stats.math/root","kixi.stats.math/log","js/Math.log","kixi.stats.math/log1p","kixi.stats.math/exp","js/Math.exp","kixi.stats.math/cos","js/Math.cos","kixi.stats.math/clamp","lower","upper","x__4252__auto__","y__4253__auto__","x__4249__auto__","y__4250__auto__","kixi.stats.math/sin","js/Math.sin","kixi.stats.math/tan","js/Math.tan","kixi.stats.math/atan","js/Math.atan","kixi.stats.math/ceil","js/Math.ceil","kixi.stats.math/floor","js/Math.floor","kixi.stats.math/equal","y","e","kixi.stats.math/infinity","js/Infinity","kixi.stats.math/negative-infinity","js/-Infinity","kixi.stats.math/infinite?","cljs.core/not","js/isFinite","kixi.stats.math/SQRT_2_PI","kixi.stats.math/HALF_LOG_2_PI","kixi.stats.math/LANCZOS","kixi.stats.math/A","kixi.stats.math/B","kixi.stats.math/P","kixi.stats.math/Q","kixi.stats.math/C","kixi.stats.math/CA","kixi.stats.math/CB","kixi.stats.math/LANCZOS_G","kixi.stats.math/lanczos-approximation","cljs.core.reduce","p__35836","vec__35837","cljs.core.nth","sum","i","l","kixi.stats.math/inv-gamma-1pm1","t","vec__35862","a0","a1","b","b'","c","c'","p","p'","q","q'","kixi.stats.math/log-gamma-1p","kixi.stats.math/log-gamma","kixi.stats.math/gamma","abs-x","abs-g","kixi.stats.math/lower-regularized-gamma","a","max-iter","ap","del","d","h","an","kixi.stats.math/gamma-pinv","gln","lna1","afac","EPS","pp","j","err","u","cljs.core._EQ_","kixi.stats.math/log-beta","kixi.stats.math/beta","kixi.stats.math/betacf","fpmin","check","qab","qap","qam","m","m2","aa","kixi.stats.math/ibeta","bt","kixi.stats.math/ibetainv","eps","b1","al","w","lna","lnb","kixi.stats.math/erf","vec__35886","x'","ty","dd","p__35889","vec__35890","cof","cljs.core/PersistentVector","res","kixi.stats.math/erfc","kixi.stats.math/erfcinv"],"sourcesContent":["(ns kixi.stats.math\n  (:refer-clojure :exclude [infinite?]))\n\n(def PI\n  #?(:clj Math/PI\n     :cljs js/Math.PI))\n\n(defn abs [x]\n  (cond-> x\n    (< x 0) -))\n\n(defn sqrt [x]\n  #?(:clj  (Math/sqrt x)\n     :cljs (js/Math.sqrt x)))\n\n(defn sq [x]\n  (* x x))\n\n(defn pow [x n]\n  #?(:clj  (Math/pow x n)\n     :cljs (js/Math.pow x n)))\n\n(defn root [x n]\n  (pow x (/ 1 n)))\n\n(defn log [x]\n  #?(:clj  (Math/log x)\n     :cljs (js/Math.log x)))\n\n(defn log1p [x]\n  #?(:clj  (Math/log1p x)\n     :cljs (js/Math.log (inc x))))\n\n(defn exp [x]\n  #?(:clj  (Math/exp x)\n     :cljs (js/Math.exp x)))\n\n(defn cos [x]\n  #?(:clj  (Math/cos x)\n     :cljs (js/Math.cos x)))\n\n(defn clamp [x lower upper]\n  (min (max x lower) upper))\n\n(defn sin [x]\n  #?(:clj  (Math/sin x)\n     :cljs (js/Math.sin x)))\n\n(defn tan [x]\n  #?(:clj  (Math/tan x)\n     :cljs (js/Math.tan x)))\n\n(defn atan [x]\n  #?(:clj  (Math/atan x)\n     :cljs (js/Math.atan x)))\n\n(defn ceil [x]\n  #?(:clj  (Math/ceil x)\n     :cljs (js/Math.ceil x)))\n\n(defn floor [x]\n  #?(:clj  (Math/floor x)\n     :cljs (js/Math.floor x)))\n\n(defn equal [x y e]\n  (<= (abs (- y x)) e))\n\n(def infinity\n  #?(:clj Double/POSITIVE_INFINITY\n     :cljs js/Infinity))\n\n(def negative-infinity\n  #?(:clj Double/NEGATIVE_INFINITY\n     :cljs js/-Infinity))\n\n(defn infinite? [x]\n  #?(:clj (Double/isInfinite x)\n     :cljs (not (js/isFinite x))))\n\n;;;; Gamma\n\n(def ^:no-doc SQRT_2_PI 2.506628274631000502)\n\n(def ^:no-doc HALF_LOG_2_PI (* 0.5 (log (* 2.0 PI))))\n\n(def ^:no-doc LANCZOS\n  [[14 3.6899182659531625E-6] [13 -2.6190838401581408E-5]\n   [12 8.441822398385275E-5] [11 -1.643181065367639E-4]\n   [10 2.1743961811521265E-4] [9 -2.1026444172410488E-4]\n   [8 1.580887032249125E-4] [7 -9.837447530487956E-5]\n   [6 4.652362892704858E-5] [5 3.399464998481189E-5]\n   [4 -0.4919138160976202] [3 14.136097974741746]\n   [2 -59.59796035547549] [1 57.15623566586292]])\n\n(def ^:no-doc A\n  [0.611609510448141581788E-08 0.624730830116465516210E-08])\n\n(def ^:no-doc B\n  [0.195755836614639731882E-09 -0.607761895722825260739E-07\n   0.992641840672773722196E-06 -0.643045481779353022248E-05\n   -0.851419432440314906588E-05 0.493944979382446875238E-03\n   0.266205348428949217746E-01 0.203610414066806987300E+00])\n\n(def ^:no-doc P\n  [4.343529937408594E-15 -1.2494415722763663E-13 1.5728330277104463E-12\n   4.686843322948848E-11 6.820161668496171E-10 6.8716741130671986E-9\n   6.116095104481416E-9])\n\n(def ^:no-doc Q\n  [2.6923694661863613E-4 0.004956830093825887 0.054642130860422966\n   0.3056961078365221])\n\n(def ^:no-doc C\n  [-0.205633841697760710345015413002057E-06 0.113302723198169588237412962033074E-05\n   -0.125049348214267065734535947383309E-05 -0.201348547807882386556893914210218E-04\n   0.128050282388116186153198626328164E-03 -0.215241674114950972815729963053648E-03\n   -0.116516759185906511211397108401839E-02 0.721894324666309954239501034044657E-02\n   -0.962197152787697356211492167234820E-02 -0.421977345555443367482083012891874E-01\n   0.166538611382291489501700795102105E+00 -0.420026350340952355290039348754298E-01\n   -0.655878071520253881077019515145390E+00])\n\n(def ^:no-doc CA\n  -0.422784335098467139393487909917598E+00)\n\n(def ^:no-doc CB\n  0.577215664901532860606512090082402E+00)\n\n(def LANCZOS_G\n  \"The Lanczos constant\"\n  (/ 607 128))\n\n(defn lanczos-approximation\n  \"Computes the Lanczos approximation to the Gamma function\"\n  [x]\n  (+ (reduce (fn [sum [i l]] (+ sum (/ l (+ x i)))) 0.0 LANCZOS)\n     0.9999999999999971))\n\n(defn inv-gamma-1pm1\n  \"Computes the function `(dec (/ 1 (gamma (inc x))))`\n  for -0.5 <= x <= 0.5\"\n  [x]\n  (let [t (if (<= x 0.5) x (- (- x 0.5) 0.5))]\n    (if (< t 0)\n      (let [[a0 a1] A\n            b (inc (* t (reduce (fn [b b'] (+ (* t b) b')) B)))\n            c (+ CA (* t (reduce (fn [c c'] (+ (* t c) c')) (/ (+ a0 (* a1 t)) b) C)))]\n        (if (> x 0.5)\n          (* t (/ c x))\n          (* x (inc c))))\n      (let [p (reduce (fn [p p'] (+ (* t p) p')) P)\n            q (inc (* t (reduce (fn [q q'] (+ (* t q) q')) Q)))\n            c (+ CB (* t (reduce (fn [c c'] (+ (* t c) c')) (/ p q) C)))]\n        (if (> x 0.5)\n          (* (/ t x) (dec c))\n          (* x c))))))\n\n(defn log-gamma-1p\n  \"Computes the function `(ln (gamma (inc x)))`\n  for -0.5 <= x <= 0.5\"\n  [x]\n  (- (log1p (inv-gamma-1pm1 x))))\n\n(defn log-gamma\n  \"Computes the value of ln(\u0393x)\"\n  [x]\n  (cond\n    (< x 0.5) (- (log-gamma-1p x) (log x))\n    (<= x 2.5) (log-gamma-1p (dec x))\n    (<= x 8.0) (let [n (int (floor (- x 1.5)))]\n                 (+ (log-gamma-1p (- x (inc n)))\n                    (loop [i 1\n                           p 1.0]\n                      (if (<= i n)\n                        (recur (inc i) (* p (- x i)))\n                        (log p)))))\n    :else (let [t (+ x LANCZOS_G 0.5)]\n            (+ (- (* (+ x 0.5) (log t)) t)\n               HALF_LOG_2_PI\n               (log (/ (lanczos-approximation x) x))))))\n\n(defn gamma\n  \"Computes the value of \u0393x\"\n  [x]\n  (let [abs-x (abs x)]\n    (if (<= abs-x 20)\n      (if (>= x 1)\n        (loop [t (dec x) p 1]\n          (if (> t 1.5)\n            (recur (dec t) (* p t))\n            (/ p (inc (inv-gamma-1pm1 t)))))\n        (loop [t (inc x) p x]\n          (if (< t 0.5)\n            (recur (inc t) (* p t))\n            (/ 1 (* p (inc (inv-gamma-1pm1 (dec t))))))))\n      (let [y (+ abs-x LANCZOS_G 0.5)\n            abs-g (* (/ SQRT_2_PI abs-x)\n                     (pow y (+ abs-x 0.5))\n                     (exp (- y))\n                     (lanczos-approximation abs-x))]\n        (if (pos? x)\n          abs-g\n          (/ (- PI)\n             (* x abs-g (sin (* PI x)))))))))\n\n(defn lower-regularized-gamma\n  \"Computes the lower regularized incomplete gamma function P(a,x)\"\n  [a x]\n  (when (and (>= x 0) (> a 0))\n    (let [max-iter (-> (+ (* (log (if (>= a 1) a (/ 1 a))) 8.5)\n                          (* 0.4 a)\n                          17)\n                       inc\n                       floor\n                       int)]\n      (if (< x (inc a))\n        (loop [i 1\n               ap a\n               del (double (/ 1 ap))\n               sum (double (/ 1 ap))]\n          (if (< i max-iter)\n            (let [ap (inc ap)\n                  del (* del (/ x ap))]\n              (recur (inc i) ap del (+ sum del)))\n            (* sum (exp (- (* a (log x)) x (log-gamma a))))))\n        (loop [i 1\n               b (double (- (inc x) a))\n               c (double (/ 1 1e-30))\n               d (double (/ 1 b))\n               h (double (/ 1 b))]\n          (let [an (* (- i) (- i a))\n                b (+ b 2)\n                d (+ (* an d) b)\n                c (+ b (/ an c))\n                d (/ 1 d)\n                h (* h d c)]\n            (if (< i max-iter)\n              (recur (inc i) b c d h)\n              (- 1 (* h (exp (- (* a (log x)) x (log-gamma a))))))))))))\n\n(defn gamma-pinv\n  \"Returns the inverse of the lower regularized incomplete gamma function\"\n  [p a]\n  (cond\n    (>= p 1.0) (max 100.0 (+ a (* 100.0 (sqrt a))))\n    (<= p 0.0) 0.0\n    :else\n    (let [gln (log-gamma a)\n          a1 (dec a)\n          lna1 (log a1)\n          afac (exp (- (* a1 (dec lna1)) gln))\n          EPS 1e-8\n          x (if (> a 1)\n              (let [pp (if (< p 0.5) p (- 1 p))\n                    t (sqrt (* -2 (log pp)))\n                    x (- (/ (+ 2.30753 (* 0.27061 t)) (+ 1 (* t (+ 0.99229 (* 0.04481 t))))) t)\n                    x (if (< p 0.5) (- x) x)]\n                (max 1e-3 (* a (pow (- 1 (/ 1 (* 9 a)) (/ x (* 3 (sqrt a)))) 3))))\n              (let [t (- 1 (* a (+ 0.253 (* 0.12 a))))]\n                (if (< p t)\n                  (pow (/ p t) (/ 1 a))\n                  (- 1 (log (- 1 (/ (- p t) (- 1 t))))))))]\n      (loop [j 0 x x]\n        (if (<= x 0.0)\n          0.0\n          (let [err (- (lower-regularized-gamma a x) p)\n                t (if (> a 1)\n                    (* afac (exp (- (* a1 (- (log x) lna1)) (- x a1))))\n                    (exp (- (* a1 (log x)) gln x)))\n                u (/ err t)\n                t (/ u (- 1 (* 0.5 (min 1 (* u (dec (/ (dec a) x)))))))\n                x (- x t)\n                x (if (<= x 0) (* 0.5 (+ x t)) x)]\n            (if (or (< (abs t) (* EPS x)) (= j 11))\n              x\n              (recur (inc j) x))))))))\n\n(defn log-beta\n  \"Computes the log of the beta function\"\n  [a b]\n  (- (+ (log-gamma a) (log-gamma b)) (log-gamma (+ a b))))\n\n(defn beta\n  \"Computes the beta function\"\n  [a b]\n  (when (and (pos? a) (pos? b))\n    (if (> (+ a b) 170)\n      (exp (log-beta a b))\n      (/ (* (gamma a) (gamma b))\n         (gamma (+ a b))))))\n\n(defn betacf\n  \"Evaluates the continued fraction for the incomplete beta function.\n  Modified Lentz's method\"\n  [x a b]\n  (let [fpmin 1e-30\n        check (fn [x] (if (< (abs x) fpmin) fpmin x))\n        qab (+ a b)\n        qap (inc a)\n        qam (dec a)\n        d (/ 1 (check (- 1 (/ (* x qab) qap))))]\n    (loop [m 1\n           h d\n           c 1\n           d d]\n      (let [m2 (* 2 m)\n            aa (* m (- b m) (/ x (* (+ qam m2) (+ a m2))))\n            d (/ 1 (check (+ 1 (* aa d))))\n            c (check (+ 1 (/ aa c)))\n            h (* h d c)\n            aa (* (- (+ a m)) (+ qab m) (/ x (* (+ a m2) (+ qap m2))))\n            d (/ 1 (check (+ 1 (* aa d))))\n            c (check (+ 1 (/ aa c)))\n            del (* d c)\n            h (* h del)]\n        (if (or (< (abs del) 3e-7)\n                (>= m 100))\n          h\n          (recur (inc m) h c d))))))\n\n(defn ibeta\n  \"Returns the incomplete beta function I_x(a,b)\"\n  [x a b]\n  (when (<= 0 x 1)\n    (let [bt (if (or (== x 0)\n                     (== x 1))\n               0\n               (exp (+ (- (log-gamma (+ a b))\n                          (log-gamma a)\n                          (log-gamma b))\n                       (* a (log x))\n                       (* b (log (- 1 x))))))]\n      (if (< x (/ (inc a) (+ a b 2)))\n        (* bt (/ (betacf x a b) a))\n        (- 1 (* bt (/ (betacf (- 1 x) b a) b)))))))\n\n(defn ibetainv\n  \"Returns the inverse of the incomplete beta function\"\n  [p a b]\n  (cond\n    (<= p 0) 0.0\n    (>= p 1) 1.0\n    :else\n    (let [eps 1e-8\n          a1 (dec a)\n          b1 (dec b)\n          x (if (and (>= a 1)\n                     (>= b 1))\n              (let [pp (if (< p 0.5) p (- 1 p))\n                    t (sqrt (* -2 (log pp)))\n                    x (- (/ (+ 2.30753 (* t 0.27061))\n                            (inc (* t (+ 0.99229\n                                         (* t 0.04481))))) t)\n                    x (if (< p 0.5) (- x) x)\n                    al (/ (- (sq x) 3) 6)\n                    h (/ 2 (+ (/ 1 (dec (* 2 a)))\n                              (/ 1 (dec (* 2 b)))))\n                    w (- (/ (* x (sqrt (+ al h))) h)\n                         (* (- (/ 1 (dec (* 2 b)))\n                               (/ 1 (dec (* 2 a))))\n                            (+ al (/ 5 6) (/ -2 (* 3 h)))))]\n                (/ a (+ a (* b (exp (* 2 w))))))\n              (let [lna (log (/ a (+ a b)))\n                    lnb (log (/ b (+ a b)))\n                    t (/ (exp (* a lna)) a)\n                    u (/ (exp (* b lnb)) b)\n                    w (+ t u)]\n                (if (< p (/ t w))\n                  (pow (* a w p) (/ 1 a))\n                  (- 1 (pow (* b w (- 1 p)) (/ 1 b))))))\n          afac (- (log-gamma (+ a b))\n                  (log-gamma a)\n                  (log-gamma b))]\n      (loop [j 0\n             x x]\n        (if (or (== x 0)\n                (== x 1)\n                (>= j 10))\n          x\n          (let [err (- (ibeta x a b) p)\n                t (exp (+ (* a1 (log x))\n                          (* b1 (log (- 1 x)))\n                          afac))\n                u (/ err t)\n                t (/ u (- 1 (* 0.5 (min 1 (* u (- (/ a1 x)\n                                                  (/ b1 (- 1 x))))))))\n                x (- x t)\n                x (cond\n                    (<= x 0)\n                    (* 0.5 (+ x t))\n                    (>= x 1)\n                    (* 0.5 (+ x t 1))\n                    :else x)]\n            (if (and (> j 0)\n                     (< (abs t) (* eps x)))\n              x\n              (recur (inc j) x))))))))\n\n(defn erf\n  \"Computes the error function\"\n  [x]\n  (let [x' (abs x)\n        t (/ 2 (+ x' 2))\n        ty (- (* 4 t) 2)\n        [d dd] (reduce (fn [[d dd] cof]\n                         (vector (+ (- (* ty d) dd) cof) d))\n                       [0 0]\n                       [-2.8E-17 1.21E-16 -9.4E-17 -1.523E-15 7.106E-15 3.81E-16\n                        -1.12708E-13 3.13092E-13 8.94487E-13 -6.886027E-12 2.394038E-12\n                        9.6467911E-11 -2.27365122E-10 -9.91364156E-10 5.059343495E-9\n                        6.529054439E-9 -8.5238095915E-8 1.5626441722E-8 1.30365583558E-6\n                        -1.624290004647E-6 -2.0278578112534E-5 4.2523324806907E-5\n                        3.66839497852761E-4 -9.46595344482036E-4 -0.00956151478680863\n                        0.019476473204185836 0.6419697923564902])\n        cof -1.3026537197817094\n        res (* t (exp (+ (* (- x') x') (* 0.5 (+ (* ty d) cof)) (- dd))))]\n    (if (neg? x)\n      (- res 1)\n      (- 1 res))))\n\n(defn erfc\n  \"Computes the complementary error function\"\n  [x]\n  (- 1 (erf x)))\n\n(defn erfcinv\n  \"Computes the inverse of the complementary error function\"\n  [p]\n  (cond (>= p 2) -100\n        (<= p 0) 100\n        :else (let [pp (if (< p 1) p (- 2 p))\n                    t (sqrt (* -2 (log (* pp 0.5))))\n                    x (* -0.70711\n                         (- (/ (+ (* 0.27061 t) 2.30753)\n                               (+ 1 (* t (+ (* 0.04481 t) 0.99229))))\n                            t))\n                    x (loop [j 0 x x]\n                        (if (< j 2)\n                          (let [err (- (erfc x) pp)]\n                            (recur (inc j)\n                                   (+ x (/ err (- (* 1.12837916709551257 (exp (* (- x) x)))\n                                                  (* x err))))))\n                          x))]\n                (if (< p 1)\n                  x (- x)))))\n"]}