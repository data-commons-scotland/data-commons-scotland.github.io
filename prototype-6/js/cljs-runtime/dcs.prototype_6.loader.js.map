{"version":3,"sources":["dcs/prototype_6/loader.cljs"],"mappings":"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","names":["dcs.prototype-6.loader/fetch","url","body-handler","js/console.log","c__29109__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29110__auto__","switch__29024__auto__","state_34177","state_val_34179","inst_34150","inst_34152","inst_34153","inst_34154","cljs.core/PersistentHashMap","inst_34155","statearr-34181","cljs.core.async.impl.ioc-helpers/take!","inst_34163","inst_34157","inst_34158","inst_34159","inst_34160","inst_34161","inst_34162","inst_34165","statearr-34186","statearr-34187","statearr-34188","inst_34168","inst_34169","statearr-34189","statearr-34191","inst_34172","inst_34173","cljs.core.async.impl.ioc-helpers/return-chan","statearr-34195","state-machine__29025__auto__","ret-value__29026__auto__","result__29027__auto__","cljs.core/keyword-identical?","ex__29028__auto__","e34198","statearr-34200","cljs.core/seq","statearr-34202","cljs.core/first","state__29111__auto__","statearr-34203","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","dcs.prototype-6.util/now","cljs_http.client.get","dcs.prototype-6.util/secs-to-now","cljs.core.js__GT_clj","js/JSON","dcs.prototype-6.loader/load-data","stirling-community-food-tonnes","cljs.core/reset!","dcs.prototype-6.state/stirling-community-food-tonnes-holder","stirling-community-food-footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","fairshare-material","dcs.prototype-6.state/fairshare-material-holder","fairshare-co2e","dcs.prototype-6.state/fairshare-co2e-holder","ace-furniture-counts","dcs.prototype-6.state/ace-furniture-counts-holder","ace-furniture-weights","dcs.prototype-6.state/ace-furniture-weights-holder","ace-furniture-to-waste-streams","dcs.prototype-6.state/ace-furniture-to-waste-streams-holder","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","geojson","cljs.core/clj->js","dcs.prototype-6.state/geojson-cursor","dcs.prototype-6.util/easier-repo-data","meta","dcs.prototype-6.state/meta-holder","co2e-multiplier","dcs.prototype-6.state/co2e-multiplier-holder","population","population-scotland","dcs.prototype-6.data-shaping/rollup-population-regions","population-scotGovTarget","p1__34205#","cljs.core.map","cljs.core.assoc","dcs.prototype-6.state/population-holder","cljs.core.concat","household-waste","household-waste-scotland","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-waste-scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste","dcs.prototype-6.state/household-waste-holder","household-co2e","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","dcs.prototype-6.state/household-co2e-holder","business-waste-by-region","business-waste-by-region-scotland","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","business-waste-by-region-scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","waste-site","dcs.prototype-6.state/waste-site-holder","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder"],"sourcesContent":["(ns dcs.prototype-6.loader\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(defn fetch\n      [url body-handler]\n      (js/console.log (str \"Fetching \" url))\n      (go (let [start-time (util/now)\n                response (<! (http/get url {:with-credentials? false}))]\n                 (js/console.log (str \"Response from \" url \": status=\" (:status response) \" success=\" (:success response) \" secs-taken=\" (util/secs-to-now start-time)))\n                 (let [body (:body response)\n                       clj-body (if (string? body)\n                                  (js->clj (.parse js/JSON body) :keywordize-keys true) ;; probably a text/plain response that we'll have to explicitly convert to Clojure data\n                                  body)] ;; probably an application/json response causing cljs-http to have aleady auto converted the JSON to Clojure data\n                      (body-handler clj-body)))))\n\n(defn load-data\n  []\n  (js/console.log \"Loading data files\")\n\n  (fetch \"stirling-community-food-tonnes.json\"\n         (fn [stirling-community-food-tonnes] (->> stirling-community-food-tonnes\n                                                   (reset! state/stirling-community-food-tonnes-holder))))\n\n  (fetch \"stirling-community-food-footfall.json\"\n         (fn [stirling-community-food-footfall] (->> stirling-community-food-footfall\n                                                     (reset! state/stirling-community-food-footfall-holder))))\n\n  (fetch \"fairshare-material.json\"\n         (fn [fairshare-material] (->> fairshare-material\n                                       (reset! state/fairshare-material-holder))))\n\n  (fetch \"fairshare-co2e.json\"\n         (fn [fairshare-co2e] (->> fairshare-co2e\n                                   (reset! state/fairshare-co2e-holder))))\n\n  (fetch \"ace-furniture-sold-counts.json\"\n         (fn [ace-furniture-counts] (->> ace-furniture-counts\n                                         (reset! state/ace-furniture-counts-holder))))\n\n  (fetch \"ace-furniture-sold-weights.json\"\n         (fn [ace-furniture-weights] (->> ace-furniture-weights\n                                          (reset! state/ace-furniture-weights-holder))))\n  \n  (fetch \"ace-furniture-to-waste-streams.json\"\n         (fn [ace-furniture-to-waste-streams] (->> ace-furniture-to-waste-streams\n                                                   (reset! state/ace-furniture-to-waste-streams-holder))))\n\n  (fetch \"household-waste-analysis.json\"\n         (fn [household-waste-analysis] (->> household-waste-analysis\n                                             (reset! state/household-waste-analysis-holder))))\n\n  (fetch \"geojson.json\"\n         (fn [geojson] (->> geojson\n                            clj->js\n                            (reset! state/geojson-cursor))))\n  \n  (fetch (str util/easier-repo-data \"meta.json\")\n         (fn [meta] (->> meta\n                         (reset! state/meta-holder))))\n\n\n  (fetch (str util/easier-repo-data \"co2e-multiplier.json\") \n         (fn [co2e-multiplier] (->> co2e-multiplier\n                                    (reset! state/co2e-multiplier-holder))))\n  \n  (fetch (str util/easier-repo-data \"population.json\")\n         (fn [population] (let [population-scotland      (data-shaping/rollup-population-regions population)\n                                ;; fabricate records that will be used to calculate \"Scottish government target\" values\n                                ;; (fabricated records will be the same as the records for \"Scotland\", just with a different :region value)\n                                population-scotGovTarget (map #(assoc % :region \"Scot gov target\") population-scotland)]\n                            (reset! state/population-holder\n                                    (concat population\n                                            population-scotland\n                                            population-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"household-waste.json\")\n         (fn [household-waste] (let [household-waste-scotland      (data-shaping/rollup-household-waste-regions household-waste)\n                                     household-waste-scotGovTarget (data-shaping/calc-scotGovTarget-for-household-waste household-waste-scotland)]\n                                 (reset! state/household-waste-holder\n                                         (concat household-waste \n                                                 household-waste-scotland\n                                                 household-waste-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"household-co2e.json\")\n         (fn [household-co2e] (->> household-co2e\n                                   data-shaping/rollup-household-co2e-regions\n                                   (concat household-co2e)\n                                   (reset! state/household-co2e-holder))))\n\n  (fetch (str util/easier-repo-data \"business-waste-by-region.json\")\n         (fn [business-waste-by-region] (let [business-waste-by-region-scotland      (data-shaping/rollup-business-waste-by-region-regions business-waste-by-region)\n                                              business-waste-by-region-scotGovTarget (data-shaping/calc-scotGovTarget-for-business-waste-by-region business-waste-by-region-scotland)]\n                                          (reset! state/business-waste-by-region-holder\n                                                  (concat business-waste-by-region\n                                                          business-waste-by-region-scotland\n                                                          business-waste-by-region-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"waste-site-io.json\")\n         (fn [waste-site] (->> waste-site\n                               (reset! state/waste-site-holder))))\n\n  (fetch (str util/easier-repo-data \"bin-collection.json\")\n         (fn [stirling-bin-collection] (->> stirling-bin-collection\n                                            (reset! state/stirling-bin-collection-holder)))))\n"]}