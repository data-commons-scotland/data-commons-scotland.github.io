{"version":3,"sources":["dcs/prototype_6/loader.cljs"],"mappings":"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","names":["dcs.prototype-6.loader/fetch","url","body-handler","js/console.log","c__29093__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29094__auto__","switch__29023__auto__","state_44724","state_val_44726","statearr-44735","inst_44672","inst_44677","inst_44678","inst_44679","cljs.core/PersistentHashMap","inst_44680","statearr-44737","cljs.core.async.impl.ioc-helpers/take!","inst_44692","inst_44698","statearr-44738","statearr-44739","inst_44700","inst_44701","statearr-44742","inst_44695","inst_44696","statearr-44743","inst_44682","inst_44687","inst_44688","inst_44689","inst_44690","inst_44691","inst_44693","statearr-44744","statearr-44745","statearr-44746","inst_44706","statearr-44747","statearr-44748","inst_44710","inst_44711","cljs.core.async.impl.ioc-helpers/return-chan","statearr-44749","inst_44708","statearr-44750","statearr-44751","state-machine__29024__auto__","ret-value__29025__auto__","result__29026__auto__","cljs.core/keyword-identical?","ex__29027__auto__","e44752","statearr-44753","cljs.core/seq","statearr-44754","cljs.core/first","state__29095__auto__","statearr-44766","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","dcs.prototype-6.util/now","cljs_http.client.get","dcs.prototype-6.util/secs-to-now","clojure.string/ends-with?","testdouble.cljs.csv/read-csv","clojure.string/replace","cljs.core.js__GT_clj","js/JSON","dcs.prototype-6.loader/load-data","ace-furniture-count","cljs.core/reset!","dcs.prototype-6.state/ace-furniture-count-holder","ace-furniture-avg-weight","dcs.prototype-6.state/ace-furniture-avg-weight-holder","geojson","cljs.core/clj->js","dcs.prototype-6.state/geojson-cursor","regional-dashboard-annotations","dcs.prototype-6.state/regional-dashboard-annotations-holder","household-waste-analysis-annotations","dcs.prototype-6.state/household-waste-analysis-annotations-holder","dcs.prototype-6.util/easier-repo-data","meta","dcs.prototype-6.state/meta-holder","co2e-multiplier","dcs.prototype-6.state/co2e-multiplier-holder","population","population-scotland","dcs.prototype-6.data-shaping/rollup-population-regions","population-scotGovTarget","p1__44767#","cljs.core.map","cljs.core.assoc","dcs.prototype-6.state/population-holder","cljs.core.concat","household-waste","household-waste-scotland","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-waste-scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-household-waste","dcs.prototype-6.state/household-waste-holder","household-co2e","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","dcs.prototype-6.state/household-co2e-holder","business-waste-by-region","business-waste-by-region-scotland","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","business-waste-by-region-scotGovTarget","dcs.prototype-6.data-shaping/calc-scotGovTarget-for-business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","waste-site","dcs.prototype-6.state/waste-site-holder","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","fairshare","dcs.prototype-6.state/fairshare-holder","stirling-community-food-tonnes","dcs.prototype-6.state/stirling-community-food-tonnes-holder","stirling-community-food-footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","ace-furniture-to-scottishCarbonMetric","dcs.prototype-6.state/ace-furniture-to-scottishCarbonMetric-holder","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder"],"sourcesContent":["(ns dcs.prototype-6.loader\n  (:require [clojure.string :as str]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [testdouble.cljs.csv :as csv]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(defn fetch\n      [url body-handler]\n      (js/console.log (str \"Fetching \" url))\n      (go (let [start-time (util/now)\n                response (<! (http/get url {:with-credentials? false}))]\n                 (js/console.log (str \"Response from \" url \": status=\" (:status response) \" success=\" (:success response) \" secs-taken=\" (util/secs-to-now start-time)))\n                 (let [body (:body response)\n                       clj-body (cond\n                                  (str/ends-with? url \".csv\") (csv/read-csv (str/replace body \"\\r\" \"\")) ;; parse as CSV (and remove \\r chars since they're troublesome with this CSV lib in this context)\n                                  (string? body) (js->clj (.parse js/JSON body) :keywordize-keys true) ;; probably a text/plain response that we'll have to explicitly convert to Clojure data\n                                  :else body ;; probably an application/json response causing cljs-http to have aleady auto converted the JSON to Clojure data\n                                  )] \n                      (body-handler clj-body)))))\n\n(defn load-data\n  []\n  (js/console.log \"Loading data files\")\n  \n  (fetch \"ace-furniture-count.json\"\n         (fn [ace-furniture-count] (->> ace-furniture-count\n                                        (reset! state/ace-furniture-count-holder))))\n\n  (fetch \"ace-furniture-avg-weight.json\"\n         (fn [ace-furniture-avg-weight] (->> ace-furniture-avg-weight\n                                             (reset! state/ace-furniture-avg-weight-holder))))\n  \n  (fetch \"geojson.json\"\n         (fn [geojson] (->> geojson\n                            clj->js\n                            (reset! state/geojson-cursor))))\n  \n  (fetch \"regional-dashboard-annotations.csv\"\n         (fn [regional-dashboard-annotations] (->> regional-dashboard-annotations\n                                                   (reset! state/regional-dashboard-annotations-holder))))\n  \n  (fetch \"household-waste-analysis-annotations.csv\"\n         (fn [household-waste-analysis-annotations] (->> household-waste-analysis-annotations\n                                                         (reset! state/household-waste-analysis-annotations-holder))))\n\n  (fetch (str util/easier-repo-data \"meta.json\")\n         (fn [meta] (->> meta\n                         (reset! state/meta-holder))))\n\n\n  (fetch (str util/easier-repo-data \"co2e-multiplier.json\") \n         (fn [co2e-multiplier] (->> co2e-multiplier\n                                    (reset! state/co2e-multiplier-holder))))\n  \n  (fetch (str util/easier-repo-data \"population.json\")\n         (fn [population] (let [population-scotland      (data-shaping/rollup-population-regions population)\n                                ;; fabricate records that will be used to calculate \"Scottish government target\" values\n                                ;; (fabricated records will be the same as the records for \"Scotland\", just with a different :region value)\n                                population-scotGovTarget (map #(assoc % :region \"Scot gov target\") population-scotland)]\n                            (reset! state/population-holder\n                                    (concat population\n                                            population-scotland\n                                            population-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"household-waste.json\")\n         (fn [household-waste] (let [household-waste-scotland      (data-shaping/rollup-household-waste-regions household-waste)\n                                     household-waste-scotGovTarget (data-shaping/calc-scotGovTarget-for-household-waste household-waste-scotland)]\n                                 (reset! state/household-waste-holder\n                                         (concat household-waste \n                                                 household-waste-scotland\n                                                 household-waste-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"household-co2e.json\")\n         (fn [household-co2e] (->> household-co2e\n                                   data-shaping/rollup-household-co2e-regions\n                                   (concat household-co2e)\n                                   (reset! state/household-co2e-holder))))\n\n  (fetch (str util/easier-repo-data \"business-waste-by-region.json\")\n         (fn [business-waste-by-region] (let [business-waste-by-region-scotland      (data-shaping/rollup-business-waste-by-region-regions business-waste-by-region)\n                                              business-waste-by-region-scotGovTarget (data-shaping/calc-scotGovTarget-for-business-waste-by-region business-waste-by-region-scotland)]\n                                          (reset! state/business-waste-by-region-holder\n                                                  (concat business-waste-by-region\n                                                          business-waste-by-region-scotland\n                                                          business-waste-by-region-scotGovTarget)))))\n\n  (fetch (str util/easier-repo-data \"waste-site-io.json\")\n         (fn [waste-site] (->> waste-site\n                               (reset! state/waste-site-holder))))\n\n  (fetch (str util/easier-repo-data \"bin-collection.json\")\n         (fn [stirling-bin-collection] (->> stirling-bin-collection\n                                            (reset! state/stirling-bin-collection-holder))))\n  \n  (fetch (str util/easier-repo-data \"fairshare.json\")\n         (fn [fairshare] (->> fairshare\n                              (reset! state/fairshare-holder))))\n  \n  (fetch (str util/easier-repo-data \"stirling-community-food-tonnes.json\")\n         (fn [stirling-community-food-tonnes] (->> stirling-community-food-tonnes\n                                                   (reset! state/stirling-community-food-tonnes-holder))))\n\n  (fetch (str util/easier-repo-data \"stirling-community-food-footfall.json\")\n         (fn [stirling-community-food-footfall] (->> stirling-community-food-footfall\n                                                     (reset! state/stirling-community-food-footfall-holder))))\n\n  (fetch (str util/easier-repo-data \"ace-furniture-to-scottishCarbonMetric.json\")\n         (fn [ace-furniture-to-scottishCarbonMetric] (->> ace-furniture-to-scottishCarbonMetric\n                                                          (reset! state/ace-furniture-to-scottishCarbonMetric-holder))))\n\n  (fetch (str util/easier-repo-data \"household-waste-analysis.json\")\n         (fn [household-waste-analysis] (->> household-waste-analysis\n                                             (reset! state/household-waste-analysis-holder)))))\n"]}