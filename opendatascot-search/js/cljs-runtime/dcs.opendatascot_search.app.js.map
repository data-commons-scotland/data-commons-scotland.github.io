{"version":3,"sources":["dcs/opendatascot_search/app.cljs"],"mappings":";AAOA,uDAAA,vDAAMA,sHACHC,WAAWC;AADd,AAEE,IAAMC,2GACK,iBAAAC,qBAAA,6EAAAC,nMAIA,6CAAA,7CAACyB;AAJD,AAAA,YAAAxB,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAo7EsC,AAAAgG,sBAAArG;IAp7EtCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,kBAAA,AAAAK,eAAAN,gBAAAK,7CAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFACGY,YAAY,iDACK,+CAAA,/CAACE,jDACDE;kBADAH;AAAA,AAAS,sCAAAA,/BAACE,gDAAgBH;;CAD1B,AAAA,qFAAQxB;;AAD5B,eAAA,CAAAc,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mEAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,kBAAA,AAAAS,gBAAAjB,9BAAMoB;AAAN,AAAA,OAAAF,eAAA,mFACGE,YAAY,iDACK,+CAAA,/CAACE,jDACDE;kBADAH;AAAA,AAAS,sCAAAA,/BAACE,gDAAgBH;;4GAF9C,AAAAL,mEAAA,AAAAI,eAAAnB,7LACoB,AAAA,qFAAQJ;;;AAD5B;;;;GAAA,KAAA;;AAAA,AAAA,OAAAG,mBAAkBF;;IAOvB6B,0CACA,sFAAK,AAACC,eAAK7B,rFACN,AAAC8B,+CAAOC,/DACRtB;IAGLuB,2CACA,sFACK,AAACC,4CAAI,WAAAC,7HACL,AAACJ,+CAAOC,/DACRtB;AAFK,AAAA,IAAA0B,aAAAD;kBAAA,AAAAE,4CAAAD,WAAA,IAAA,zEAAMb;cAAN,AAAAc,4CAAAD,WAAA,IAAA,rEAAkBE;AAAlB,AAA4B,sDAAA,WAAAC,1DAACd;AAAD,AAAS,oDAAAc,7CAACC,8DAAIjB;GAAae;GAD5DrC;AAfX,2GAoBMF,/CACA,0DAAA,1DAAC0C,5DACD,8KAAA,uJAAA,uGAAA,raAACC,oOAAgBb,wJACAI,iIACahC;;AAGtC,wDAAA,xDAAM0C,wHACHC,YAAY5C;AADf,AAEE,IAAAE,qBAAA,8EAAA2C;AAAA,AAAA,YAAAzC,kBAAA,KAAA;AAAA,AAAA,IAAAyC,eAAAA;;AAAA,AAAA,IAAAxC,qBAAA,AAAAC,cAAAuC;AAAA,AAAA,GAAAxC;AAAA,AAAA,IAAAwC,eAAAxC;AAAA,AAAA,GAAA,AAAAE,6BAAAsC;AAAA,IAAArC,kBAw5EiD,AAAAgG,sBAAA3D;IAx5EjDpC,qBAAA,AAAAC,gBAAAF;IAAAsC,WAAA,AAAAlC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAsC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAtC;AAAA,iBAAA,AAAAK,eAAAN,gBAAAuC,5CAAMhD;AAAN,AAAA,AAAA,AAAAgB,uBAAA+B,SACE,AAAChD,qDAAyBC,WAAWC;;AADvC,eAAA,CAAA+C,WAAA;;;;AAAA;;;;;AAAA,OAAA/B,qBAAA,AAAAC,gBAAA6B,UAAA,AAAAE,oEAAA,AAAA7B,qBAAA0B;;AAAA,OAAA7B,qBAAA,AAAAC,gBAAA6B,UAAA;;;AAAA,iBAAA,AAAA1B,gBAAAyB,7BAAM9C;AAAN,AAAA,OAAAsB,6FAAA,AAAA2B,oEAAA,AAAA1B,eAAAuB,jKACE,AAAC/C,qDAAyBC,WAAWC;;;AADvC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAE,mBAAiB0C;;AAGnB,GAAA,QAAAK,gCAAAC,oDAAAC,wDAAAC;AAAA;AAAA,AAAA,AAASC,2CAAa,gDAAA,hDAACC;;AAEvB,6CAAA,7CAAMC;AAAN,AAEE,IAAMC,iBAAe,6ZAIG,+CAAA,WAAAM,1DAACrC,3YACD,AAACsC,gDAAQ,oDAAA,6DAAA,8DAAA,gHAAA,/RAACC,lEACVC;AAFA,AAAS,uHAAA,/GAAG,AAAA,2FAAAH;wKAHZ,+CAAA,WAAAH,1DAAClC,tEACD,AAACS,4CAAI0B,3IACL,AAACjB,sDAA0BkB;AAF3B,AAAS,6CAAA,rCAAI,gBAAAF,hBAACjD;GADZ,mDAAA,AAAA+C,0DAAA,7GAACC,mEAAWL;+BAAtC,3BAOIa;AAPJ,AAAA,0FAAA,mDASC,iBAAMC,IAAE,AAACzD,gBAAM8C;AAAf,AAAA,0FAAA,uEAAA,2CAAA,7CACiBW,qBAAqB,aAAA,AAAA,KAAA,hBAAM,KAAA,JAAGA,yBAC5C,gJAAA,9IAAI,CAAGA,IAAED,2BAA0B,CAAA,+FAAA,1BAA8BA;KAXrE,mFAAA,gDAaE,iBAAAhE,qBAAA,mEAAAkE;AAAA,AAAA,YAAAhE,kBAAA,KAAA;AAAA,AAAA,IAAAgE,eAAAA;;AAAA,AAAA,IAAA/D,qBAAA,AAAAC,cAAA8D;AAAA,AAAA,GAAA/D;AAAA,AAAA,IAAA+D,eAAA/D;AAAA,AAAA,GAAA,AAAAE,6BAAA6D;AAAA,IAAA5D,kBAo4E+C,AAAAgG,sBAAApC;IAp4E/C3D,qBAAA,AAAAC,gBAAAF;IAAA6D,WAAA,AAAAzD,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA6D,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA7D;AAAA,iBAAA,AAAAK,eAAAN,gBAAA8D,5CAAMvE;AAAN,AAAA,AAAA,AAAAgB,uBAAAsD,SAAA,oBAAA,oFAAA,gDAAA,mFAAA,gDAAA,2CAAA,iQAAA,6GAAA,+FAAA,mFAAA,3eAEc,AAAA,gFAAMtE,oBAAa,AAAA,oFAAQA,yBAAkB,AAAA,4FAAWA,iBAAiB,AAAA,8EAAMA,uJAC1F,iBAAM0E,IAAE,AAACC,oBAAS,AAAA,sFAAQ3E;AAA1B,AACE,GAAM,GAAK,AAAC4E,4BAAWF;AAAvB,AAAA,0FAAA,iDAAA,mFAAA,2FAAA,mFAAA,7FAC4BA;;AAD5B;;KAJL,mFAAA,iGAAA,wEAOO,iBAAAvE,qBAAA,zFAQA,AAAC2F;wFARDjB;AAAA,AAAA,YAAAxE,kBAAA,KAAA;;AAAA,AAAA,IAAAwE,eAAAA;;AAAA,AAAA,IAAAvE,yBAAA,AAAAC,cAAAsE;AAAA,AAAA,GAAAvE;AAAA,AAAA,IAAAuE,eAAAvE;AAAA,AAAA,GAAA,AAAAE,6BAAAqE;AAAA,IAAApE,sBA63EwC,AAAAgG,sBAAA5B;IA73ExCnE,yBAAA,AAAAC,gBAAAF;IAAAqE,WAAA,AAAAjE,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAqE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAArE;AAAA,IAAAsE,aAAA,AAAAjE,eAAAN,oBAAAsE;kBAAA,AAAAzC,4CAAA0C,WAAA,IAAA,zEAAOxD;cAAP,AAAAc,4CAAA0C,WAAA,IAAA,rEAAmBzC;AAAnB,AAAA,AAAA,AAAAvB,uBAAA8D,SACE,iBAAAxE,yBAAiB,AAACe,gBAAMkB;AAAxB,AAAA,oBAAAjC;AAAA,AAAA,YAAAA,RAAWmF;AAAX,AACE,IAAMC,MAAI,AAACC,sDAAaF,MAAMjE;IACxBoE,MAAI,CAAGF,MAAI,AAAC/E,gBAAMa;AADxB,AAAA,2BAAA,mFAAA,4JAAA,mFAAA,uMAAA,2CAAA,oDAESA,rbACN,mDAAA,nDAACqE,6CAAKJ,UAAQC,2MACwBlE,oBACtC,AAACqE,6CAAKJ,MAAMG;;AANjB;;;;AADF,eAAA,CAAAb,WAAA;;;;AAAA;;;;;AAAA,OAAA9D,qBAAA,AAAAC,gBAAA4D,UAAA,AAAAG,uEAAA,AAAA7D,qBAAAyD;;AAAA,OAAA5D,qBAAA,AAAAC,gBAAA4D,UAAA;;;AAAA,IAAAI,aAAA,AAAA7D,gBAAAwD;kBAAA,AAAAvC,4CAAA4C,WAAA,IAAA,zEAAO1D;cAAP,AAAAc,4CAAA4C,WAAA,IAAA,rEAAmB3C;AAAnB,AAAA,OAAAjB,eACE,iBAAAhB,yBAAiB,AAACe,gBAAMkB;AAAxB,AAAA,oBAAAjC;AAAA,AAAA,YAAAA,RAAWmF;AAAX,AACE,IAAMC,MAAI,AAACC,sDAAaF,MAAMjE;IACxBoE,MAAI,CAAGF,MAAI,AAAC/E,gBAAMa;AADxB,AAAA,2BAAA,mFAAA,4JAAA,mFAAA,uMAAA,2CAAA,oDAESA,rbACN,mDAAA,nDAACqE,6CAAKJ,UAAQC,2MACwBlE,oBACtC,AAACqE,6CAAKJ,MAAMG;;AANjB;;KADF,AAAAX,uEAAA,AAAA1D,eAAAsD;;;AAAA;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAA1E,mBAA4B,AAAA,sHAAwBH;kEAP3D,2CAAA,oDACSA,5JAcU,+CAAA,/CAAC+F;;AAfpB,eAAA,CAAAxB,WAAA;;;;AAAA;;;;;AAAA,OAAAtD,qBAAA,AAAAC,gBAAAoD,UAAA,AAAAE,yDAAA,AAAApD,qBAAAiD;;AAAA,OAAApD,qBAAA,AAAAC,gBAAAoD,UAAA;;;AAAA,iBAAA,AAAAjD,gBAAAgD,7BAAMrE;AAAN,AAAA,OAAAsB,eAAA,oBAAA,oFAAA,gDAAA,mFAAA,gDAAA,2CAAA,iQAAA,6GAAA,+FAAA,mFAAA,3eAEc,AAAA,gFAAMtB,oBAAa,AAAA,oFAAQA,yBAAkB,AAAA,4FAAWA,iBAAiB,AAAA,8EAAMA,uJAC1F,iBAAM0E,IAAE,AAACC,oBAAS,AAAA,sFAAQ3E;AAA1B,AACE,GAAM,GAAK,AAAC4E,4BAAWF;AAAvB,AAAA,0FAAA,iDAAA,mFAAA,2FAAA,mFAAA,7FAC4BA;;AAD5B;;KAJL,mFAAA,iGAAA,wEAOO,iBAAAvE,qBAAA,zFAQA,AAAC2F;wFARDX;AAAA,AAAA,YAAA9E,kBAAA,KAAA;AAAA,AAAA,IAAA8E,eAAAA;;AAAA,AAAA,IAAA7E,yBAAA,AAAAC,cAAA4E;AAAA,AAAA,GAAA7E;AAAA,AAAA,IAAA6E,eAAA7E;AAAA,AAAA,GAAA,AAAAE,6BAAA2E;AAAA,IAAA1E,kBA63EwC,AAAAgG,sBAAAtB;IA73ExCzE,qBAAA,AAAAC,gBAAAF;IAAA2E,WAAA,AAAAvE,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA2E,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3E;AAAA,IAAA4E,aAAA,AAAAvE,eAAAN,gBAAA4E;kBAAA,AAAA/C,4CAAAgD,WAAA,IAAA,zEAAO9D;cAAP,AAAAc,4CAAAgD,WAAA,IAAA,rEAAmB/C;AAAnB,AAAA,AAAA,AAAAvB,uBAAAoE,SACE,iBAAA9E,yBAAiB,AAACe,gBAAMkB;AAAxB,AAAA,oBAAAjC;AAAA,AAAA,YAAAA,RAAWmF;AAAX,AACE,IAAMC,MAAI,AAACC,sDAAaF,MAAMjE;IACxBoE,MAAI,CAAGF,MAAI,AAAC/E,gBAAMa;AADxB,AAAA,2BAAA,mFAAA,4JAAA,mFAAA,uMAAA,2CAAA,oDAESA,rbACN,mDAAA,nDAACqE,6CAAKJ,UAAQC,2MACwBlE,oBACtC,AAACqE,6CAAKJ,MAAMG;;AANjB;;;;AADF,eAAA,CAAAP,WAAA;;;;AAAA;;;;;AAAA,OAAApE,qBAAA,AAAAC,gBAAAkE,UAAA,AAAAG,uEAAA,AAAAnE,qBAAA+D;;AAAA,OAAAlE,qBAAA,AAAAC,gBAAAkE,UAAA;;;AAAA,IAAAI,aAAA,AAAAnE,gBAAA8D;kBAAA,AAAA7C,4CAAAkD,WAAA,IAAA,zEAAOhE;cAAP,AAAAc,4CAAAkD,WAAA,IAAA,rEAAmBjD;AAAnB,AAAA,OAAAjB,eACE,iBAAAhB,yBAAiB,AAACe,gBAAMkB;AAAxB,AAAA,oBAAAjC;AAAA,AAAA,YAAAA,RAAWmF;AAAX,AACE,IAAMC,MAAI,AAACC,sDAAaF,MAAMjE;IACxBoE,MAAI,CAAGF,MAAI,AAAC/E,gBAAMa;AADxB,AAAA,2BAAA,mFAAA,4JAAA,mFAAA,uMAAA,2CAAA,oDAESA,rbACN,mDAAA,nDAACqE,6CAAKJ,UAAQC,2MACwBlE,oBACtC,AAACqE,6CAAKJ,MAAMG;;AANjB;;KADF,AAAAL,uEAAA,AAAAhE,eAAA4D;;;AAAA;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAhF,mBAA4B,AAAA,sHAAwBH;kEAP3D,2CAAA,wEAAA,AAAAwE,yDAAA,AAAAjD,eAAA8C,5FACSrE,5JAcU,+CAAA,/CAAC+F;;;AAfpB;;;;GAAA,KAAA;;AAAA,AAAA,OAAA5F,mBAAiB,AAACsE,6CAAKN,yBAAyBV;;;AAiBpD,mCAAA,nCAAMwC;AAAN,AAAA,0FAAA,6DAAA,mFAAA,mDAAA,mFAAA,8CAAA,6BAAA,mFAAA,sDAAA,2CAAA,qDAAA,sDAAA,mEAAA,kDAAA,sEAAA,AAAAvC,0DAAA,wDAAA,+KAAA,6DAAA,WAAAsC,zVAO6B1C;AAP7B,AAS6B,OAAC4C,sBAAO5C,yCAAa,AAAA,AAAA0C;mBATlD,mFAUKxC;;AAGL,oCAAA,pCAAuB2C;AAAvB,AAEE,wDAAA,jDAACC,oIAAaH,yCAAM,wBAAA,xBAAiBI;;AAKvC,mCAAA,nCAAeC;AAAf,AAEE,OAACH;;;AAGH,mCAAA,nCAAwBI;AAAxB,AAEE,mBAAA,ZAACC","names":["dcs.opendatascot-search.app/match-against-index-card","index-card","search-words","search-words->matches","iter__4652__auto__","s__54388","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__54390","cljs.core/chunk-buffer","i__54389","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54387","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","search-word","p1__54385#","cljs.core.filter","clojure.string/includes?","cljs.core.distinct","cljs.core.into","count-of-search-words-with-subs-matches","cljs.core/vals","cljs.core.remove","cljs.core/empty?","count-of-search-words-with-exact-matches","cljs.core.map","p__54391","vec__54392","cljs.core.nth","matches","p1__54386#","cljs.core._EQ_","cljs.core.dissoc","cljs.core.assoc","dcs.opendatascot-search.app/match-against-index-cards","index-cards","s__54396","b__54398","i__54397","iter__54395","js/dcs","js/dcs.opendatascot-search","js/dcs.opendatascot-search.app","js/dcs.opendatascot-search.app.search-words","dcs.opendatascot-search.app/search-words","reagent.core.atom","dcs.opendatascot-search.app/search-results","search-results","cljs.core/deref","clojure.string.split","p1__54399#","clojure.string/lower-case","dcs.opendatascot-search.data/index-cards","p1__54400#","cljs.core.sort_by","cljs.core.juxt","cljs.core/reverse","max-search-results-shown","n","s__54402","b__54404","i__54403","iter__54401","cljs.core.take","s","clojure.string/trim","clojure.string/blank?","s__54406","b__54408","i__54407","vec__54409","iter__54405","vec__54412","s__54416","b__54418","i__54417","vec__54419","iter__54415","vec__54422","match","ix1","clojure.string.index_of","ix2","cljs.core.subs","cljs.core.interleave","cljs.core.repeat","p1__54425#","dcs.opendatascot-search.app/page","cljs.core/reset!","dcs.opendatascot-search.app/start","reagent.dom.render","js/document","dcs.opendatascot-search.app/init","dcs.opendatascot-search.app/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.opendatascot-search.app\n  (:require  [reagent.core :as r]\n             [reagent.dom :as rdom]\n             [clojure.string :as str]\n            [dcs.opendatascot-search.data :refer [index-cards]]))\n\n;; Try to match the search words against the contents of one index card.\n(defn match-against-index-card\n  [index-card search-words]\n  (let [search-words->matches\n        (->> (for [search-word search-words]\n               [search-word (->> (:words index-card)\n                                 (filter #(str/includes? % search-word))\n                                 distinct)])\n             (into {}))\n\n        ;; how many search-words are exact equals of/contained within a word in the index card?\n        count-of-search-words-with-subs-matches\n        (->> (vals search-words->matches)\n             (remove empty?)\n             count)\n\n        ;; how many search-words are exact equals of a word in the index card?\n        count-of-search-words-with-exact-matches\n        (->> search-words->matches\n             (map (fn [[search-word matches]] (filter #(= % search-word) matches)))\n             (remove empty?)\n             count)]\n\n    (-> index-card\n        (dissoc :words)\n        (assoc :metric-1 count-of-search-words-with-subs-matches\n               :metric-2 count-of-search-words-with-exact-matches\n               :search-words->matches search-words->matches))))\n\n;; Try to match the search words against the contents of all of the index cards.\n(defn match-against-index-cards\n  [index-cards search-words]\n  (for [index-card index-cards]\n    (match-against-index-card index-card search-words)))\n\n(defonce search-words (r/atom \"\"))\n\n(defn search-results \n  []\n  (let [search-results (->> (str/split @search-words #\"\\s\")\n                          (filter #(>= (count %) 3))\n                          (map str/lower-case)\n                          (match-against-index-cards index-cards)\n                          (filter #(> (:metric-1 %) 0))\n                          (sort-by (juxt :metric-1 :metric-2 :modified :title))\n                          reverse)\n      max-search-results-shown 50]\n  [:div\n   (let [n (count search-results)]\n     [:span.text-sm n \" (partial) match\" (when (> n 1) \"es\") \".\"\n      (if (> n max-search-results-shown) (str \" Displaying the first \" max-search-results-shown \".\") \"\")])\n   [:ol\n    (for [index-card (take max-search-results-shown search-results)]\n      ^{:key index-card} [:li\n       [:a {:href (:url index-card)} (:title index-card)] \", \" (:modified index-card) \", \" (:org index-card) [:br]\n       (let [s (str/trim (:notes index-card))]\n         (when (not (str/blank? s))\n           [:<> [:span.text-gray-600 s] [:br]]))\n       [:span.text-gray-400.text-sm \"Matching: \"]\n       (-> (for [[search-word matches] (:search-words->matches index-card)]\n             (when-let [match (first matches)]\n               (let [ix1 (str/index-of match search-word)\n                     ix2 (+ ix1 (count search-word))]\n                 ^{:key search-word} [:span.text-gray-500.text-sm\n                  (subs match 0 ix1)\n                  [:span.font-extrabold.text-indigo-700 search-word]\n                  (subs match ix2)])))\n           (interleave (repeat \" \")))])]]))\n\n(defn page\n  []\n  [:div.flex\n   [:div\n    [:p \"Blah blah blah....\"]\n    [:input {:type          :text\n             :placeholder   \"Search... (type words of three or more letters)\"\n             :initial-value @search-words\n             :class         \"px-3 py-3 placeholder-blueGray-300 text-blueGray-500 relative bg-white bg-white rounded text-sm border border-blueGray-300 outline-none focus:outline-none focus:ring w-full\"\n             :on-input      #(reset! search-words (.. % -target -value))}]\n    [search-results]]])\n\n;; called by init and after code reloading finishes\n(defn ^:dev/after-load start\n  []\n  (rdom/render [page] (.getElementById js/document \"app\")))\n\n;; init is called ONCE when the page loads\n;; this is called in the index.html and must be exported\n;; so it is available even in :advanced release builds\n(defn ^:export init\n  []\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop\n  []\n  (js/console.log \"stop\"))\n"]}