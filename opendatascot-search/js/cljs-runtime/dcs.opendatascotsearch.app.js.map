{"version":3,"sources":["dcs/opendatascotsearch/app.cljs"],"mappings":"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","names":["dcs.opendatascotsearch.app/match-against-index-card","index-card","search-words","search-words->matches","iter__4652__auto__","s__41258","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__41260","cljs.core/chunk-buffer","i__41259","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41257","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","search-word","p1__41255#","cljs.core.filter","clojure.string/includes?","cljs.core.distinct","cljs.core.into","count-of-search-words-with-subs-matches","cljs.core/vals","cljs.core.remove","cljs.core/empty?","count-of-search-words-with-exact-matches","cljs.core.map","p__41261","vec__41262","cljs.core.nth","matches","p1__41256#","cljs.core._EQ_","cljs.core.dissoc","cljs.core.assoc","dcs.opendatascotsearch.app/match-against-index-cards","index-cards","s__41266","b__41268","i__41267","iter__41265","js/dcs","js/dcs.opendatascotsearch","js/dcs.opendatascotsearch.app","js/dcs.opendatascotsearch.app.search-words","dcs.opendatascotsearch.app/search-words","reagent.core.atom","dcs.opendatascotsearch.app/search-results","search-results","cljs.core/deref","clojure.string.split","p1__41269#","clojure.string/lower-case","dcs.opendatascotsearch.data/index-cards","p1__41270#","cljs.core.sort_by","cljs.core.juxt","cljs.core/reverse","max-search-results-shown","n","cljs.core.not_EQ_","s__41272","b__41274","i__41273","iter__41271","cljs.core.take","s","clojure.string/trim","clojure.string/blank?","s__41276","b__41278","i__41277","vec__41279","iter__41275","vec__41282","s__41286","b__41288","i__41287","vec__41289","iter__41285","vec__41292","match","ix1","clojure.string.index_of","ix2","cljs.core.subs","cljs.core.interleave","cljs.core.repeat","p1__41295#","dcs.opendatascotsearch.app/page","cljs.core/reset!","dcs.opendatascotsearch.app/start","reagent.dom.render","js/document","dcs.opendatascotsearch.app/init","dcs.opendatascotsearch.app/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.opendatascotsearch.app\n  (:require  [reagent.core :as r]\n             [reagent.dom :as rdom]\n             [clojure.string :as str]\n            [dcs.opendatascotsearch.data :refer [index-cards]]))\n\n;; Try to match the search words against the contents of one index card.\n(defn match-against-index-card\n  [index-card search-words]\n  (let [search-words->matches\n        (->> (for [search-word search-words]\n               [search-word (->> (:words index-card)\n                                 (filter #(str/includes? % search-word))\n                                 distinct)])\n             (into {}))\n\n        ;; how many search-words are exact equals of/contained within a word in the index card?\n        count-of-search-words-with-subs-matches\n        (->> (vals search-words->matches)\n             (remove empty?)\n             count)\n\n        ;; how many search-words are exact equals of a word in the index card?\n        count-of-search-words-with-exact-matches\n        (->> search-words->matches\n             (map (fn [[search-word matches]] (filter #(= % search-word) matches)))\n             (remove empty?)\n             count)]\n\n    (-> index-card\n        (dissoc :words)\n        (assoc :metric-1 count-of-search-words-with-subs-matches\n               :metric-2 count-of-search-words-with-exact-matches\n               :search-words->matches search-words->matches))))\n\n;; Try to match the search words against the contents of all of the index cards.\n(defn match-against-index-cards\n  [index-cards search-words]\n  (for [index-card index-cards]\n    (match-against-index-card index-card search-words)))\n\n(defonce search-words (r/atom \"\"))\n\n(defn search-results \n  []\n  (let [search-results (->> (str/split @search-words #\"\\s\")\n                          (filter #(>= (count %) 3))\n                          (map str/lower-case)\n                          (match-against-index-cards index-cards)\n                          (filter #(> (:metric-1 %) 0))\n                          (sort-by (juxt :metric-1 :metric-2 :modified :title))\n                          reverse)\n      max-search-results-shown 150]\n  [:div\n   (let [n (count search-results)]\n     [:span.text-sm n \" (partial) match\" (when (not= n 1) \"es\") \".\"\n      (if (> n max-search-results-shown) (str \" Displaying the first \" max-search-results-shown \".\") \"\")])\n   [:ol\n    (for [index-card (take max-search-results-shown search-results)]\n      ^{:key index-card} [:li\n       [:a {:href (:url index-card)} (:title index-card)] \", \" (:modified index-card) \", \" (:org index-card) [:br]\n       (let [s (str/trim (:notes index-card))]\n         (when (not (str/blank? s))\n           [:<> [:span.text-gray-600 s] [:br]]))\n       [:span.text-gray-400.text-sm \"Matching: \"]\n       (-> (for [[search-word matches] (:search-words->matches index-card)]\n             (when-let [match (first matches)]\n               (let [ix1 (str/index-of match search-word)\n                     ix2 (+ ix1 (count search-word))]\n                 ^{:key search-word} [:span.text-gray-500.text-sm\n                  (subs match 0 ix1)\n                  [:span.font-extrabold.text-indigo-700 search-word]\n                  (subs match ix2)])))\n           (interleave (repeat \" \")))])]]))\n\n(defn page\n  []\n  [:div.container.mx-auto ;; https://umeshmk.github.io/Tailwindcss-cheatsheet/ is a handy cheatsheet for TailwindCSS\n   [:div.prose.prose-a:text-blue-600.prose-a:no-underline.hover:prose-a:underline.font-serif.antialiased.leading-snug\n    [:h1 \"A demo of a simple alternative search over Open Data Scotland's dataset indexes\"]\n    [:p \"(\" [:a {:href \"https://campuspress.stir.ac.uk/datacommonsscotland/2022/05/03/a-simple-alternative-search-over-open-data-scotlands-dataset-indexes/\"} \"Background and rationale\"] \")\"]\n    [:p.text-xl.text-indigo-700.font-bold \"Type words (of three or more letters)\"]\n    [:input {:type          :text\n             :placeholder   \"Search... (type words of three or more letters)\"\n             :initial-value @search-words\n             :class         \"px-3 py-3 placeholder-blueGray-300 text-blueGray-500 relative bg-white bg-white rounded text-sm border border-blueGray-300 outline-none focus:outline-none focus:ring w-full\"\n             :on-input      #(reset! search-words (.. % -target -value))}]\n    [search-results]]])\n\n;; called by init and after code reloading finishes\n(defn ^:dev/after-load start\n  []\n  (rdom/render [page] (.getElementById js/document \"app\")))\n\n;; init is called ONCE when the page loads\n;; this is called in the index.html and must be exported\n;; so it is available even in :advanced release builds\n(defn ^:export init\n  []\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop\n  []\n  (js/console.log \"stop\"))\n"]}