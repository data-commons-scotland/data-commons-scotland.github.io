{"version":3,"sources":["dcs/prototype_6/ui_household_co2e.cljs"],"mappings":";AAOA,AAAA,AAAMA,AAAYC,AAAMC,AAAOC;AAA/B,AACM,AAAMC,AAAW,AAACC,AAAM,AAAA,AAACC,AAAeH;AAAxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBF,AAISE,AAKoEC,AAENF;;AAO/F,AAAA,AAAMK,AAAOL,AAAOM,AAAeC;AAAnC,AACM,AACMD,AAAe,AAAA,AAAAE,AAACC;AAAD,AAAS,AAAA,AAAA,AAACC,AAAuBV,AAAQ,AAAA,AAAAQ;AAAaF;AAGrEK,AAAsB,AAACP,AAAS,AAAA,AAAA,AAACQ,AAAoBL;AACrDM,AAAkB,AAAKb,AAAOc;AAAZ,AAAkB,AAAA,AAAA,AAAIH,AAAsB,AAAA,AAACI,AAAKf,AAAOc,AAAOE;;AAElFV,AAAe,AAACW,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAanB;AAAb,AAAAe,AAAAI,AAAA,AAAoBL;AAApB,AAAAC,AAAAI,AAAA,AAAyBI;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CvB,AACAc,AACQ,AAAGS,AAAO,AAACV,AAAkBb,AAAOc;AACxFR;AAGpBA,AAAe,AAAA,AAAAkB,AAACP;AAAD,AAAM,AAAAO,AAAA,AAACC,AAAc,AAAK,AAAA,AAAAD;AACrBlB;AAd1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAgBOoB,AAAa,AAAA,AAAC5B,AAAwCE,AAAOM;;AAG1E,AAAA,AAAMsB;AAAN,AAAA,AAAA,AAAAD,AAAA,AAAAA,AAAA,AAAAA,AACOtB,AAAOwB,AAAqBC,AAA6BC","names":["dcs.prototype-6.ui-household-co2e/chart-spec","title","region","data","year-count","cljs.core/count","cljs.core/group-by","dcs.prototype-6.ui-household-co2e/chart","household-co2e","population","p1__26447#","cljs.core.filter","cljs.core/contains?","population-for-lookup","cljs.core.juxt","lookup-population","year","cljs.core.get","cljs.core/first","cljs.core.map","p__26454","map__26455","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","p1__26453#","cljs.core.assoc","oz.core/vega-lite","cljs.core/deref","dcs.prototype-6.ui-household-co2e/create","dcs.prototype-6.state/region-holder","dcs.prototype-6.state/household-co2e-holder","dcs.prototype-6.state/population-holder"],"sourcesContent":["(ns dcs.prototype-6.ui-household-co2e\n  (:require\n    [reagent.core :as r]\n    [oz.core :as oz]\n    [dcs.prototype-6.state :as state]))\n\n\n(defn chart-spec [title region data]\n      (let [year-count (count (group-by :year data))]\n           {:schema     \"https://vega.github.io/schema/vega/v5.json\"\n            :title      title\n            :width      200\n            :height     100\n            :background \"floralwhite\"\n            :data       {:values data}\n            :mark       \"line\"\n            :selection  {:my {:type   \"multi\"\n                              :fields [\"region\"]\n                              :bind   \"legend\"}}\n            :encoding   {:x       {:field \"year\" :type \"temporal\" :timeUnit \"year\" :axis {:tickCount year-count :title \"year\"}}\n                         :y       {:field \"tonnes\" :type \"quantitative\" :scale {:zero false} :axis {:title \"tonnes\"}}\n                         :color   {:field \"region\" :type \"nominal\" :scale {:domain [\"Scotland\" region] :range [\"#1f77b4\" \"#fdae6b\"]}}\n                         :opacity {:condition {:selection \"my\" :value 1}\n                                   :value     0.2}\n                         :tooltip [{:field \"region\" :type \"nominal\"}\n                                   {:field \"year\" :type \"temporal\"}\n                                   {:field \"tonnes\" :type \"quantitative\"}]}}))\n\n(defn chart [region household-co2e population]\n      (let [;; filter\n            household-co2e (filter #(contains? #{\"Scotland\" region} (:region %)) household-co2e)\n\n            ;; calculate the per citizen values\n            population-for-lookup (group-by (juxt :region :year) population)\n            lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n            household-co2e (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                    :year   year\n                                                                    :tonnes (double (/ tonnes (lookup-population region year)))})\n                                household-co2e)\n\n            ;; stringify the year for Vega\n            household-co2e (map #(assoc % :year (str (:year %)))\n                                household-co2e)]\n           [:div\n            [oz/vega-lite (chart-spec \"Household CO2e per citizen\" region household-co2e)\n             {:actions false}]]))\n\n(defn create []\n      [chart @state/region-holder @state/household-co2e-holder @state/population-holder])"]}