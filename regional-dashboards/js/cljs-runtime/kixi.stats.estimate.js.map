{"version":3,"sources":["kixi/stats/estimate.cljc"],"mappings":"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","names":["p__26328","map__26329","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","kixi.stats.estimate/simple-linear-regression","x-bar","y-bar","ss-x","ss-xy","sum-squares","slope","offset","js/kixi","js/kixi.stats","js/kixi.stats.estimate","js/kixi.stats.estimate.t_kixi$stats$estimate26331","kixi.stats.estimate/t_kixi$stats$estimate26331","_26333","meta26332","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","kixi.stats.estimate/->t_kixi$stats$estimate26331","_","x","p__26337","map__26338","kixi.stats.estimate/regression-standard-error","n","ss-y","kixi.stats.math/sqrt","kixi.stats.math/sq","p__26343","map__26344","kixi.stats.estimate/regression-confidence-interval","alpha","regression","y-hat","kixi.stats.protocols/measure","se","df","t-crit","kixi.stats.distribution.critical_value","kixi.stats.distribution/t","err","js/kixi.stats.estimate.t_kixi$stats$estimate26346","kixi.stats.estimate/t_kixi$stats$estimate26346","_26348","meta26347","kixi.stats.estimate/->t_kixi$stats$estimate26346","p__26349","map__26350","kixi.stats.estimate/regression-prediction-standard-error","p__26352","map__26353","kixi.stats.estimate/regression-prediction-interval","js/kixi.stats.estimate.t_kixi$stats$estimate26355","kixi.stats.estimate/t_kixi$stats$estimate26355","_26357","meta26356","kixi.stats.estimate/->t_kixi$stats$estimate26355"],"sourcesContent":["(ns kixi.stats.estimate\n  (:require [kixi.stats.distribution :as d]\n            [kixi.stats.math :refer [sq sqrt]]\n            [kixi.stats.protocols :as p]))\n\n(defn simple-linear-regression\n  [{:keys [x-bar y-bar ss-x ss-xy] :as sum-squares}]\n  (when-not (zero? ss-x)\n    (let [slope (/ ss-xy ss-x)\n          offset (- y-bar (* x-bar slope))]\n      (reify\n        p/PDependent\n        (measure [_ x]\n          (+ offset (* slope x)))\n        p/PParameterised\n        (parameters [_]\n          [offset slope])))))\n\n(defn regression-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-confidence-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n\n(defn regression-prediction-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ 1 (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-prediction-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-prediction-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n"]}