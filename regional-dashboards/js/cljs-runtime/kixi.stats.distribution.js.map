{"version":3,"sources":["kixi/stats/distribution.cljc"],"mappings":"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","names":["kixi.stats.distribution/next-rng","cljs.core.comp","cljs.core/first","clojure.test.check.random/split","p__26150","vec__26151","cljs.core.nth","kixi.stats.distribution/swap","coll","i1","i2","cljs.core.assoc","kixi.stats.distribution/rand-int","a","b","rng","r","clojure.test.check.random/rand-double","kixi.stats.distribution/rand-normal","vec__26155","r1","r2","kixi.stats.math/sqrt","kixi.stats.math/log","kixi.stats.math/cos","kixi.stats.math/PI","kixi.stats.distribution/btrd-f","k","G__26158","k'","k2'","kixi.stats.math/sq","kixi.stats.distribution/rand-binomial-btrd","n","p","G__26159","G__26160","G__26161","m","kixi.stats.math/floor","q","nr","npq","rnpq","c","alpha","vr","urvr","v","u","kixi.stats.math/abs","vec__26163","vec__26166","us","km","vec__26169","f","fx","x","i","cljs.core.reduce","cljs.core.range","t","nm","h","nk","kixi.stats.distribution/rand-binomial-binv","G__26172","G__26173","G__26174","cutoff","s","ix","kixi.stats.math/pow","G__26178","G__26179","G__26180","kixi.stats.distribution/rand-binomial","x__4214__auto__","y__4215__auto__","x__4217__auto__","y__4218__auto__","cljs.core._EQ_","kixi.stats.distribution/rand-gamma","vec__26184","vec__26187","G__26190","a1","a2","vec__26197","vec__26200","kixi.stats.distribution/rand-beta","beta","vec__26203","kixi.stats.distribution/rand-int-tuple","vec__26206","kixi.stats.distribution/shuffle","cljs.core/vector?","cljs.core/vec","cljs.core/count","clojure.test.check.random/split-n","p1__26209#","cljs.core.map","var_args","G__26212","kixi.stats.distribution/sampleable->seq","js/Error","distribution","kixi.stats.distribution.sampleable__GT_seq","clojure.test.check.random.make_random","cljs.core/LazySeq","vec__26213","cljs.core/cons","kixi.stats.protocols/sample-1","kixi.stats.distribution/default-sample-n","cljs.core.take","kixi.stats.distribution/categorical-sample","ks","ps","rem","cljs.core/seq","G__26218","G__26219","kixi.stats.distribution/->Binomial","cljs.core.concat","cljs.core.repeat","cljs.core/rest","kixi.stats.distribution/quantile-t","dof","kixi.stats.math/negative-infinity","kixi.stats.math/infinity","kixi.stats.math/ibetainv","kixi.stats.distribution/cdf-t","dof2","kixi.stats.math/ibeta","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","kixi.stats.distribution/Uniform","kixi.stats.distribution/->Uniform","this","kixi.stats.distribution/Exponential","kixi.stats.distribution/->Exponential","rate","kixi.stats.distribution/Binomial","n'","cljs.core/frequencies","kixi.stats.distribution/Bernoulli","kixi.stats.distribution/->Bernoulli","kixi.stats.distribution/Normal","kixi.stats.distribution/->Normal","mu","sd","kixi.stats.math/erf","kixi.stats.math/erfcinv","kixi.stats.distribution/T","kixi.stats.distribution/->T","vec__26220","kixi.stats.distribution/Gamma","kixi.stats.distribution/->Gamma","shape","scale","kixi.stats.distribution/Beta","kixi.stats.distribution/->Beta","kixi.stats.distribution/BetaBinomial","kixi.stats.distribution/->BetaBinomial","vec__26223","kixi.stats.distribution/ChiSquared","kixi.stats.distribution/->ChiSquared","kixi.stats.math/lower-regularized-gamma","kixi.stats.math/gamma-pinv","kixi.stats.distribution/F","kixi.stats.distribution/->F","d1","d2","vec__26226","x1","x2","kixi.stats.distribution/Poisson","kixi.stats.distribution/->Poisson","lambda","l","kixi.stats.math/exp","kixi.stats.distribution/Weibull","kixi.stats.distribution/->Weibull","kixi.stats.distribution/Categorical","kixi.stats.distribution/->Categorical","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","kixi.stats.distribution/Multinomial","kixi.stats.distribution/->Multinomial","cljs.core.conj_BANG_","kixi.stats.distribution/Dirichlet","kixi.stats.distribution/->Dirichlet","as","rs","xs","p1__26229#","p2__26230#","cljs.core.apply","cljs.core/+","p1__26231#","cljs.core.mapv","kixi.stats.distribution/DirichletMultinomial","kixi.stats.distribution/->DirichletMultinomial","vec__26232","kixi.stats.distribution/Cauchy","kixi.stats.distribution/->Cauchy","location","kixi.stats.math/tan","kixi.stats.math/atan","kixi.stats.distribution/LogNormal","kixi.stats.distribution/->LogNormal","kixi.stats.distribution/Pareto","kixi.stats.distribution/->Pareto","kixi.stats.distribution/minimum","kixi.stats.protocols/minimum","kixi.stats.distribution/maximum","kixi.stats.protocols/maximum","kixi.stats.distribution/quantile","kixi.stats.protocols/quantile","kixi.stats.distribution/cdf","kixi.stats.protocols/cdf","kixi.stats.distribution/iqr","kixi.stats.distribution/median","kixi.stats.distribution/summary","q1","q3","and__4115__auto__","p__26235","map__26236","cljs.core/hash-map","cljs.core.get","kixi.stats.distribution/uniform","p__26238","map__26239","kixi.stats.distribution/exponential","p__26241","map__26242","kixi.stats.distribution/bernoulli","p__26244","map__26245","kixi.stats.distribution/binomial","p__26247","map__26248","kixi.stats.distribution/normal","or__4126__auto__","p__26250","map__26251","kixi.stats.distribution/t","p__26253","map__26254","kixi.stats.distribution/gamma","p__26256","map__26257","kixi.stats.distribution/beta","p__26259","map__26260","kixi.stats.distribution/beta-binomial","p__26262","map__26263","kixi.stats.distribution/weibull","p__26265","map__26266","kixi.stats.distribution/chi-squared","p__26268","map__26269","kixi.stats.distribution/f","p__26271","map__26272","kixi.stats.distribution/poisson","kixi.stats.distribution/categorical","category-probs","vec__26274","cljs.core/map","cljs.core/vector","p__26277","map__26278","kixi.stats.distribution/multinomial","probs","p__26280","map__26281","kixi.stats.distribution/dirichlet","alphas","p__26283","map__26284","kixi.stats.distribution/dirichlet-multinomial","p__26286","map__26287","kixi.stats.distribution/cauchy","p__26289","map__26290","kixi.stats.distribution/log-normal","p__26292","map__26293","kixi.stats.distribution/pareto","G__26296","kixi.stats.distribution/draw","p__26297","map__26298","kixi.stats.distribution.draw","seed","G__26301","kixi.stats.distribution/sample","p__26302","map__26303","kixi.stats.distribution.sample","kixi.stats.protocols/sample-n","G__26306","kixi.stats.distribution/sample-summary","p__26307","map__26308","kixi.stats.distribution.sample_summary","kixi.stats.protocols/sample-frequencies","G__26311","kixi.stats.distribution/critical-value","kixi.stats.distribution.critical_value","tails","G__26312","cljs.core/Keyword","G__26313","G__26314","G__26315","G__26316"],"sourcesContent":["(ns kixi.stats.distribution\n  (:refer-clojure :exclude [shuffle rand-int])\n  (:require [kixi.stats.math :refer [abs pow log sqrt exp cos sin tan atan PI log-gamma sq floor erf erfcinv] :as m]\n            [kixi.stats.protocols :as p :refer [sample-1 sample-n sample-frequencies]]\n            [clojure.test.check.random :refer [make-random rand-double rand-long split split-n]]))\n\n;;;; Randomness helpers\n\n(def ^:no-doc next-rng\n  (comp first split))\n\n(defn ^:no-doc swap\n  [coll [i1 i2]]\n  (assoc coll i2 (coll i1) i1 (coll i2)))\n\n(defn ^:no-doc rand-int\n  [a b rng]\n  (let [r (* (rand-double rng) (- b a))]\n    (int (+ a r))))\n\n(defn ^:no-doc rand-normal\n  [rng]\n  (let [[r1 r2] (split rng)]\n    (* (sqrt (* -2 (log (rand-double r1))))\n       (cos (* 2 PI (rand-double r2))))))\n\n(defn ^:no-doc btrd-f\n  [k]\n  (case k\n    0 0.08106146679532726\n    1 0.04134069595540929\n    2 0.02767792568499834\n    3 0.02079067210376509\n    4 0.01664469118982119\n    5 0.01387612882307075\n    6 0.01189670994589177\n    7 0.01041126526197209\n    8 0.009255462182712733\n    9 0.008330563433362871\n    (let [k' (inc k) k2' (sq k')]\n      (double (/ (- 0.08333333333333333\n                    (/ (- 0.002777777777777778\n                          (/ 7.936507936507937E-4 k2')) k2')) k')))))\n\n(defn ^:no-doc rand-binomial-btrd\n  \"Algorithm BTRD from \\\"The Generation of Binomial Random Variates\\\", Wolfgang Hormann, p6\"\n  [n p rng]\n  (if (> p 0.5)\n    (- n (rand-binomial-btrd n (- 1 p) rng))\n    (let [m (int (floor (* (inc n) p)))\n          q (- 1 p)\n          r (/ p q)\n          nr (* (inc n) r)\n          npq (* n p q)\n          rnpq (sqrt npq)\n          b (+ 1.15 (* 2.53 rnpq))\n          a (+ -0.0873 (* 0.0248 b) (* 0.01 p))\n          c (+ (* n p) 0.5)\n          alpha (* (+ 2.83 (/ 5.1 b)) rnpq)\n          vr (- 0.92 (/ 4.2 b))\n          urvr (* 0.86 vr)]\n      ;; 1\n      (loop [rng rng]\n        (let [v (rand-double rng)]\n          (if (<= v urvr)\n            (let [u (- (/ v vr) 0.43)]\n              (int (floor (+ (* (+ (/ (* 2 a) (- 0.5 (abs u))) b) u) c))))\n            (let [[r1 r2] (split rng)\n                  ;; 2\n                  [u v] (if (>= v vr)\n                          [(- (rand-double r1) 0.5) v]\n                          (let [u (- (/ v vr) 0.93)]\n                            [(- (* 0.5 (if (pos? u) 1 -1)) u) (* (rand-double r1) vr)]))\n                  ;; 3\n                  us (- 0.5 (abs u))\n                  k (int (floor (+ (* (+ (* 2 (/ a us)) b) u) c)))]\n              (if (<= 0 k n)\n                (let [v (* v (/ alpha (+ (/ a (sq us)) b)))\n                      km (abs (- k m))]\n                  (if (<= km 15)\n                    ;; 3.1\n                    (let [f 1.0\n                          fx (fn [x i] (* x (- (/ nr (inc i)) r)))\n                          [f v] (if (< m k)\n                                  [(reduce fx f (range m k)) v]\n                                  [f (reduce fx v (range k m))])]\n                      (if (<= v f) k (recur r2)))\n                    ;; 3.2\n                    (let [v (log v)\n                          p (* (/ km npq) (+ (/ (+ (* (+ (/ km 3) 0.625) km) 0.1666666666666667) npq) 0.5))\n                          t (/ (* (- km) km) (* 2 npq))]\n                      (cond\n                        (< v (- t p)) k\n                        (> v (+ t p)) (recur r2)\n                        :else\n                        ;; 3.3\n                        (let [nm (inc (- n m))\n                              h (+ (* (+ m 0.5) (log (/ (inc m) (* r nm)))) (btrd-f m) (btrd-f (- n m)))\n                              ;; 3.4\n                              nk (inc (- n k))]\n                          (if (<= v (+ h\n                                       (* (inc n) (log (/ nm nk)))\n                                       (* (+ k 0.5) (log (/ (* nk r) (inc k))))\n                                       (- (btrd-f k))\n                                       (- (btrd-f (- n k)))))\n                            k\n                            (recur r2)))))))\n                (recur r2)))))))))\n\n(defn ^:no-doc rand-binomial-binv\n  [n p rng]\n  (if (> p 0.5)\n    (- n (rand-binomial-binv n (- 1 p) rng))\n    (let [cutoff 110\n          q (- 1 p)\n          s (/ p q)]\n      (loop [ix 0 f (pow q n) u (rand-double rng)]\n        (cond\n          (< u f) ix\n          (>= ix cutoff) (rand-binomial-binv n p (next-rng rng))\n          :else (recur (inc ix) (* f s (/ (- n ix) (inc ix))) (- u f)))))))\n\n(defn ^:no-doc rand-binomial\n  [n p rng]\n  (let [p (max 0.0 (min p 1.0))]\n    (cond\n      (= p 0.0) 0\n      (= p 1.0) n\n      (< (* n p) 14) (rand-binomial-binv n p rng)\n      :else (rand-binomial-btrd n p rng))))\n\n(defn ^:no-doc rand-gamma\n  [k rng]\n  (let [k' (cond-> k (< 1) inc)\n        a1 (- k' (/ 1 3))\n        a2 (/ 1 (sqrt (* 9 a1)))\n        [r1 r2] (split rng)\n        [v u] (loop [rng r1]\n                (let [[r1 r2] (split rng)\n                      [x v] (loop [rng r2]\n                              (let [x (rand-normal rng)\n                                    v (+ 1 (* a2 x))]\n                                (if (<= v 0)\n                                  (recur (next-rng rng))\n                                  [x v])))\n                      v (* v v v)\n                      u (rand-double r1)]\n                  (if (and (> u (- 1 (* 0.331 (pow x 4))))\n                           (> (log u) (+ (* 0.5 x x)\n                                         (* a1 (+ 1 (- v) (log v))))))\n                    (recur (next-rng r1))\n                    [v u])))]\n    (if (= k k')\n      (* a1 v)\n      (* (pow (loop [rng r2]\n                (let [r (rand-double rng)]\n                  (if (> r 0) r\n                      (recur (next-rng rng)))))\n              (/ 1 k))\n         a1 v))))\n\n(defn ^:no-doc rand-beta\n  [alpha beta rng]\n  (let [[r1 r2] (split rng)\n        u (rand-gamma alpha r1)]\n    (/ u (+ u (rand-gamma beta r2)))))\n\n(defn ^:no-doc rand-int-tuple\n  [a b rng]\n  (let [[r1 r2] (split rng)]\n    [(rand-int a b r1) (rand-int a b r2)]))\n\n(defn ^:no-doc shuffle\n  [coll rng]\n  (let [coll (if (vector? coll) coll (vec coll))\n        n (count coll)]\n    (->> (split-n rng (rand-int 0 (* 2 n) rng))\n         (map #(rand-int-tuple 0 n %))\n         (reduce swap coll))))\n\n\n;;;; Protocol helpers\n\n(defn ^:no-doc sampleable->seq\n  ([^kixi.stats.protocols.PRandomVariable distribution]\n   (sampleable->seq distribution (make-random)))\n  ([^kixi.stats.protocols.PRandomVariable distribution rng]\n   (lazy-seq\n    (let [[r1 r2] (split rng)]\n      (cons (sample-1 distribution r1)\n            (sampleable->seq distribution r2))))))\n\n(defn ^:no-doc default-sample-n\n  [^kixi.stats.protocols.PRandomVariable distribution n rng]\n  (take n (sampleable->seq distribution rng)))\n\n(declare ->Binomial)\n\n(defn ^:no-doc categorical-sample\n  [ks ps n rng]\n  (loop [coll '() n n\n         rem 1 rng rng\n         ks ks ps ps]\n    (if (and (seq ks) (> rem 0))\n      (let [k (first ks)\n            p (first ps)\n            x (sample-1 (->Binomial n (/ p rem)) rng)]\n        (recur (concat coll (repeat x k)) (- n x)\n               (- rem p) (next-rng rng)\n               (rest ks) (rest ps)))\n      coll)))\n\n(defn ^:no-doc quantile-t\n  [dof p]\n  (cond\n    (<= p 0.0) m/negative-infinity\n    (>= p 1.0) m/infinity\n    :else\n    (let [x (m/ibetainv (* 2 (min p (- 1 p)))\n                        (* 0.5 dof)\n                        0.5)\n          x (sqrt (* dof (/ (- 1 x) x)))]\n      (if (> p 0.5) x (- x)))))\n\n(defn ^:no-doc cdf-t\n  [dof x]\n  (cond\n    (= x m/negative-infinity) 0.0\n    (= x m/infinity) 1.0\n    :else\n    (let [dof2 (* dof 0.5)]\n      (m/ibeta (/ (+ x (sqrt (+ (sq x) dof)))\n                  (* 2 (sqrt (+ (sq x) dof))))\n               dof2 dof2))))\n\n\n;;;; Protocol implementations\n\n(deftype ^:no-doc Uniform\n    [a b]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (+ (* (rand-double rng) (- b a)) a))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Exponential\n    [rate]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (/ (- (log (rand-double rng))) rate))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Binomial\n    [n p]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (rand-binomial n p rng))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n' rng]\n      (-> (sample-n this n' rng)\n          (frequencies)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Bernoulli\n    [p]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (< (rand-double rng) p))\n    (sample-n [this n rng]\n      (let [v (sample-1 (->Binomial n p) rng)]\n        (-> (concat (repeat v true)\n                    (repeat (- n v) false))\n            (shuffle rng))))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (let [v (sample-1 (->Binomial n p) rng)]\n        {true v false (- n v)}))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Normal\n    [mu sd]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (+ (* (rand-normal rng) sd) mu))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (* 0.5 (+ 1 (erf (/ (- x mu)\n                          (sqrt (* 2 sd sd)))))))\n    (quantile [this p]\n      (+ (* -1.41421356237309505 sd (erfcinv (* 2 p))) mu))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc T\n    [dof]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)]\n        (* (rand-normal r1)\n           (sqrt (/ dof (* 2 (rand-gamma (* 0.5 dof) r2)))))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (cdf-t dof x))\n    (quantile [this p]\n      (quantile-t dof p))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Gamma\n    [shape scale]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (rand-gamma shape rng) scale))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Beta\n    [alpha beta]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (rand-beta alpha beta rng))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc BetaBinomial\n    [n alpha beta]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            p (rand-beta alpha beta r1)]\n        (rand-binomial n p r2)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc ChiSquared\n    [k]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (rand-gamma (/ k 2) rng) 2))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (m/lower-regularized-gamma (* 0.5 k) (* 0.5 x)))\n    (quantile [this p]\n      (* 2.0 (m/gamma-pinv p (* 0.5 k))))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc F\n    [d1 d2]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            x1 (* (rand-gamma (/ d1 2) r1) 2)\n            x2 (* (rand-gamma (/ d2 2) r2) 2)]\n        (/ (/ x1 d1) (/ x2 d2))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Poisson\n    [lambda]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [l (exp (- lambda))]\n        (loop [p 1 k 0 rng rng]\n          (let [p (* p (rand-double rng))]\n            (if (> p l)\n              (recur p (inc k) (next-rng rng))\n              k)))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Weibull\n    [shape scale]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (pow (- (log (rand-double rng)))\n              (/ 1 shape))\n         scale))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Categorical\n    [ks ps]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (first (categorical-sample ks ps 1 rng)))\n    (sample-n [this n rng]\n      (shuffle (categorical-sample ks ps n rng) rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (loop [coll (transient {}) n n\n             rem 1 rng rng\n             ks ks ps ps]\n        (if (and (seq ks) (pos? rem))\n          (let [k (first ks)\n                p (first ps)\n                x (rand-binomial n (/ p rem) rng)]\n            (recur (assoc! coll k x) (- n x)\n                   (- rem p) (next-rng rng)\n                   (rest ks) (rest ps)))\n          (persistent! coll))))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Multinomial\n    [n ps]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (loop [coll (transient []) n n\n             rem 1 rng rng\n             ps ps]\n        (if (and (seq ps) (pos? rem))\n          (let [p (first ps)\n                x (rand-binomial n (/ p rem) rng)]\n            (recur (conj! coll x) (- n x)\n                   (- rem p) (next-rng rng)\n                   (rest ps)))\n          (persistent! coll))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (frequencies (sample-n this n rng)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Dirichlet\n    [as]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [rs (split-n rng (count as))\n            xs (map #(rand-gamma %1 %2) as rs)\n            s (apply + xs)]\n        (mapv #(/ % s) xs)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc DirichletMultinomial\n    [n as]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            ps (sample-1 (->Dirichlet as) r1)]\n        (sample-1 (->Multinomial n ps) r2)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (frequencies (sample-n this n rng)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Cauchy\n  [location scale]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (+ location (* scale (tan (* PI (- (rand-double rng) 0.5))))))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (+ 0.5 (/ (atan (/ (- x location) scale)) PI)))\n  (quantile [this p]\n    (+ location (* scale (tan (* PI (- p 0.5))))))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc LogNormal\n  [mu sd]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (exp (+ (* (rand-normal rng) sd) mu)))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (* 0.5 (+ 1 (erf (/ (- (log x) mu)\n                           (sqrt (* 2 sd sd)))))))\n  (quantile [this p]\n    (exp (+ (* -1.41421356237309505 sd (erfcinv (* 2 p))) mu)))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Pareto\n  [scale shape]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (/ scale (pow (rand-double rng) (/ 1 shape))))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (if (< scale x)\n      (- 1 (pow (/ scale x) shape))\n      0.0))\n  (quantile [this p]\n    (/ scale (pow (- 1 p) (/ 1 shape))))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n;;;; Public API\n\n(def minimum p/minimum)\n\n(def maximum p/maximum)\n\n(def quantile p/quantile)\n\n(def cdf p/cdf)\n\n(defn iqr\n  \"Returns the interquartile range\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (- (quantile distribution 0.75)\n     (quantile distribution 0.25)))\n\n(defn median\n  \"Returns the median\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (quantile distribution 0.5))\n\n(defn summary\n  \"Returns the 5-number distribution summary\n  and the interquartile range.\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (let [q1 (quantile distribution 0.25)\n        q3 (quantile distribution 0.75)]\n    {:min (minimum distribution)\n     :q1 q1\n     :median (quantile distribution 0.5)\n     :q3 q3\n     :max (maximum distribution)\n     :iqr (when (and q1 q3) (- q3 q1))}))\n\n(defn uniform\n  \"Returns a uniform distribution.\n  Params: {:a \u2208 \u211d, :b \u2208 \u211d}\"\n  [{:keys [a b]}]\n  (->Uniform a b))\n\n(defn exponential\n  \"Returns an exponential distribution.\n  Params: {:rate \u2208 \u211d > 0}\"\n  [{:keys [rate]}]\n  (->Exponential rate))\n\n(defn bernoulli\n  \"Returns a Bernoulli distribution.\n  Params: {:p \u2208 [0 1]}\"\n  [{:keys [p]}]\n  (->Bernoulli p))\n\n(defn binomial\n  \"Return a binomial distribution.\n  Params: {:n \u2208 \u2115, :p \u2208 [0 1]}\"\n  [{:keys [n p]}]\n  (->Binomial n p))\n\n(defn normal\n  \"Returns a normal distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d}\"\n  [{:keys [location scale mu sd]}]\n  (->Normal (or location mu) (or scale sd)))\n\n(defn t\n  \"Returns a t distribution.\n  Params: {:v \u2208 \u2115 > 0}\"\n  [{:keys [v]}]\n  (->T v))\n\n(defn gamma\n  \"Returns a gamma distribution.\n  Params: {:shape \u2208 \u211d, :scale \u2208 \u211d} or {:shape \u2208 \u211d, :rate \u2208 \u211d}\"\n  [{:keys [shape scale rate] :or {shape 1.0}}]\n  (->Gamma shape (or scale (/ 1.0 rate))))\n\n(defn beta\n  \"Returns a beta distribution.\n  Params: {:alpha \u2208 \u211d, :beta \u2208 \u211d}\"\n  [{:keys [alpha beta] :or {alpha 1.0 beta 1.0}}]\n  (->Beta alpha beta))\n\n(defn beta-binomial\n  \"Returns a beta distribution.\n  Params: {:n \u2208 \u2115 > 0, :alpha \u2208 \u211d > 0, :beta \u2208 \u211d > 0}\"\n  [{:keys [n alpha beta] :or {alpha 1.0 beta 1.0}}]\n  (->BetaBinomial n alpha beta))\n\n(defn weibull\n  \"Returns a weibull distribution.\n  Params: {:shape \u2208 \u211d >= 0, :scale \u2208 \u211d >= 0}\"\n  [{:keys [shape scale] :or {shape 1.0 scale 1.0}}]\n  (->Weibull shape scale))\n\n(defn chi-squared\n  \"Returns a chi-squared distribution.\n  Params: {:k \u2208 \u2115 > 0}\"\n  [{:keys [k]}]\n  (->ChiSquared k))\n\n(defn f\n  \"Returns an F distribution.\n  Params: {:d1 \u2208 \u2115 > 0, :d2 \u2208 \u2115 > 0}\"\n  [{:keys [d1 d2]}]\n  (->F d1 d2))\n\n(defn poisson\n  \"Returns a Poisson distribution.\n  Params: {:lambda \u2208 \u211d > 0}\"\n  [{:keys [lambda]}]\n  (->Poisson lambda))\n\n(defn categorical\n  \"Returns a categorical distribution.\n  Params: {[category] [probability], ...}\n  Probabilities should be >= 0 and sum to 1\"\n  [category-probs]\n  (let [[ks ps] (apply map vector category-probs)]\n    (->Categorical ks ps)))\n\n(defn multinomial\n  \"Returns a multinomial distribution.\n  Params: {:n \u2208 \u2115 > 0, :probs [\u211d >= 0, ...]}\n  Probabilities should be >= 0 and sum to 1\"\n  [{:keys [n probs]}]\n  (->Multinomial n probs))\n\n(defn dirichlet\n  \"Returns a Dirichlet distribution.\n  Params: {:alphas [\u211d >= 0, ...]}\"\n  [{:keys [alphas]}]\n  (->Dirichlet alphas))\n\n(defn dirichlet-multinomial\n  \"Returns a Dirichlet-multinomial distribution.\n  Params: {:n \u2208 \u2115, :alphas [\u211d >= 0, ...]}\"\n  [{:keys [n alphas]}]\n  (->DirichletMultinomial n alphas))\n\n(defn cauchy\n  \"Returns a Cauchy distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d > 0}\"\n  [{:keys [location scale]}]\n  (assert (pos? scale) (str \"Scale (\" scale \") must be positive\"))\n  (->Cauchy location scale))\n\n(defn log-normal\n  \"Returns a Log-normal distribution.\n  The parameters are the log of the\n  mean and sd of this distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d}\"\n  [{:keys [location scale mu sd]}]\n  (->LogNormal (or location mu) (or scale sd)))\n\n(defn pareto\n  \"Returns a Pareto distribution.\n  Params: {:scale \u2208 \u211d > 0, :shape \u2208 \u211d > 0}\"\n  [{:keys [scale shape]}]\n  (assert (and (pos? scale) (pos? shape))\n          (str \"Scale (\" scale \") and shape (\" shape \") must be positive.\"))\n  (->Pareto scale shape))\n\n(defn draw\n  \"Returns a single variate from the distribution.\n  An optional seed long will ensure deterministic results\"\n  ([^kixi.stats.protocols.PRandomVariable distribution]\n   (draw distribution {}))\n  ([^kixi.stats.protocols.PRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-1 distribution rng))))\n\n(defn sample\n  \"Returns n variates from the distribution.\n  An optional seed long will ensure deterministic results\"\n  ([n ^kixi.stats.protocols.PRandomVariable distribution]\n   (sample n distribution {}))\n  ([n ^kixi.stats.protocols.PRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-n distribution n rng))))\n\n(defn sample-summary\n  \"Returns a summary count of each variate for a sample\n  of a given length from a discrete distribution\n  such as the Bernoulli, binomial or categorical.\n  An optional seed long will ensure deterministic results\"\n  ([n ^kixi.stats.protocols.PDiscreteRandomVariable distribution]\n   (sample-summary n distribution {}))\n  ([n ^kixi.stats.protocols.PDiscreteRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-frequencies distribution n rng))))\n\n(defn critical-value\n  ([^kixi.stats.protocols.PQuantile distribution]\n   (critical-value distribution 0.05))\n  ([^kixi.stats.protocols.PQuantile distribution alpha]\n   (critical-value distribution alpha :<>))\n  ([^kixi.stats.protocols.PQuantile distribution alpha tails]\n   (case tails\n     :<> (quantile distribution (- 1 (* 0.5 alpha)))\n     :<  (quantile distribution alpha)\n     :>  (quantile distribution (- 1 alpha)))))\n"]}