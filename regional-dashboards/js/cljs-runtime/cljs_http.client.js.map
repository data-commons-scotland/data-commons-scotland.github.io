{"version":3,"sources":["cljs_http/client.cljs"],"mappings":"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","names":["cljs-http.client/if-pos","v","and__4115__auto__","cljs-http.client/parse-query-params","s","clojure.string/blank?","p1__26340#","p2__26339#","cljs.core.reduce","vec__26341","cljs.core.nth","k","clojure.string.split","cljs.core.assoc","cljs.core.keyword","no.en.core/url-decode","cljs-http.client/parse-url","url","uri","goog.Uri/parse","query-data","cljs.core/not","cljs-http.client/unexceptional-status?","cljs-http.client/encode-val","no.en.core/url-encode","cljs.core/name","cljs-http.client/encode-vals","vs","p1__26344#","cljs.core.map","clojure.string.join","p__26345","vec__26346","cljs-http.client/encode-param","cljs.core/coll?","cljs-http.client/generate-query-string","params","cljs-http.client/regex-char-esc-smap","esc-chars","cljs.core/zipmap","p1__26349#","cljs-http.client/escape-special","string","cljs.core.replace","cljs.core/str","cljs-http.client/decode-body","response","decode-fn","content-type","request-method","cljs.core.not_EQ_","cljs.core/re-find","cljs.core/re-pattern","cljs.core.get","cljs.core.update_in","cljs-http.client/wrap-edn-params","client","request","temp__5733__auto__","headers","cljs.core.merge","cljs.core.dissoc","cljs.core.pr_str","G__26350","cljs-http.client/wrap-edn-response","p1__26352#","cljs.reader/read-string","cljs.core.async.map","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","cljs-http.client/wrap-default-headers","p__26362","vec__26363","seq26357","G__26358","cljs.core/first","cljs.core/next","self__4723__auto__","default-headers","or__4126__auto__","G__26366","cljs-http.client/wrap-accept","p__26371","vec__26372","seq26369","G__26370","accept","G__26378","cljs.core/assoc-in","cljs-http.client/wrap-content-type","p__26381","vec__26382","seq26379","G__26380","G__26385","cljs-http.client/default-transit-opts","cljs-http.client/wrap-transit-params","map__26386","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","encoding","encoding-opts","cljs-http.util/transit-encode","G__26388","cljs-http.client/wrap-transit-response","map__26391","p1__26389#","decoding","decoding-opts","transit-decode","cljs-http.util/transit-decode","p1__26390#","cljs-http.client/wrap-json-params","cljs-http.util/json-encode","G__26393","cljs-http.client/wrap-json-response","p1__26394#","cljs-http.util/json-decode","cljs-http.client/wrap-query-params","p__26395","map__26396","query-params","req","G__26398","cljs-http.client/wrap-form-params","p__26399","map__26400","form-params","fexpr__26402","G__26403","cljs-http.client/generate-form-data","form-data","js/FormData","seq__26404","cljs.core/seq","chunk__26405","count__26406","i__26407","vec__26414","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__26417","cljs.core/second","cljs-http.client/wrap-multipart-params","p__26420","map__26421","multipart-params","fexpr__26423","G__26424","cljs-http.client/wrap-method","m","G__26425","p1__26426#","cljs-http.client/wrap-server-name","server-name","G__26427","cljs-http.client/wrap-url","p__26429","map__26430","spec","G__26432","p1__26428#","cljs-http.client/wrap-basic-auth","p__26435","vec__26436","seq26433","G__26434","credentials","cljs.core/empty?","G__26439","cljs-http.util/basic-auth","cljs-http.client/wrap-oauth","oauth-token","G__26440","cljs-http.client/wrap-channel-from-request-map","custom-channel","cljs.core.async.pipe","cljs-http.client/wrap-request","cljs-http.client/request","cljs-http.core/request","cljs-http.client/delete","p__26443","vec__26444","seq26441","G__26442","cljs-http.client/get","p__26449","vec__26450","seq26447","G__26448","cljs-http.client/head","p__26455","vec__26456","seq26453","G__26454","cljs-http.client/jsonp","p__26461","vec__26462","seq26459","G__26460","cljs-http.client/move","p__26467","vec__26468","seq26465","G__26466","cljs-http.client/options","p__26473","vec__26474","seq26471","G__26472","cljs-http.client/patch","p__26479","vec__26480","seq26477","G__26478","cljs-http.client/post","p__26485","vec__26486","seq26483","G__26484","cljs-http.client/put","p__26491","vec__26492","seq26489","G__26490"],"sourcesContent":["(ns cljs-http.client\n  (:refer-clojure :exclude [get])\n  (:require [cljs-http.core :as core]\n            [cljs-http.util :as util]\n            [cljs.core.async :as async :refer [<! chan close! put!]]\n            [cljs.reader :refer [read-string]]\n            [clojure.string :refer [blank? join split]]\n            [goog.Uri :as uri]\n            [no.en.core :refer [url-encode url-decode]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defn if-pos [v]\n  (if (and v (pos? v)) v))\n\n(defn parse-query-params\n  \"Parse `s` as query params and return a hash map.\"\n  [s]\n  (if-not (blank? s)\n    (reduce\n     #(let [[k v] (split %2 #\"=\")]\n        (assoc %1\n          (keyword (url-decode k))\n          (url-decode v)))\n     {} (split (str s) #\"&\"))))\n\n(defn parse-url\n  \"Parse `url` into a hash map.\"\n  [url]\n  (if-not (blank? url)\n    (let [uri (uri/parse url)\n          query-data (.getQueryData uri)]\n      {:scheme (keyword (.getScheme uri))\n       :server-name (.getDomain uri)\n       :server-port (if-pos (.getPort uri))\n       :uri (.getPath uri)\n       :query-string (if-not (.isEmpty query-data)\n                       (str query-data))\n       :query-params (if-not (.isEmpty query-data)\n                       (parse-query-params (str query-data)))})))\n\n(def unexceptional-status?\n  #{200 201 202 203 204 205 206 207 300 301 302 303 307})\n\n(defn- encode-val [k v]\n  (str (url-encode (name k)) \"=\" (url-encode (str v))))\n\n(defn- encode-vals [k vs]\n  (->>\n    vs\n    (map #(encode-val k %))\n    (join \"&\")))\n\n(defn- encode-param [[k v]]\n  (if (coll? v)\n    (encode-vals k v)\n    (encode-val k v)))\n\n(defn generate-query-string [params]\n  (->>\n    params\n    (map encode-param)\n    (join \"&\")))\n\n(def regex-char-esc-smap\n  (let [esc-chars \"()*&^%$#!+\"]\n    (zipmap esc-chars\n            (map #(str \"\\\\\" %) esc-chars))))\n\n(defn escape-special\n  \"Escape special characters -- for content-type.\"\n  [string]\n  (->> string\n       (replace regex-char-esc-smap)\n       (reduce str)))\n\n(defn decode-body\n  \"Decocde the :body of `response` with `decode-fn` if the content type matches.\"\n  [response decode-fn content-type request-method]\n  (if (and (not= :head request-method)\n           (not= 204 (:status response))\n           (re-find (re-pattern (str \"(?i)\" (escape-special content-type)))\n                    (str (clojure.core/get (:headers response) \"content-type\" \"\"))))\n    (update-in response [:body] decode-fn)\n    response))\n\n(defn wrap-edn-params\n  \"Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header.\"\n  [client]\n  (fn [request]\n    (if-let [params (:edn-params request)]\n      (let [headers (merge {\"content-type\" \"application/edn\"} (:headers request))]\n        (-> (dissoc request :edn-params)\n            (assoc :body (pr-str params))\n            (assoc :headers headers)\n            (client)))\n      (client request))))\n\n(defn wrap-edn-response\n  \"Decode application/edn responses.\"\n  [client]\n  (fn [request]\n    (-> #(decode-body % read-string \"application/edn\" (:request-method request))\n        (async/map [(client request)]))))\n\n(defn wrap-default-headers\n  [client & [default-headers]]\n  (fn [request]\n    (if-let [default-headers (or (:default-headers request) default-headers)]\n      (client (assoc request :default-headers default-headers))\n      (client request))))\n\n(defn wrap-accept\n  [client & [accept]]\n  (fn [request]\n    (if-let [accept (or (:accept request) accept)]\n      (client (assoc-in request [:headers \"accept\"] accept))\n      (client request))))\n\n(defn wrap-content-type\n  [client & [content-type]]\n  (fn [request]\n    (if-let [content-type (or (:content-type request) content-type)]\n      (client (assoc-in request [:headers \"content-type\"] content-type))\n      (client request))))\n\n(def ^{:private true} default-transit-opts\n  {:encoding :json :encoding-opts {}\n   :decoding :json :decoding-opts {}})\n\n(defn wrap-transit-params\n  \"Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively.\"\n  [client]\n  (fn [request]\n    (if-let [params (:transit-params request)]\n      (let [{:keys [encoding encoding-opts]} (merge default-transit-opts\n                                                    (:transit-opts request))\n            headers (merge {\"content-type\" \"application/transit+json\"} (:headers request))]\n        (-> (dissoc request :transit-params)\n            (assoc :body (util/transit-encode params encoding encoding-opts))\n            (assoc :headers headers)\n            (client)))\n      (client request))))\n\n(defn wrap-transit-response\n  \"Decode application/transit+json responses.\"\n  [client]\n  (fn [request]\n    (let [{:keys [decoding decoding-opts]} (merge default-transit-opts\n                                                  (:transit-opts request))\n          transit-decode #(util/transit-decode % decoding decoding-opts)]\n\n      (-> #(decode-body % transit-decode \"application/transit+json\" (:request-method request))\n          (async/map [(client request)])))))\n\n(defn wrap-json-params\n  \"Encode :json-params in the `request` :body and set the appropriate\n  Content Type header.\"\n  [client]\n  (fn [request]\n    (if-let [params (:json-params request)]\n      (let [headers (merge {\"content-type\" \"application/json\"} (:headers request))]\n        (-> (dissoc request :json-params)\n            (assoc :body (util/json-encode params))\n            (assoc :headers headers)\n            (client)))\n      (client request))))\n\n(defn wrap-json-response\n  \"Decode application/json responses.\"\n  [client]\n  (fn [request]\n    (-> #(decode-body % util/json-decode \"application/json\" (:request-method request))\n        (async/map [(client request)]))))\n\n(defn wrap-query-params [client]\n  (fn [{:keys [query-params] :as req}]\n    (if query-params\n      (client (-> req (dissoc :query-params)\n                  (assoc :query-string\n                    (generate-query-string query-params))))\n      (client req))))\n\n(defn wrap-form-params [client]\n  (fn [{:keys [form-params request-method headers] :as request}]\n    (if (and form-params (#{:post :put :patch :delete} request-method))\n      (let [headers (merge {\"content-type\" \"application/x-www-form-urlencoded\"} headers)]\n        (client (-> request\n                    (dissoc :form-params)\n                    (assoc :body (generate-query-string form-params))\n                    (assoc :headers headers))))\n      (client request))))\n\n(defn generate-form-data [params]\n  (let [form-data (js/FormData.)]\n    (doseq [[k v] params]\n      (if (coll? v)\n        (.append form-data (name k) (first v) (second v))\n        (.append form-data (name k) v)))\n    form-data))\n\n(defn wrap-multipart-params [client]\n  (fn [{:keys [multipart-params request-method] :as request}]\n    (if (and multipart-params (#{:post :put :patch :delete} request-method))\n      (client (-> request\n                  (dissoc :multipart-params)\n                  (assoc :body (generate-form-data multipart-params))))\n      (client request))))\n\n(defn wrap-method [client]\n  (fn [req]\n    (if-let [m (:method req)]\n      (client (-> req (dissoc :method)\n                  (assoc :request-method m)))\n      (client req))))\n\n(defn wrap-server-name [client server-name]\n  #(client (assoc %1 :server-name server-name)))\n\n(defn wrap-url [client]\n  (fn [{:keys [query-params] :as req}]\n    (if-let [spec (parse-url (:url req))]\n      (client (-> (merge req spec)\n                  (dissoc :url)\n                  (update-in [:query-params] #(merge %1 query-params))))\n      (client req))))\n\n(defn wrap-basic-auth\n  \"Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.\"\n  [client & [credentials]]\n  (fn [req]\n    (let [credentials (or (:basic-auth req) credentials)]\n      (if-not (empty? credentials)\n        (client (-> (dissoc req :basic-auth)\n                    (assoc-in [:headers \"authorization\"] (util/basic-auth credentials))))\n        (client req)))))\n\n(defn wrap-oauth\n  \"Middleware converting the :oauth-token option into an Authorization header.\"\n  [client]\n  (fn [req]\n    (if-let [oauth-token (:oauth-token req)]\n      (client (-> req (dissoc :oauth-token)\n                  (assoc-in [:headers \"authorization\"]\n                            (str \"Bearer \" oauth-token))))\n      (client req))))\n\n(defn wrap-channel-from-request-map\n  \"Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)\"\n  [client]\n  (fn [request]\n    (if-let [custom-channel (:channel request)]\n      (async/pipe (client request) custom-channel)\n      (client request))))\n\n(defn wrap-request\n  \"Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/request\"\n  [request]\n  (-> request\n      wrap-accept\n      wrap-form-params\n      wrap-multipart-params\n      wrap-edn-params\n      wrap-edn-response\n      wrap-transit-params\n      wrap-transit-response\n      wrap-json-params\n      wrap-json-response\n      wrap-content-type\n      wrap-query-params\n      wrap-basic-auth\n      wrap-oauth\n      wrap-method\n      wrap-url\n      wrap-channel-from-request-map\n      wrap-default-headers))\n\n(def #^{:doc\n        \"Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params\"}\n  request (wrap-request core/request))\n\n(defn delete\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :delete :url url})))\n\n(defn get\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :get :url url})))\n\n(defn head\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :head :url url})))\n\n(defn jsonp\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :jsonp :url url})))\n\n(defn move\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :move :url url})))\n\n(defn options\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :options :url url})))\n\n(defn patch\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :patch :url url})))\n\n(defn post\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :post :url url})))\n\n(defn put\n  \"Like #'request, but sets the :method and :url as appropriate.\"\n  [url & [req]]\n  (request (merge req {:method :put :url url})))\n\n(comment\n\n  (ns example.core\n    (:require [cljs-http.client :as http]\n              [cljs.core.async :refer [<!]])\n    (:require-macros [cljs.core.async.macros :refer [go]]))\n\n  (go (prn (map :login (:body (<! (get \"https://api.github.com/users\"))))))\n\n  (go (prn (:status (<! (get \"http://api.burningswell.dev/continents\")))))\n\n  (go (prn (map :name (:body (<! (get \"http://api.burningswell.dev/continents\"))))))\n\n  (go (let [response (<! (get \"https://api.github.com/users\"))]\n        (prn (:status response))\n        (prn (map :login (:body response)))))\n\n  (go (prn (<! (get \"http://api.burningswell.dev/continents\")))))\n"]}