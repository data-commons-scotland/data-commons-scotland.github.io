{"version":3,"sources":["cljs_http/core.cljs"],"mappings":"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","names":["cljs-http.core/pending-requests","cljs.core.atom","cljs-http.core/abort!","channel","temp__5735__auto__","req","fexpr__37365","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/dissoc","cljs.core.async/close!","cljs-http.core/aborted?","xhr","cljs.core._EQ_","js/goog.net.ErrorCode.ABORT","cljs-http.core/apply-default-headers!","headers","formatted-h","cljs.core/zipmap","cljs.core.map","cljs-http.util/camelize","cljs.core/keys","cljs.core/vals","cljs.core.dorun","p__37366","vec__37367","cljs.core.nth","k","v","cljs-http.core/apply-response-type!","response-type","G__37370","js/Error","goog.net.XhrIo/ResponseType","p__37371","map__37373","cljs.core/--destructure-map","cljs.core.get","cljs-http.core/build-xhr","with-credentials?","default-headers","request","timeout","or__4160__auto__","send-credentials","G__37374","js/goog.net.XhrIo","cljs-http.core/error-kw","p__37378","map__37379","cljs-http.core/xhr","request-method","body","cancel","cljs.core.async.chan","request-url","cljs-http.util/build-url","method","cljs.core/name","cljs-http.util/build-headers","cljs.core/assoc","goog.net.EventType/COMPLETE","evt","target","response","cljs-http.util/parse-headers","G__37385","cljs.core.async.put_BANG_","c__30267__auto__","cljs.core.async.impl.dispatch/run","f__30268__auto__","switch__30235__auto__","state_37396","state_val_37397","cljs.core.async.impl.ioc-helpers/take!","inst_37387","inst_37388","inst_37389","statearr-37398","statearr-37399","statearr-37400","inst_37391","statearr-37401","statearr-37402","inst_37394","cljs.core.async.impl.ioc-helpers/return-chan","statearr-37403","state-machine__30236__auto__","ret-value__30237__auto__","result__30238__auto__","cljs.core/keyword-identical?","ex__30239__auto__","e37404","statearr-37405","cljs.core/seq","statearr-37406","cljs.core/first","state__30269__auto__","statearr-37407","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/not","p__37408","map__37409","cljs-http.core/jsonp","callback-name","keywordize-keys?","jsonp","js/goog.net.Jsonp","data","cljs.core.js__GT_clj","state_37414","state_val_37415","inst_37411","inst_37412","statearr-37416","statearr-37417","e37418","statearr-37419","statearr-37420","statearr-37421","p__37422","map__37423","cljs-http.core/request"],"sourcesContent":["(ns cljs-http.core\n  (:import [goog.net EventType ErrorCode XhrIo]\n           [goog.net Jsonp])\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.util :as util]\n            [cljs.core.async :as async]\n            [clojure.string :as s]))\n\n(def pending-requests (atom {}))\n\n(defn abort!\n  \"Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.\"\n  [channel]\n  (when-let [req (@pending-requests channel)]\n    (swap! pending-requests dissoc channel)\n    (async/close! channel)\n    (if (.hasOwnProperty req \"abort\")\n      (.abort req)\n      (.cancel (:jsonp req) (:request req)))))\n\n(defn- aborted? [xhr]\n  (= (.getLastErrorCode xhr) goog.net.ErrorCode.ABORT))\n\n(defn apply-default-headers!\n  \"Takes an XhrIo object and applies the default-headers to it.\"\n  [xhr headers]\n  (let [formatted-h (zipmap (map util/camelize (keys headers)) (vals headers))]\n    (dorun\n      (map (fn [[k v]]\n             (.set (.-headers xhr) k v))\n           formatted-h))))\n\n(defn apply-response-type!\n  \"Takes an XhrIo object and sets response-type if not nil.\"\n  [xhr response-type]\n  (.setResponseType xhr\n   (case response-type\n     :array-buffer XhrIo.ResponseType.ARRAY_BUFFER\n     :blob XhrIo.ResponseType.BLOB\n     :document XhrIo.ResponseType.DOCUMENT\n     :text XhrIo.ResponseType.TEXT\n     :default XhrIo.ResponseType.DEFAULT\n     nil XhrIo.ResponseType.DEFAULT)))\n\n(defn build-xhr\n  \"Builds an XhrIo object from the request parameters.\"\n  [{:keys [with-credentials? default-headers response-type] :as request}]\n  (let [timeout (or (:timeout request) 0)\n        send-credentials (if (nil? with-credentials?)\n                           true\n                           with-credentials?)]\n    (doto (XhrIo.)\n          (apply-default-headers! default-headers)\n          (apply-response-type! response-type)\n          (.setTimeoutInterval timeout)\n          (.setWithCredentials send-credentials))))\n\n;; goog.net.ErrorCode constants to CLJS keywords\n(def error-kw\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn xhr\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method headers body with-credentials? cancel] :as request}]\n  (let [channel (async/chan)\n        request-url (util/build-url request)\n        method (name (or request-method :get))\n        headers (util/build-headers headers)\n        xhr (build-xhr request)]\n    (swap! pending-requests assoc channel xhr)\n    (.listen xhr EventType.COMPLETE\n             (fn [evt]\n               (let [target (.-target evt)\n                     response {:status (.getStatus target)\n                               :success (.isSuccess target)\n                               :body (.getResponse target)\n                               :headers (util/parse-headers (.getAllResponseHeaders target))\n                               :trace-redirects [request-url (.getLastUri target)]\n                               :error-code (error-kw (.getLastErrorCode target))\n                               :error-text (.getLastError target)}]\n                 (if-not (aborted? xhr)\n                   (async/put! channel response))\n                 (swap! pending-requests dissoc channel)\n                 (if cancel (async/close! cancel))\n                 (async/close! channel))))\n    (.send xhr request-url method body headers)\n    (if cancel\n      (go\n        (let [v (async/<! cancel)]\n          (if (not (.isComplete xhr))\n            (.abort xhr)))))\n    channel))\n\n(defn jsonp\n  \"Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [timeout callback-name cancel keywordize-keys?]\n    :or {keywordize-keys? true}\n    :as request}]\n  (let [channel (async/chan)\n        jsonp (Jsonp. (util/build-url request) callback-name)]\n    (.setRequestTimeout jsonp timeout)\n    (let [req (.send jsonp nil\n                     (fn success-callback [data]\n                       (let [response {:status 200\n                                       :success true\n                                       :body (js->clj data :keywordize-keys keywordize-keys?)}]\n                         (async/put! channel response)\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))\n                     (fn error-callback []\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))]\n      (swap! pending-requests assoc channel {:jsonp jsonp :request req})\n      (if cancel\n        (go\n          (let [v (async/<! cancel)]\n            (.cancel jsonp req)))))\n    channel))\n\n(defn request\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method] :as request}]\n  (if (= request-method :jsonp)\n    (jsonp request)\n    (xhr request)))\n"]}