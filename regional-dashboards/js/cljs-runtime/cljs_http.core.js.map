{"version":3,"sources":["cljs_http/core.cljs"],"mappings":"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","names":["cljs-http.core/pending-requests","cljs.core.atom","cljs-http.core/abort!","channel","temp__5735__auto__","req","fexpr__26277","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/dissoc","cljs.core.async/close!","cljs-http.core/aborted?","xhr","cljs.core._EQ_","js/goog.net.ErrorCode.ABORT","cljs-http.core/apply-default-headers!","headers","formatted-h","cljs.core/zipmap","cljs.core.map","cljs-http.util/camelize","cljs.core/keys","cljs.core/vals","cljs.core.dorun","p__26280","vec__26281","cljs.core.nth","k","v","cljs-http.core/apply-response-type!","response-type","G__26285","js/Error","goog.net.XhrIo/ResponseType","p__26291","map__26292","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs-http.core/build-xhr","with-credentials?","default-headers","request","timeout","or__4126__auto__","send-credentials","G__26294","js/goog.net.XhrIo","cljs-http.core/error-kw","p__26295","map__26296","cljs-http.core/xhr","request-method","body","cancel","cljs.core.async.chan","request-url","cljs-http.util/build-url","method","cljs.core/name","cljs-http.util/build-headers","cljs.core/assoc","goog.net.EventType/COMPLETE","evt","target","response","cljs-http.util/parse-headers","G__26298","cljs.core.async.put_BANG_","c__25757__auto__","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_26309","state_val_26310","cljs.core.async.impl.ioc-helpers/take!","inst_26300","inst_26301","inst_26302","statearr-26311","statearr-26312","statearr-26313","inst_26304","statearr-26314","statearr-26315","inst_26307","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26316","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e26317","statearr-26318","cljs.core/seq","statearr-26319","cljs.core/first","state__25759__auto__","statearr-26320","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/not","p__26321","map__26322","cljs-http.core/jsonp","callback-name","keywordize-keys?","jsonp","js/goog.net.Jsonp","data","cljs.core.js__GT_clj","state_26328","state_val_26329","inst_26325","inst_26326","statearr-26330","statearr-26331","e26332","statearr-26333","statearr-26334","statearr-26335","p__26336","map__26337","cljs-http.core/request"],"sourcesContent":["(ns cljs-http.core\n  (:import [goog.net EventType ErrorCode XhrIo]\n           [goog.net Jsonp])\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.util :as util]\n            [cljs.core.async :as async]\n            [clojure.string :as s]))\n\n(def pending-requests (atom {}))\n\n(defn abort!\n  \"Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.\"\n  [channel]\n  (when-let [req (@pending-requests channel)]\n    (swap! pending-requests dissoc channel)\n    (async/close! channel)\n    (if (.hasOwnProperty req \"abort\")\n      (.abort req)\n      (.cancel (:jsonp req) (:request req)))))\n\n(defn- aborted? [xhr]\n  (= (.getLastErrorCode xhr) goog.net.ErrorCode.ABORT))\n\n(defn apply-default-headers!\n  \"Takes an XhrIo object and applies the default-headers to it.\"\n  [xhr headers]\n  (let [formatted-h (zipmap (map util/camelize (keys headers)) (vals headers))]\n    (dorun\n      (map (fn [[k v]]\n             (.set (.-headers xhr) k v))\n           formatted-h))))\n\n(defn apply-response-type!\n  \"Takes an XhrIo object and sets response-type if not nil.\"\n  [xhr response-type]\n  (.setResponseType xhr\n   (case response-type\n     :array-buffer XhrIo.ResponseType.ARRAY_BUFFER\n     :blob XhrIo.ResponseType.BLOB\n     :document XhrIo.ResponseType.DOCUMENT\n     :text XhrIo.ResponseType.TEXT\n     :default XhrIo.ResponseType.DEFAULT\n     nil XhrIo.ResponseType.DEFAULT)))\n\n(defn build-xhr\n  \"Builds an XhrIo object from the request parameters.\"\n  [{:keys [with-credentials? default-headers response-type] :as request}]\n  (let [timeout (or (:timeout request) 0)\n        send-credentials (if (nil? with-credentials?)\n                           true\n                           with-credentials?)]\n    (doto (XhrIo.)\n          (apply-default-headers! default-headers)\n          (apply-response-type! response-type)\n          (.setTimeoutInterval timeout)\n          (.setWithCredentials send-credentials))))\n\n;; goog.net.ErrorCode constants to CLJS keywords\n(def error-kw\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn xhr\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method headers body with-credentials? cancel] :as request}]\n  (let [channel (async/chan)\n        request-url (util/build-url request)\n        method (name (or request-method :get))\n        headers (util/build-headers headers)\n        xhr (build-xhr request)]\n    (swap! pending-requests assoc channel xhr)\n    (.listen xhr EventType.COMPLETE\n             (fn [evt]\n               (let [target (.-target evt)\n                     response {:status (.getStatus target)\n                               :success (.isSuccess target)\n                               :body (.getResponse target)\n                               :headers (util/parse-headers (.getAllResponseHeaders target))\n                               :trace-redirects [request-url (.getLastUri target)]\n                               :error-code (error-kw (.getLastErrorCode target))\n                               :error-text (.getLastError target)}]\n                 (if-not (aborted? xhr)\n                   (async/put! channel response))\n                 (swap! pending-requests dissoc channel)\n                 (if cancel (async/close! cancel))\n                 (async/close! channel))))\n    (.send xhr request-url method body headers)\n    (if cancel\n      (go\n        (let [v (async/<! cancel)]\n          (if (not (.isComplete xhr))\n            (.abort xhr)))))\n    channel))\n\n(defn jsonp\n  \"Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [timeout callback-name cancel keywordize-keys?]\n    :or {keywordize-keys? true}\n    :as request}]\n  (let [channel (async/chan)\n        jsonp (Jsonp. (util/build-url request) callback-name)]\n    (.setRequestTimeout jsonp timeout)\n    (let [req (.send jsonp nil\n                     (fn success-callback [data]\n                       (let [response {:status 200\n                                       :success true\n                                       :body (js->clj data :keywordize-keys keywordize-keys?)}]\n                         (async/put! channel response)\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))\n                     (fn error-callback []\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))]\n      (swap! pending-requests assoc channel {:jsonp jsonp :request req})\n      (if cancel\n        (go\n          (let [v (async/<! cancel)]\n            (.cancel jsonp req)))))\n    channel))\n\n(defn request\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method] :as request}]\n  (if (= request-method :jsonp)\n    (jsonp request)\n    (xhr request)))\n"]}