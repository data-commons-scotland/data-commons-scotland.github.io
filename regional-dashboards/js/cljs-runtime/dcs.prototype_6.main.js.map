{"version":3,"sources":["dcs/prototype_6/main.cljs"],"mappings":";AASA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AAGQC,AACAC,AACD,AAAA,AAAAC,AAAMC,AAAOC;AACPC,AAAK,AAAA,AAAA,AAAA,AAAIF;AADf,AAEK,AAAA,AAACG,AAA6BH;;AAFnC,AAGME;AARb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAaA,AAAA,AAAuBE;AAAvB,AAEM,AAAA,AAACD;;AACD,AAACE;;AACD,AAAA,AAACF;;AACD,AAAA,AAACG,AAAUV,AAAM,AAAA,AAAiBW;;AAExC,AAAA,AAAeC;AAAf,AAKM,AAACC;;AACD,AAACL;;;AAGP,AAAA,AAAwBM;AAAxB,AAEM,AAAA,AAACP","names":["dcs.prototype-6.main/page","dcs.prototype-6.navbar/root","dcs.prototype-6.status/root","cljs.core/deref","route","dcs.prototype-6.state/route-match-cursor","view","js/console.log","dcs.prototype-6.main/start","dcs.prototype-6.router/init","reagent.core.render","js/document","dcs.prototype-6.main/init","dcs.prototype-6.loader/load-data","dcs.prototype-6.main/stop"],"sourcesContent":["(ns dcs.prototype-6.main\n  (:require [reagent.core :as r]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.deriver :as deriver]\n            [dcs.prototype-6.loader :as loader]\n            [dcs.prototype-6.router :as router]\n            [dcs.prototype-6.navbar :as navbar]\n            [dcs.prototype-6.status :as status]))\n\n(defn page\n      []\n      [:div\n       [navbar/root]\n       [status/root]\n       (let [route @state/route-match-cursor\n             view (-> route :data :view)]\n            (js/console.log \"page route=\" route)\n            [view])\n       [:footer.footer\n        [:p \"Built by the \" [:strong \"Data Commons Scotland\"] \" project.\"]]])\n\n;; called by init and after code reloading finishes\n(defn ^:dev/after-load start\n      []\n      (js/console.log \"Starting router\")\n      (router/init)\n      (js/console.log \"Starting render\")\n      (r/render [page] (.getElementById js/document \"app\")))\n\n(defn ^:export init\n      []\n      ;; init is called ONCE when the page loads\n      ;; this is called in the index.html and must be exported\n      ;; so it is available even in :advanced release builds\n      (loader/load-data)\n      (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop\n      []\n      (js/console.log \"stop\"))"]}