{"version":3,"sources":["dcs/prototype_6/ui_household_waste.cljs"],"mappings":"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","names":["dcs.prototype-6.ui-household-waste/chart-spec","title","region","data","year-count","cljs.core/count","cljs.core/group-by","dcs.prototype-6.ui-household-waste/chart","household-waste","population","cljs.core.concat","cljs.core.map","p__26767","vec__26768","cljs.core.nth","year","coll","cljs.core.apply","cljs.core/+","cljs.core.juxt","p__26771","vec__26772","vec__26775","p__26778","vec__26779","p1__26765#","cljs.core.filter","cljs.core/contains?","population-for-lookup","lookup-population","cljs.core.get","cljs.core/first","p__26782","map__26783","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","tonnes","p1__26766#","cljs.core.assoc","oz.core/vega-lite","cljs.core/deref","dcs.prototype-6.ui-household-waste/create","dcs.prototype-6.state/region-holder","dcs.prototype-6.state/household-waste-holder","dcs.prototype-6.state/population-holder"],"sourcesContent":["(ns dcs.prototype-6.ui-household-waste\n  (:require\n    [reagent.core :as r]\n    [oz.core :as oz]\n    [dcs.prototype-6.state :as state]))\n\n\n(defn chart-spec [title region data]\n      (let [year-count (count (group-by :year data))]\n           {:schema     \"https://vega.github.io/schema/vega/v5.json\"\n            :title      title\n            :width      200\n            :height     100\n            :background \"floralwhite\"\n            :data       {:values data}\n            :mark       \"line\"\n            :selection  {:my {:type   \"multi\"\n                              :fields [\"region\"]\n                              :bind   \"legend\"}}\n            :encoding   {:x       {:field \"year\" :type \"temporal\" :timeUnit \"year\" :axis {:tickCount year-count :title \"year\"}}\n                         :y       {:field \"tonnes\" :type \"quantitative\" :scale {:zero false} :axis {:title \"tonnes\"}}\n                         :color   {:field \"region\" :type \"nominal\" :scale {:domain [\"Scotland\" region] :range [\"#1f77b4\" \"#fdae6b\"]}}\n                         :opacity {:condition {:selection \"my\" :value 1}\n                                   :value     0.2}\n                         :tooltip [{:field \"region\" :type \"nominal\"}\n                                   {:field \"year\" :type \"temporal\"}\n                                   {:field \"tonnes\" :type \"quantitative\"}]}}))\n\n(defn chart [region household-waste population]\n      (let [;; calculate rolled-up values and add 'em into the dataset\n            population (concat population\n                               (->> population\n                                    (group-by :year)\n                                    (map (fn [[year coll]] {:region     \"Scotland\"\n                                                            :year       year\n                                                            :population (->> coll\n                                                                             (map :population)\n                                                                             (apply +))}))))\n\n            ;; calculate rolled-up (:management and :material) values\n            household-waste (->> household-waste\n                                 (group-by (juxt :region :year))\n                                 (map (fn [[[region year] coll]] {:region region\n                                                                  :year   year\n                                                                  :tonnes (->> coll\n                                                                               (map :tonnes)\n                                                                               (apply +))})))\n\n            ;; calculate rolled-up (:region) values and add 'em into the dataset\n            household-waste (concat household-waste\n                                    (->> household-waste\n                                         (group-by :year)\n                                         (map (fn [[year coll]] {:region \"Scotland\"\n                                                                 :year   year\n                                                                 :tonnes (->> coll\n                                                                              (map :tonnes)\n                                                                              (apply +))}))))\n\n            ;; filter\n            household-waste (filter #(contains? #{\"Scotland\" region} (:region %)) household-waste)\n\n            ;; calculate the per citizen values\n            population-for-lookup (group-by (juxt :region :year) population)\n            lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n            household-waste (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                     :year   year\n                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                 household-waste)\n\n            ;; stringify the year for Vega\n            household-waste (map #(assoc % :year (str (:year %)))\n                                 household-waste)]\n           [:div\n            [oz/vega-lite (chart-spec \"Household waste per citizen\" region household-waste)\n             {:actions false}]]))\n\n(defn create []\n      [chart @state/region-holder @state/household-waste-holder @state/population-holder])"]}