{"version":3,"sources":["dcs/prototype_6/data_shaping.cljs"],"mappings":"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","names":["dcs.prototype-6.data-shaping/rollup-population-regions","population","cljs.core/group-by","cljs.core.map","p__27259","vec__27260","cljs.core.nth","year","coll","cljs.core.apply","cljs.core/+","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","household-co2e","p__27263","vec__27264","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-waste","cljs.core.juxt","p__27267","vec__27268","vec__27271","material","management","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","business-waste-by-region","p__27274","vec__27275","vec__27278","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","p__27281","vec__27282","vec__27285","region","dcs.prototype-6.data-shaping/rollup-household-waste-materials","p__27288","vec__27289","vec__27292","dcs.prototype-6.data-shaping/rollup-household-waste-managements","p__27295","vec__27296","vec__27299","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","p__27303","vec__27304","vec__27307","total-tonnes","recycled-tonnes","p1__27302#","cljs.core.filter","cljs.core._EQ_","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","p__27310","vec__27311","vec__27314","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","waste-site","p1__27317#","cljs.core.remove","p__27319","vec__27320","all","cljs.core/count","household","p1__27318#","cljs.core/contains?","cljs.core/set","non-household"],"sourcesContent":["(ns dcs.prototype-6.data-shaping)\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-population-regions [population]\n      (->> population\n           (group-by :year)\n           (map (fn [[year coll]] {:region     \"Scotland\"\n                                   :year       year\n                                   :population (->> coll\n                                                    (map :population)\n                                                    (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-co2e-regions [household-co2e]\n      (->> household-co2e\n           (group-by :year)\n           (map (fn [[year coll]] {:region \"Scotland\"\n                                   :year   year\n                                   :tonnes (->> coll\n                                                (map :tonnes)\n                                                (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-household-waste-regions [household-waste]\n      (->> household-waste\n           (group-by (juxt :year :material :management))\n           (map (fn [[[year material management] coll]] {:region     \"Scotland\"\n                                                         :year       year\n                                                         :material   material\n                                                         :management management\n                                                         :tonnes     (->> coll\n                                                                          (map :tonnes)\n                                                                          (apply +))}))))\n\n;; Roll-up to get values for Scotland as a whole\n(defn rollup-business-waste-by-region-regions [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :year :material))\n           (map (fn [[[year material] coll]] {:region   \"Scotland\"\n                                              :year     year\n                                              :material material\n                                              :tonnes   (->> coll\n                                                             (map :tonnes)\n                                                             (apply +))}))))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-household-waste-materials-and-management [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Roll-up to get values for (region, year, management) triples\n(defn rollup-household-waste-materials [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :management))\n           (map (fn [[[region year management] coll]] {:region     region\n                                                       :year       year\n                                                       :management management\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Roll-up to get values for (region, year, material) triples\n(defn rollup-household-waste-managements [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year :material))\n           (map (fn [[[region year material] coll]] {:region     region\n                                                       :year       year\n                                                       :material   material\n                                                       :tonnes     (->> coll\n                                                                        (map :tonnes)\n                                                                        (apply +))}))))\n\n;; Calculate the percentage recycled values for (region, year) pairs\n(defn calc-household-waste-percentage-recycled [household-waste]\n      (->> household-waste\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region     region\n                                            :year       year\n                                            :percentage (let [total-tonnes (->> coll\n                                                                                (map :tonnes)\n                                                                                (apply +))\n                                                              recycled-tonnes (->> coll\n                                                                                   (filter #(= \"Recycled\" (:management %)))\n                                                                                   (map :tonnes)\n                                                                                   (apply +))]\n                                                             (double (* 100 (/ recycled-tonnes total-tonnes))))}))))\n\n;; Roll-up to get values for (region, year) pairs\n(defn rollup-business-waste-by-region-materials [business-waste-by-region]\n      (->> business-waste-by-region\n           (group-by (juxt :region :year))\n           (map (fn [[[region year] coll]] {:region region\n                                            :year   year\n                                            :tonnes (->> coll\n                                                         (map :tonnes)\n                                                         (apply +))}))))\n\n;; Count the waste sites per category in each region\n(defn count-waste-sites-per-category-per-region [waste-site]\n      (->> waste-site\n           (remove #(= \"Not operational\" (:status %)))\n           (group-by :region)\n           (map (fn [[region coll]] (let [all (count coll)\n                                          household (->> coll\n                                                         (filter #(contains? (set (:accepts %)) \"Household\"))\n                                                         count)\n                                          non-household (- all household)]\n                                         {:region        region\n                                          :household     household\n                                          :non-household non-household})))))\n"]}