{"version":3,"sources":["dcs/prototype_6/state.cljs"],"mappings":"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","names":["js/dcs","js/dcs.prototype-6","js/dcs.prototype-6.state","js/dcs.prototype-6.state.app-state","dcs.prototype-6.state/app-state","reagent.core.atom","js/dcs.prototype-6.state.region-holder","dcs.prototype-6.state/region-holder","js/dcs.prototype-6.state.geojson-holder","dcs.prototype-6.state/geojson-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-holder","dcs.prototype-6.state/household-waste-derivation-generation-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-holder","js/dcs.prototype-6.state.household-waste-derivation-management-holder","dcs.prototype-6.state/household-waste-derivation-management-holder","js/dcs.prototype-6.state.household-waste-derivation-composition-holder","dcs.prototype-6.state/household-waste-derivation-composition-holder","js/dcs.prototype-6.state.household-co2e-derivation-holder","dcs.prototype-6.state/household-co2e-derivation-holder","js/dcs.prototype-6.state.business-waste-by-region-derivation-generation-holder","dcs.prototype-6.state/business-waste-by-region-derivation-generation-holder","cljs.core.atom","js/dcs.prototype-6.state.business-waste-by-region-derivation-composition-holder","dcs.prototype-6.state/business-waste-by-region-derivation-composition-holder","js/dcs.prototype-6.state.population-holder","dcs.prototype-6.state/population-holder","js/dcs.prototype-6.state.household-waste-holder","dcs.prototype-6.state/household-waste-holder","js/dcs.prototype-6.state.household-co2e-holder","dcs.prototype-6.state/household-co2e-holder","js/dcs.prototype-6.state.business-waste-by-region-holder","dcs.prototype-6.state/business-waste-by-region-holder","js/console.log","c__25757__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_27313","state_val_27314","inst_27302","cljs.core.async.impl.ioc-helpers/take!","inst_27304","inst_27305","inst_27306","inst_27307","inst_27308","inst_27309","inst_27310","inst_27311","statearr-27315","cljs.core.async.impl.ioc-helpers/return-chan","statearr-27316","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e27317","statearr-27318","cljs.core/seq","statearr-27319","cljs.core/first","state__25759__auto__","statearr-27320","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","cljs.core/reset!","cljs.core/clj->js","state_27333","state_val_27334","inst_27321","inst_27323","inst_27324","inst_27325","inst_27326","inst_27327","inst_27328","inst_27329","inst_27330","inst_27331","statearr-27335","statearr-27336","e27337","statearr-27338","statearr-27339","statearr-27340","cljs.core.concat","dcs.prototype-6.data-shaping/rollup-population-regions","state_27353","state_val_27354","inst_27341","inst_27343","inst_27344","inst_27345","inst_27346","inst_27347","inst_27348","inst_27349","inst_27350","inst_27351","statearr-27355","statearr-27356","e27357","statearr-27358","statearr-27359","statearr-27360","dcs.prototype-6.data-shaping/rollup-household-waste-regions","state_27373","state_val_27374","inst_27361","inst_27363","inst_27364","inst_27365","inst_27366","inst_27367","inst_27368","inst_27369","inst_27370","inst_27371","statearr-27375","statearr-27376","e27377","statearr-27378","statearr-27379","statearr-27380","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","state_27393","state_val_27394","inst_27381","inst_27383","inst_27384","inst_27385","inst_27386","inst_27387","inst_27388","inst_27389","inst_27390","inst_27391","statearr-27395","statearr-27396","e27397","statearr-27398","statearr-27399","statearr-27400","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","dcs.prototype-6.state/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","population","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__27401","map__27402","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","household-waste-derivation-management","p__27404","map__27405","management","household-waste-derivation-composition","p__27407","map__27408","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","dcs.prototype-6.state/maybe-calc-household-co2e-derivation","household-co2e","household-co2e-derivation","p__27410","map__27411","dcs.prototype-6.state/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__27413","map__27414","original","cljs.core._EQ_","business-waste-by-region-derivation-composition","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.state\n  (:require [reagent.core :as r]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defonce app-state (r/atom {:count 0}))\n\n(defonce region-holder (r/atom \"Please select a region...\"))\n\n(defonce geojson-holder (r/atom nil))\n\n(defonce household-waste-derivation-generation-holder (r/atom nil))\n\n(defonce household-waste-derivation-percent-recycled-holder (r/atom nil))\n\n(defonce household-waste-derivation-management-holder (r/atom nil))\n\n(defonce household-waste-derivation-composition-holder (r/atom nil))\n\n(defonce household-co2e-derivation-holder (r/atom nil))\n\n(defonce business-waste-by-region-derivation-generation-holder (atom nil))\n\n(defonce business-waste-by-region-derivation-composition-holder (atom nil))\n\n;; -----------------\n\n(defonce population-holder (atom nil))\n\n(defonce household-waste-holder (atom nil))\n\n(defonce household-co2e-holder (atom nil))\n\n(defonce business-waste-by-region-holder (atom nil))\n\n;; -----------------\n\n;; Fetch data into holders\n\n(js/console.log (str \"load geojson\"))\n(go (let [response (<! (http/get \"geojson.json\"))]\n         (do\n           (js/console.log (str \"geojson, status=\" (:status response) \", success=\" (:success response)))\n           (reset! geojson-holder (clj->js (:body response))))))\n\n\n(js/console.log (str \"load population\"))\n(go (let [response (<! (http/get \"population.json\"))]\n         (do\n           (js/console.log (str \"population, status=\" (:status response) \", success=\" (:success response)))\n           (let [population0 (:body response)\n                 population (concat population0 (data-shaping/rollup-population-regions population0))]\n                (reset! population-holder population)))))\n\n\n(js/console.log (str \"load household-waste\"))\n(go (let [response (<! (http/get \"household-waste.json\"))]\n         (do\n           (js/console.log (str \"household-waste, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-waste0 (:body response)\n                 household-waste (concat household-waste0 (data-shaping/rollup-household-waste-regions household-waste0))]\n                (reset! household-waste-holder household-waste)))))\n\n\n(js/console.log (str \"load household-co2e\"))\n(go (let [response (<! (http/get \"household-co2e.json\"))]\n         (do\n           (js/console.log (str \"household-co2e, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-co2e0 (:body response)\n                 household-co2e (concat household-co2e0 (data-shaping/rollup-household-co2e-regions household-co2e0))]\n                (reset! household-co2e-holder household-co2e)))))\n\n\n(js/console.log (str \"load business-waste-by-region\"))\n(go (let [response (<! (http/get \"business-waste-by-region.json\"))]\n         (do\n           (js/console.log (str \"business-waste-by-region, status=\" (:status response) \", success=\" (:success response)))\n           (let [business-waste-by-region0 (:body response)\n                 business-waste-by-region (concat business-waste-by-region0 (data-shaping/rollup-business-waste-by-region-regions business-waste-by-region0))]\n                (reset! business-waste-by-region-holder business-waste-by-region)))))\n\n\n;; ----------------------\n\n;; Calc derived data\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @household-waste-holder\n            population @population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"calculating household-waste-derivations\")\n\n                 (let [;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)]\n\n                      (reset! household-waste-derivation-generation-holder household-waste-derivation-generation)\n                      (reset! household-waste-derivation-percent-recycled-holder household-waste-derivation-percent-recycled)\n                      (reset! household-waste-derivation-management-holder household-waste-derivation-management)\n                      (reset! household-waste-derivation-composition-holder household-waste-derivation-composition)))))\n\n\n(defn maybe-calc-household-co2e-derivation []\n      (let [household-co2e @household-co2e-holder\n            population @population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"calculating household-co2e-derivation\")\n\n                 (let [;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                          :year   year\n                                                                                          :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                      household-co2e)]\n\n                      (reset! household-co2e-derivation-holder household-co2e-derivation)))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"calculating business-waste-by-region-derivations\")\n\n           (let [region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! business-waste-by-region-derivation-generation-holder business-waste-by-region-derivation-generation)\n                (reset! business-waste-by-region-derivation-composition-holder business-waste-by-region-derivation-composition))))\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch population-holder :household-co2e-derivation-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivation))))\n\n(add-watch household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch household-co2e-holder :household-co2e-derivation-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivation))))\n\n(add-watch business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n"]}