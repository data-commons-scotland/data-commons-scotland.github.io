{"version":3,"sources":["dcs/prototype_6/state.cljs"],"mappings":";AASA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AAEpB,AAAA,AAAAL,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAc,AAAA,AAACF;;AAExB,AAAA,AAAAL,AAAAC,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACJ;;AAEzB,AAAA,AAAAL,AAAAC,AAAAC,AAAAQ;AAAA;AAAA,AAAA,AAASC,AAA6C,AAAA,AAACN;;AACvD,AAAA,AAAAL,AAAAC,AAAAC,AAAAU;AAAA;AAAA,AAAA,AAASC,AAAmD,AAAA,AAACR;;AAC7D,AAAA,AAAAL,AAAAC,AAAAC,AAAAY;AAAA;AAAA,AAAA,AAASC,AAA6C,AAAA,AAACV;;AACvD,AAAA,AAAAL,AAAAC,AAAAC,AAAAc;AAAA;AAAA,AAAA,AAASC,AAA8C,AAAA,AAACZ;;AACxD,AAAA,AAAAL,AAAAC,AAAAC,AAAAgB;AAAA;AAAA,AAAA,AAASC,AAAuD,AAAA,AAACd;;AACjE,AAAA,AAAAL,AAAAC,AAAAC,AAAAkB;AAAA;AAAA,AAAA,AAASC,AAA6D,AAAA,AAAChB;;AAEvE,AAAA,AAAAL,AAAAC,AAAAC,AAAAoB;AAAA;AAAA,AAAA,AAASC,AAA4C,AAAA,AAAClB;;AACtD,AAAA,AAAAL,AAAAC,AAAAC,AAAAsB;AAAA;AAAA,AAAA,AAASC,AAAsD,AAAA,AAACpB;;AAEhE,AAAA,AAAAL,AAAAC,AAAAC,AAAAwB;AAAA;AAAA,AAAA,AAASC,AAAsD,AAAA,AAACC;;AAChE,AAAA,AAAA5B,AAAAC,AAAAC,AAAA2B;AAAA;AAAA,AAAA,AAASC,AAAuD,AAAA,AAACF;;AAEjE,AAAA,AAAA5B,AAAAC,AAAAC,AAAA6B;AAAA;AAAA,AAAA,AAASC,AAA6B,AAAA,AAACJ;;AAIvC,AAAA,AAAA5B,AAAAC,AAAAC,AAAA+B;AAAA;AAAA,AAAA,AAASC,AAAkB,AAAA,AAACN;;AAC5B,AAAA,AAAA5B,AAAAC,AAAAC,AAAAiC;AAAA;AAAA,AAAA,AAASC,AAAuB,AAAA,AAACR;;AACjC,AAAA,AAAA5B,AAAAC,AAAAC,AAAAmC;AAAA;AAAA,AAAA,AAASC,AAAsB,AAAA,AAACV;;AAChC,AAAA,AAAA5B,AAAAC,AAAAC,AAAAqC;AAAA;AAAA,AAAA,AAASC,AAAgC,AAAA,AAACZ;;AAC1C,AAAA,AAAA5B,AAAAC,AAAAC,AAAAuC;AAAA;AAAA,AAAA,AAASC,AAAkB,AAAA,AAACd;;AAM5B,AAACe,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwB2B;AAAxB7B,AAAAA;AAAA,AAAA,AAAAG,AAAAH,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAK,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEYb;AAFZe,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAGmCsB;AAHnCpB,AAAA,AAAAD,AAGYoB,AAAOtE;AAHnBwC,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAJ;;AAAAI;;AAAA,AAAA,AAAAC,AAAAb,AAAAW;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAAC;AAAA,AAAA,AAAA,AAAAkB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAtB,AAAA;AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAAC,AAAA,AAAAxB,AAAA;;AAAAuB;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAhB;;;;AAAAgB;;;;;AAAAhB;;;;;AAAAA;;;;;;;;;AAAAyB,AAAA,AAAAC,AAAA,AAAA5B;AAAA,AAAA,AAAA4B,AAAAC,AAAA,AAAAhC;;AAAA+B;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA9B,AAMA,AAACD,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAiC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwBL;AAAxBG,AAAAA;AAAA,AAAA,AAAA7B,AAAA6B,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEY5C;AAFZ8C,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAIiDW;AAJjDT,AAAA,AAAAF,AAAAC,AAI6BS;AAJ7BP,AAAA,AAAAD,AAKiBZ,AAAO7C;AALxB+C,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAA/B,AAAAmB,AAAAW;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA9B;;AAAA,AAAA8B,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAAhB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAAiC;AAAA,AAAA,AAAA,AAAAd,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA2B;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAA5B;;AAAA4B;AAAA,AAAA,AAAAzB,AAAA,AAAAU,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAAxB,AAAA,AAAAQ,AAAA;;AAAAgB;AAAA,AAAA7B;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAgB;;;;AAAAhB;;;;;AAAAgB;;;;;AAAAA;;;;;;;;;AAAAP,AAAA,AAAAwB,AAAA,AAAAnD;AAAA,AAAA,AAAAmD,AAAAtB,AAAA,AAAAhC;;AAAAsD;;AAAA,AAAA,AAAArB,AAAAH;;;AAAA9B,AAQA,AAACD,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAqD;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwBzB;AAAxBuB,AAAAA;AAAA,AAAA,AAAAjD,AAAAiD,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEYhE;AAFZkE,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAI2DU;AAJ3DR,AAAA,AAAAF,AAAAC,AAIkCX;AAJlCa,AAAA,AAAAD,AAKiBhC,AAAO3C;AALxBiE,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAnD,AAAAuC,AAAAW;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAlD;;AAAA,AAAAkD,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAApC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAAqD;AAAA,AAAA,AAAA,AAAAlC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA+C;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAhD;;AAAAgD;AAAA,AAAA,AAAA7C,AAAA,AAAA8B,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA5C,AAAA,AAAA4B,AAAA;;AAAAgB;AAAA,AAAAjD;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAoC;;;;AAAApC;;;;;AAAAoC;;;;;AAAAA;;;;;;;;;AAAA3B,AAAA,AAAA4C,AAAA,AAAAvE;AAAA,AAAA,AAAAuE,AAAA1C,AAAA,AAAAhC;;AAAA0E;;AAAA,AAAA,AAAAzC,AAAAH;;;AAAA9B,AAQA,AAACD,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAwE;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwB5C;AAAxB0C,AAAAA;AAAA,AAAA,AAAApE,AAAAoE,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEYnF;AAFZqF,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAIyDU;AAJzDR,AAAA,AAAAF,AAAAC,AAIiC9B;AAJjCgC,AAAA,AAAAD,AAKiBnD,AAAOzC;AALxBkF,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAtE,AAAA0D,AAAAW;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAArE;;AAAA,AAAAqE,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAAvD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAAwE;AAAA,AAAA,AAAA,AAAArD,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAkE;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAnE;;AAAAmE;AAAA,AAAA,AAAAhE,AAAA,AAAAiD,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA/D,AAAA,AAAA+C,AAAA;;AAAAgB;AAAA,AAAApE;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAuD;;;;AAAAvD;;;;;AAAAuD;;;;;AAAAA;;;;;;;;;AAAA9C,AAAA,AAAA+D,AAAA,AAAA1F;AAAA,AAAA,AAAA0F,AAAA7D,AAAA,AAAAhC;;AAAA6F;;AAAA,AAAA,AAAA5D,AAAAH;;;AAAA9B,AAQA,AAACD,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2F;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwB/D;AAAxB6D,AAAAA;AAAA,AAAA,AAAAvF,AAAAuF,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEYtG;AAFZwG,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAI6EU;AAJ7ER,AAAA,AAAAF,AAAAC,AAI2CjD;AAJ3CmD,AAAA,AAAAD,AAKiBtE,AAAOvC;AALxBmG,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAzF,AAAA6E,AAAAW;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxF;;AAAA,AAAAwF,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAA1E,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAA2F;AAAA,AAAA,AAAA,AAAAxE,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqF;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAtF;;AAAAsF;AAAA,AAAA,AAAAnF,AAAA,AAAAoE,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAAlF,AAAA,AAAAkE,AAAA;;AAAAgB;AAAA,AAAAvF;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA0E;;;;AAAA1E;;;;;AAAA0E;;;;;AAAAA;;;;;;;;;AAAAjE,AAAA,AAAAkF,AAAA,AAAA7G;AAAA,AAAA,AAAA6G,AAAAhF,AAAA,AAAAhC;;AAAAgH;;AAAA,AAAA,AAAA/E,AAAAH;;;AAAA9B,AAQA,AAACD,AAAe;AAChB,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA8G;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAwBlF;AAAxBgF,AAAAA;AAAA,AAAA,AAAA1G,AAAA0G,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAA,AAAAF,AAAA,AAAAC;AAAAE,AAAA,AAAAD,AAEYzH;AAFZ2H,AAAA,AAAA,AAAAL;AAAAM,AAAA,AAAAD,AAIiBvF,AAAOrC;AAJxBoH,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA1G,AAAAgG,AAAAS;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAzG;;AAAA,AAAAyG,AAAA,AAAA;;AAAAA;;AAAAX;;AAAA,AAAA,AAAA7F,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlB,AAAA8G;AAAA,AAAA,AAAA,AAAA3F,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAsG;AAAA,AAAA,AAAAC,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAvG;;AAAAuG;AAAA,AAAA,AAAApG,AAAA,AAAAuF,AAAA;AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAA,AAAAnG,AAAA,AAAAqF,AAAA;;AAAAc;AAAA,AAAAxG;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA6F;;;;AAAA7F;;;;;AAAA6F;;;;;AAAAA;;;;;;;;;AAAApF,AAAA,AAAAmG,AAAA,AAAA9H;AAAA,AAAA,AAAA8H,AAAAjG,AAAA,AAAAhC;;AAAAiI;;AAAA,AAAA,AAAAhG,AAAAH;;;AAAA9B,AAYA,AAAA,AAAMkI,AAAOC;AAAb,AACM,AAAMC,AAAG,AAACC,AAA+BxG,AAAMyG;AACzCC,AAAM,AAACC,AAAUC,AAASL,AAAGD;AADnC,AAEK,AAAGI;;AAGd,AAAA,AAAMG;AAAN,AACM,AAAA,AAAAC,AAAMC,AAAiBpJ;AAAvB,AAAAmJ,AACME,AAAYvJ;AADlB,AAGK,AAAM,AAAK,AAAA,AAAA,AAAOsJ,AACP,AAAA,AAAA,AAAOC;AADlB,AAEM,AAAA,AAAC9I;;AAED,AACM+I,AAAuC,AAACC,AAA6DH;AAGrGI,AAAuC,AAACC,AAA8CL;AAGtFM,AAAwC,AAACC,AAAgDP;AAGzFQ,AAAsB,AAACC,AAAS,AAAA,AAAA,AAACC,AAAoBT;AACrDU,AAAkB,AAAKC,AAAOC;AAAZ,AAAkB,AAAA,AAAA,AAAIL,AAAsB,AAAA,AAACM,AAAKF,AAAOC,AAAO5H;;AAGlF8H,AAAsC,AAACC,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAaN;AAAb,AAAAE,AAAAI,AAAA,AAAoBL;AAApB,AAAAC,AAAAI,AAAA,AAAyBI;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CV,AACAC,AACQ,AAAGS,AAAO,AAACX,AAAkBC,AAAOC;AACxFX;AAC3CqB,AAAsC,AAACP,AAAI,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAAab;AAAb,AAAAE,AAAAW,AAAA,AAAoBZ;AAApB,AAAAC,AAAAW,AAAA,AAAyBC;AAAzB,AAAAZ,AAAAW,AAAA,AAAoCH;AAApC,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2DV,AACAC,AACAa,AACQ,AAAGJ,AAAO,AAACX,AAAkBC,AAAOC;AACvGT;AAC3CuB,AAAuC,AAACX,AAAI,AAAAY;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AAAajB;AAAb,AAAAE,AAAAe,AAAA,AAAoBhB;AAApB,AAAAC,AAAAe,AAAA,AAAyBC;AAAzB,AAAAhB,AAAAe,AAAA,AAAkCP;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuDV,AACAC,AACAiB,AACQ,AAAGR,AAAO,AAACX,AAAkBC,AAAOC;AACnGP;AAG5CyB,AAA4C,AAACC,AAAsDhC;AAGnGiC,AAAiBjC,AACA,AAAA,AAACgB,AACD,AAACI,AAAMc;AAnC9B,AAAA,AAoCMC,AAIwE,AAACO,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AAJnC,AAAA,AAAAM,AAACC,AACD,AAAA,AAACC;AADD,AAAS,AAACH,AAAEL,AAAY,AAAA,AAAAM;AADxB,AAAA,AAAAH,AAACC;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAF;AArCrG,AAoC8ErB,AAeA,AAAC2B,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQrD;AAP3C,AAAC0B,AAAI,AAAA8B,AAIL,AAAA,AAACL;AAJI,AAAA,AAAAM,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAMnC;AAAN,AAAAoC,AAAAD,AAAA,AAAA,AAAaE;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAAsC,AAAClC,AACD1B;AADA,AAAM,AAAA6D,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAAD,AAAW,AAAA,AAAAA;AADjCD;AAHvC,AAAA,AAAAJ,AAACR,AACD,AAAA,AAAC5B;AADD,AAAS,AAAA,AAAC6B,AAAa,AAAA,AAAAO;AADvB9B;AA3C9E,AAAA,AAuDMqC,AAK8E,AAACV,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AALnC,AAAA,AAAAqB,AAACd,AACD,AAAA,AAACC,AACDc,AACA;AAHA,AAAS,AAACjB,AAAEL,AAAY,AAAA,AAAAqB;AADxB,AAAA,AAAAD,AAAChB;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAe;AAxD3G,AAuDoFtB,AAgBA,AAACW,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQrD;AAR3C,AAAC0B,AAAI,AAAAwC,AAIL,AAAA,AAACf,AACDc,AACA;AANK,AAAA,AAAAE,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAAM7C;AAAN,AAAAoC,AAAAS,AAAA,AAAA,AAAaR;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAA8C,AAAC1C,AACD1B;AADA,AAAM,AAAA6D,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAAO,AAAW,AAAA,AAAAA;AADjCT;AAHvClB,AACA,AAAA,AAACtB;AAhErF,AA2EK,AAAClH,AAAOpE,AAA6C4L;;AACrD,AAACxH,AAAOlE,AAAmD0M;;AAC3D,AAACxI,AAAOhE,AAA6CgM;;AACrD,AAAChI,AAAO9D,AAA8CkM;;AACtD,AAACpI,AAAO5D,AAAuDwM;;AAC/D,AAAC5I,AAAO1D,AAA6DuN;;AApFhF;;;AAuFX,AAAA,AAAMO;AAAN,AACM,AAAA,AAAA5D,AAAM6D,AAAgB9M;AAAtB,AAAAiJ,AACME,AAAYvJ;AADlB,AAGK,AAAM,AAAK,AAAA,AAAA,AAAOkN,AACP,AAAA,AAAA,AAAO3D;AADlB,AAEM,AAAA,AAAC9I;;AAED,AACMqJ,AAAsB,AAACC,AAAS,AAAA,AAAA,AAACC,AAAoBT;AACrDU,AAAkB,AAAKC,AAAOC;AAAZ,AAAkB,AAAA,AAAA,AAAIL,AAAsB,AAAA,AAACM,AAAKF,AAAOC,AAAO5H;;AAGlF4K,AAAqC,AAAC7C,AAAI,AAAA8C;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5C,AAAA,AAAA4C,AAAA,AAAA,AAAA,AAAA,AAAA3C,AAAAC,AAAA0C,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AAAanD;AAAb,AAAAE,AAAAiD,AAAA,AAAoBlD;AAApB,AAAAC,AAAAiD,AAAA,AAAyBzC;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CV,AACAC,AACQ,AAAGS,AAAO,AAACX,AAAkBC,AAAOC;AACxF+C;AAG1C3B,AAAiB2B,AACA,AAAA,AAAC5C,AACD,AAACI,AAAMc;AAb9B,AAAA,AAcM8B,AAIuE,AAACtB,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AAJnC,AAAA,AAAAiC,AAAC1B,AACD,AAAA,AAACC;AADD,AAAS,AAACH,AAAEL,AAAY,AAAA,AAAAiC;AADxB,AAAA,AAAAD,AAAC5B;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAA2B;AAfpG,AAc6EJ,AAeA,AAACnB,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQrD;AAP3C,AAAC0B,AAAI,AAAAoD,AAIL,AAAA,AAAC3B;AAJI,AAAA,AAAA4B,AAAAD;AAAA,AAAApB,AAAAqB,AAAA,AAAA,AAAMzD;AAAN,AAAAoC,AAAAqB,AAAA,AAAA,AAAapB;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAA0D,AAACtD,AACD1B;AADA,AAAM,AAAA6D,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAAmB,AAAW,AAAA,AAAAA;AADjCrB;AAHvC,AAAA,AAAAkB,AAAC9B,AACD,AAAA,AAAC5B;AADD,AAAS,AAAA,AAAC6B,AAAa,AAAA,AAAA6B;AADvBN;AArB7E,AAiCK,AAACtK,AAAOxD,AAA4C8N;;AACpD,AAACtK,AAAOtD,AAAsD+N;;AAtCzE;;;AAyCX,AAAA,AAAMO;AAAN,AACM,AAAA,AAAAxE,AAAMyE,AAA0BxN;AAAhC,AAEK,AAAM,AAAA,AAAA,AAAOwN;AAAb,AAAA;AAAA;;AACA,AAAA,AAACrN;;AAED,AAAMsN,AAAa,AAAA,AAAKD,AACA,AAAA,AAACxD,AACD0D,AACAC;AAGlBC,AAAgD,AAACC,AAAuDL;AAGxGM,AAA+C,AAAC9D,AAAI,AAAA+D;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7D,AAAA,AAAA6D,AAAA,AAAA,AAAA,AAAA,AAAA5D,AAAAC,AAAA2D,AAAAA;AAAAA,AAAqCC;AAArC,AAAAnE,AAAAkE,AAAA,AAAapE;AAAb,AAAAE,AAAAkE,AAAA,AAAoBnE;AAApB,AAAAC,AAAAkE,AAAA,AAAyB1D;AAAzB,AAAgD,AAAI,AAAA,AAACgB,AAAa1B;AAAlB,AAAA,AAAA,AAAA,AAAA,AAEWC,AACQ,AAAGS,AAAOmD;;AAC3BQ;;AAClDL;AAGpDM,AAAgDV;AAjBtD,AAmBK,AAACjL,AAAOpD,AAAsD2O;;AAC9D,AAACvL,AAAOjD,AAAuD4O;;AAG/E,AAAA,AAAMC;AAAN,AACM,AAAA,AAAApF,AAAMqF,AAAYlO;AAAlB,AAEK,AAAM,AAAA,AAAA,AAAOkO;AAAb,AAAA;AAAA;;AACA,AAAA,AAACjO;;AAED,AAAMkO,AAAsB,AAACC,AAAuDF;AAApF,AAEK,AAAC7L,AAAO/C,AAA6B6O;;AAMrD,AAAA,AAACE,AAAU7O,AACA,AAAK8O,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAC7F;;AADP;;;AAGf,AAAA,AAACyF,AAAU7O,AACA,AAAK8O,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAChC;;AADP;;;AAGf,AAAA,AAAC4B,AAAU3O,AACA,AAAK4O,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAC7F;;AADP;;;AAGf,AAAA,AAACyF,AAAUzO,AACA,AAAK0O,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAChC;;AADP;;;AAGf,AAAA,AAAC4B,AAAUvO,AACA,AAAKwO,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACpB;;AADP;;;AAGf,AAAA,AAACgB,AAAUrO,AACA,AAAKsO,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACR;;AADP","names":["js/dcs","js/dcs.prototype-6","js/dcs.prototype-6.state","js/dcs.prototype-6.state.app-state","dcs.prototype-6.state/app-state","reagent.core.atom","js/dcs.prototype-6.state.region-holder","dcs.prototype-6.state/region-holder","js/dcs.prototype-6.state.geojson-holder","dcs.prototype-6.state/geojson-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-holder","dcs.prototype-6.state/household-waste-derivation-generation-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-holder","js/dcs.prototype-6.state.household-waste-derivation-management-holder","dcs.prototype-6.state/household-waste-derivation-management-holder","js/dcs.prototype-6.state.household-waste-derivation-composition-holder","dcs.prototype-6.state/household-waste-derivation-composition-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-positions-holder","dcs.prototype-6.state/household-waste-derivation-generation-positions-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-positions-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-holder","js/dcs.prototype-6.state.household-co2e-derivation-generation-holder","dcs.prototype-6.state/household-co2e-derivation-generation-holder","js/dcs.prototype-6.state.household-co2e-derivation-generation-positions-holder","dcs.prototype-6.state/household-co2e-derivation-generation-positions-holder","js/dcs.prototype-6.state.business-waste-by-region-derivation-generation-holder","dcs.prototype-6.state/business-waste-by-region-derivation-generation-holder","cljs.core.atom","js/dcs.prototype-6.state.business-waste-by-region-derivation-composition-holder","dcs.prototype-6.state/business-waste-by-region-derivation-composition-holder","js/dcs.prototype-6.state.waste-site-derivation-holder","dcs.prototype-6.state/waste-site-derivation-holder","js/dcs.prototype-6.state.population-holder","dcs.prototype-6.state/population-holder","js/dcs.prototype-6.state.household-waste-holder","dcs.prototype-6.state/household-waste-holder","js/dcs.prototype-6.state.household-co2e-holder","dcs.prototype-6.state/household-co2e-holder","js/dcs.prototype-6.state.business-waste-by-region-holder","dcs.prototype-6.state/business-waste-by-region-holder","js/dcs.prototype-6.state.waste-site-holder","dcs.prototype-6.state/waste-site-holder","js/console.log","c__25757__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_27334","state_val_27335","inst_27323","cljs.core.async.impl.ioc-helpers/take!","inst_27325","inst_27326","inst_27327","inst_27328","inst_27329","inst_27330","inst_27331","inst_27332","statearr-27336","cljs.core.async.impl.ioc-helpers/return-chan","statearr-27337","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e27338","statearr-27339","cljs.core/seq","statearr-27340","cljs.core/first","state__25759__auto__","statearr-27341","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","cljs.core/reset!","cljs.core/clj->js","state_27354","state_val_27355","inst_27342","inst_27344","inst_27345","inst_27346","inst_27347","inst_27348","inst_27349","inst_27350","inst_27351","inst_27352","statearr-27356","statearr-27357","e27358","statearr-27359","statearr-27360","statearr-27361","cljs.core.concat","dcs.prototype-6.data-shaping/rollup-population-regions","state_27374","state_val_27375","inst_27362","inst_27364","inst_27365","inst_27366","inst_27367","inst_27368","inst_27369","inst_27370","inst_27371","inst_27372","statearr-27376","statearr-27377","e27378","statearr-27379","statearr-27380","statearr-27381","dcs.prototype-6.data-shaping/rollup-household-waste-regions","state_27394","state_val_27395","inst_27382","inst_27384","inst_27385","inst_27386","inst_27387","inst_27388","inst_27389","inst_27390","inst_27391","inst_27392","statearr-27396","statearr-27397","e27398","statearr-27399","statearr-27400","statearr-27401","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","state_27414","state_val_27415","inst_27402","inst_27404","inst_27405","inst_27406","inst_27407","inst_27408","inst_27409","inst_27410","inst_27411","inst_27412","statearr-27416","statearr-27417","e27418","statearr-27419","statearr-27420","statearr-27421","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","state_27432","state_val_27433","inst_27422","inst_27424","inst_27425","inst_27426","inst_27427","inst_27428","inst_27429","inst_27430","statearr-27434","statearr-27435","e27436","statearr-27437","statearr-27438","statearr-27439","dcs.prototype-6.state/trend","xy-pairs","rf","kixi.stats.core/simple-linear-regression","cljs.core/second","jsobj","cljs.core.transduce","cljs.core/identity","dcs.prototype-6.state/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","population","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__27447","map__27448","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","household-waste-derivation-management","p__27450","map__27451","management","household-waste-derivation-composition","p__27453","map__27454","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core/max","household-waste-derivation-generation-positions","p1__27440#","cljs.core.remove","cljs.core._EQ_","p1__27441#","cljs.core.filter","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__27442#","p__27456","vec__27457","cljs.core.nth","coll","p1__27443#","cljs.core/PersistentVector","household-waste-derivation-percent-recycled-positions","p1__27444#","p1__27445#","cljs.core/reverse","p__27460","vec__27461","p1__27446#","dcs.prototype-6.state/maybe-calc-household-co2e-derivations","household-co2e","household-co2e-derivation-generation","p__27468","map__27469","household-co2e-derivation-generation-positions","p1__27464#","p1__27465#","p1__27466#","p__27471","vec__27472","p1__27467#","dcs.prototype-6.state/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__27475","map__27476","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/maybe-calc-waste-site-derivations","waste-site","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.state\n  (:require [reagent.core :as r]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [cljs.pprint :as pp]\n            [kixi.stats.core :as stats]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defonce app-state (r/atom {:count 0}))\n\n(defonce region-holder (r/atom \"Please select a region...\"))\n\n(defonce geojson-holder (r/atom nil))\n\n(defonce household-waste-derivation-generation-holder (r/atom nil))\n(defonce household-waste-derivation-percent-recycled-holder (r/atom nil))\n(defonce household-waste-derivation-management-holder (r/atom nil))\n(defonce household-waste-derivation-composition-holder (r/atom nil))\n(defonce household-waste-derivation-generation-positions-holder (r/atom nil))\n(defonce household-waste-derivation-percent-recycled-positions-holder (r/atom nil))\n\n(defonce household-co2e-derivation-generation-holder (r/atom nil))\n(defonce household-co2e-derivation-generation-positions-holder (r/atom nil))\n\n(defonce business-waste-by-region-derivation-generation-holder (atom nil))\n(defonce business-waste-by-region-derivation-composition-holder (atom nil))\n\n(defonce waste-site-derivation-holder (atom nil))\n\n;; -----------------\n\n(defonce population-holder (atom nil))\n(defonce household-waste-holder (atom nil))\n(defonce household-co2e-holder (atom nil))\n(defonce business-waste-by-region-holder (atom nil))\n(defonce waste-site-holder (atom nil))\n\n;; -----------------\n\n;; Fetch data into holders\n\n(js/console.log (str \"load geojson\"))\n(go (let [response (<! (http/get \"geojson.json\"))]\n         (do\n           (js/console.log (str \"geojson, status=\" (:status response) \", success=\" (:success response)))\n           (reset! geojson-holder (clj->js (:body response))))))\n\n\n(js/console.log (str \"load population\"))\n(go (let [response (<! (http/get \"population.json\"))]\n         (do\n           (js/console.log (str \"population, status=\" (:status response) \", success=\" (:success response)))\n           (let [population0 (:body response)\n                 population (concat population0 (data-shaping/rollup-population-regions population0))]\n                (reset! population-holder population)))))\n\n\n(js/console.log (str \"load household-waste\"))\n(go (let [response (<! (http/get \"household-waste.json\"))]\n         (do\n           (js/console.log (str \"household-waste, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-waste0 (:body response)\n                 household-waste (concat household-waste0 (data-shaping/rollup-household-waste-regions household-waste0))]\n                (reset! household-waste-holder household-waste)))))\n\n\n(js/console.log (str \"load household-co2e\"))\n(go (let [response (<! (http/get \"household-co2e.json\"))]\n         (do\n           (js/console.log (str \"household-co2e, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-co2e0 (:body response)\n                 household-co2e (concat household-co2e0 (data-shaping/rollup-household-co2e-regions household-co2e0))]\n                (reset! household-co2e-holder household-co2e)))))\n\n\n(js/console.log (str \"load business-waste-by-region\"))\n(go (let [response (<! (http/get \"business-waste-by-region.json\"))]\n         (do\n           (js/console.log (str \"business-waste-by-region, status=\" (:status response) \", success=\" (:success response)))\n           (let [business-waste-by-region0 (:body response)\n                 business-waste-by-region (concat business-waste-by-region0 (data-shaping/rollup-business-waste-by-region-regions business-waste-by-region0))]\n                (reset! business-waste-by-region-holder business-waste-by-region)))))\n\n\n(js/console.log (str \"load waste-site\"))\n(go (let [response (<! (http/get \"waste-site.json\"))]\n         (do\n           (js/console.log (str \"waste-site, status=\" (:status response) \", success=\" (:success response)))\n           (let [waste-site (:body response)]\n                (reset! waste-site-holder waste-site)))))\n\n;; ----------------------\n\n;; Calc derived data\n\n; Compute 'the trend of y'.\n; (Returns the gradient of a linear approximation to the curve decribed by xy-pairs.)\n(defn trend [xy-pairs]\n      (let [rf (stats/simple-linear-regression first second)\n            jsobj (transduce identity rf xy-pairs)]\n           (. jsobj -slope)))\n\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @household-waste-holder\n            population @population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"calculating household-waste-derivations\")\n\n                 (let [;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-generation-positions {:latest-positions (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (filter #(= latest-year (:year %)))\n                                                                                               (sort-by :tonnes)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :year     latest-year})))\n                                                                        :trend-positions  (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (group-by :region)\n                                                                                               (map (fn [[region coll]] {:region region\n                                                                                                                         :trend  (->> coll\n                                                                                                                                      (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                      trend)}))\n                                                                                               (sort-by :trend)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :trend    (:trend trend)})))}\n\n                       household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                                     (remove #(= \"Scotland\" (:region %)))\n                                                                                                     (filter #(= latest-year (:year %)))\n                                                                                                     (sort-by :tonnes)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :year     latest-year})))\n                                                                              :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                                     (group-by :region)\n                                                                                                     (map (fn [[region coll]] {:region region\n                                                                                                                               :trend  (->> coll\n                                                                                                                                            (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                            trend)}))\n                                                                                                     (sort-by :trend)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :trend    (:trend trend)})))}]\n\n                      (reset! household-waste-derivation-generation-holder household-waste-derivation-generation)\n                      (reset! household-waste-derivation-percent-recycled-holder household-waste-derivation-percent-recycled)\n                      (reset! household-waste-derivation-management-holder household-waste-derivation-management)\n                      (reset! household-waste-derivation-composition-holder household-waste-derivation-composition)\n                      (reset! household-waste-derivation-generation-positions-holder household-waste-derivation-generation-positions)\n                      (reset! household-waste-derivation-percent-recycled-positions-holder household-waste-derivation-percent-recycled-positions)))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @household-co2e-holder\n            population @population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"calculating household-co2e-derivations\")\n\n                 (let [;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                     :year   year\n                                                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                 household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (filter #(= latest-year (:year %)))\n                                                                                              (sort-by :tonnes)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :year     latest-year})))\n                                                                       :trend-positions  (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (group-by :region)\n                                                                                              (map (fn [[region coll]] {:region region\n                                                                                                                        :trend  (->> coll\n                                                                                                                                     (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                     trend)}))\n                                                                                              (sort-by :trend)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :trend    (:trend trend)})))}]\n\n                      (reset! household-co2e-derivation-generation-holder household-co2e-derivation-generation)\n                      (reset! household-co2e-derivation-generation-positions-holder household-co2e-derivation-generation-positions)))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"calculating business-waste-by-region-derivations\")\n\n           (let [region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! business-waste-by-region-derivation-generation-holder business-waste-by-region-derivation-generation)\n                (reset! business-waste-by-region-derivation-composition-holder business-waste-by-region-derivation-composition))))\n\n\n(defn maybe-calc-waste-site-derivations []\n      (let [waste-site @waste-site-holder]\n\n           (when (some? waste-site))\n           (js/console.log \"calculating waste-site-derivations\")\n\n           (let [waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n                (reset! waste-site-derivation-holder waste-site-derivation))))\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n\n"]}