{"version":3,"sources":["dcs/prototype_6/state.cljs"],"mappings":"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","names":["js/dcs","js/dcs.prototype-6","js/dcs.prototype-6.state","js/dcs.prototype-6.state.app-state","dcs.prototype-6.state/app-state","reagent.core.atom","js/dcs.prototype-6.state.region-holder","dcs.prototype-6.state/region-holder","js/dcs.prototype-6.state.geojson-holder","dcs.prototype-6.state/geojson-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-holder","dcs.prototype-6.state/household-waste-derivation-generation-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-holder","js/dcs.prototype-6.state.household-waste-derivation-management-holder","dcs.prototype-6.state/household-waste-derivation-management-holder","js/dcs.prototype-6.state.household-waste-derivation-composition-holder","dcs.prototype-6.state/household-waste-derivation-composition-holder","js/dcs.prototype-6.state.household-waste-derivation-positions-holder","dcs.prototype-6.state/household-waste-derivation-positions-holder","js/dcs.prototype-6.state.household-co2e-derivation-generation-holder","dcs.prototype-6.state/household-co2e-derivation-generation-holder","js/dcs.prototype-6.state.household-co2e-derivation-positions-holder","dcs.prototype-6.state/household-co2e-derivation-positions-holder","js/dcs.prototype-6.state.business-waste-by-region-derivation-generation-holder","dcs.prototype-6.state/business-waste-by-region-derivation-generation-holder","cljs.core.atom","js/dcs.prototype-6.state.business-waste-by-region-derivation-composition-holder","dcs.prototype-6.state/business-waste-by-region-derivation-composition-holder","js/dcs.prototype-6.state.business-waste-by-region-derivation-positions-holder","dcs.prototype-6.state/business-waste-by-region-derivation-positions-holder","js/dcs.prototype-6.state.population-holder","dcs.prototype-6.state/population-holder","js/dcs.prototype-6.state.household-waste-holder","dcs.prototype-6.state/household-waste-holder","js/dcs.prototype-6.state.household-co2e-holder","dcs.prototype-6.state/household-co2e-holder","js/dcs.prototype-6.state.business-waste-by-region-holder","dcs.prototype-6.state/business-waste-by-region-holder","js/console.log","c__25757__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_28857","state_val_28858","inst_28846","cljs.core.async.impl.ioc-helpers/take!","inst_28848","inst_28849","inst_28850","inst_28851","inst_28852","inst_28853","inst_28854","inst_28855","statearr-28859","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28860","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e28861","statearr-28862","cljs.core/seq","statearr-28863","cljs.core/first","state__25759__auto__","statearr-28864","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","cljs.core/reset!","cljs.core/clj->js","state_28877","state_val_28878","inst_28865","inst_28867","inst_28868","inst_28869","inst_28870","inst_28871","inst_28872","inst_28873","inst_28874","inst_28875","statearr-28879","statearr-28880","e28881","statearr-28882","statearr-28883","statearr-28884","cljs.core.concat","dcs.prototype-6.data-shaping/rollup-population-regions","state_28897","state_val_28898","inst_28885","inst_28887","inst_28888","inst_28889","inst_28890","inst_28891","inst_28892","inst_28893","inst_28894","inst_28895","statearr-28899","statearr-28900","e28901","statearr-28902","statearr-28903","statearr-28904","dcs.prototype-6.data-shaping/rollup-household-waste-regions","state_28917","state_val_28918","inst_28905","inst_28907","inst_28908","inst_28909","inst_28910","inst_28911","inst_28912","inst_28913","inst_28914","inst_28915","statearr-28919","statearr-28920","e28921","statearr-28922","statearr-28923","statearr-28924","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","state_28937","state_val_28938","inst_28925","inst_28927","inst_28928","inst_28929","inst_28930","inst_28931","inst_28932","inst_28933","inst_28934","inst_28935","statearr-28939","statearr-28940","e28941","statearr-28942","statearr-28943","statearr-28944","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","dcs.prototype-6.state/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","population","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__28947","map__28948","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","household-waste-derivation-management","p__28950","map__28951","management","household-waste-derivation-composition","p__28953","map__28954","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core/max","household-waste-derivation-positions","p1__28945#","cljs.core.filter","cljs.core._EQ_","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__28946#","cljs.core/reverse","dcs.prototype-6.state/maybe-calc-household-co2e-derivations","household-co2e","household-co2e-derivation-generation","p__28957","map__28958","household-co2e-derivation-positions","p1__28956#","dcs.prototype-6.state/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__28961","map__28962","original","business-waste-by-region-derivation-composition","business-waste-by-region-derivation-positions","p1__28960#","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.state\n  (:require [reagent.core :as r]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defonce app-state (r/atom {:count 0}))\n\n(defonce region-holder (r/atom \"Please select a region...\"))\n\n(defonce geojson-holder (r/atom nil))\n\n(defonce household-waste-derivation-generation-holder (r/atom nil))\n(defonce household-waste-derivation-percent-recycled-holder (r/atom nil))\n(defonce household-waste-derivation-management-holder (r/atom nil))\n(defonce household-waste-derivation-composition-holder (r/atom nil))\n(defonce household-waste-derivation-positions-holder (r/atom nil))\n\n(defonce household-co2e-derivation-generation-holder (r/atom nil))\n(defonce household-co2e-derivation-positions-holder (r/atom nil))\n\n(defonce business-waste-by-region-derivation-generation-holder (atom nil))\n(defonce business-waste-by-region-derivation-composition-holder (atom nil))\n(defonce business-waste-by-region-derivation-positions-holder (atom nil))\n\n;; -----------------\n\n(defonce population-holder (atom nil))\n(defonce household-waste-holder (atom nil))\n(defonce household-co2e-holder (atom nil))\n(defonce business-waste-by-region-holder (atom nil))\n\n;; -----------------\n\n;; Fetch data into holders\n\n(js/console.log (str \"load geojson\"))\n(go (let [response (<! (http/get \"geojson.json\"))]\n         (do\n           (js/console.log (str \"geojson, status=\" (:status response) \", success=\" (:success response)))\n           (reset! geojson-holder (clj->js (:body response))))))\n\n\n(js/console.log (str \"load population\"))\n(go (let [response (<! (http/get \"population.json\"))]\n         (do\n           (js/console.log (str \"population, status=\" (:status response) \", success=\" (:success response)))\n           (let [population0 (:body response)\n                 population (concat population0 (data-shaping/rollup-population-regions population0))]\n                (reset! population-holder population)))))\n\n\n(js/console.log (str \"load household-waste\"))\n(go (let [response (<! (http/get \"household-waste.json\"))]\n         (do\n           (js/console.log (str \"household-waste, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-waste0 (:body response)\n                 household-waste (concat household-waste0 (data-shaping/rollup-household-waste-regions household-waste0))]\n                (reset! household-waste-holder household-waste)))))\n\n\n(js/console.log (str \"load household-co2e\"))\n(go (let [response (<! (http/get \"household-co2e.json\"))]\n         (do\n           (js/console.log (str \"household-co2e, status=\" (:status response) \", success=\" (:success response)))\n           (let [household-co2e0 (:body response)\n                 household-co2e (concat household-co2e0 (data-shaping/rollup-household-co2e-regions household-co2e0))]\n                (reset! household-co2e-holder household-co2e)))))\n\n\n(js/console.log (str \"load business-waste-by-region\"))\n(go (let [response (<! (http/get \"business-waste-by-region.json\"))]\n         (do\n           (js/console.log (str \"business-waste-by-region, status=\" (:status response) \", success=\" (:success response)))\n           (let [business-waste-by-region0 (:body response)\n                 business-waste-by-region (concat business-waste-by-region0 (data-shaping/rollup-business-waste-by-region-regions business-waste-by-region0))]\n                (reset! business-waste-by-region-holder business-waste-by-region)))))\n\n\n;; ----------------------\n\n;; Calc derived data\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @household-waste-holder\n            population @population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"calculating household-waste-derivations\")\n\n                 (let [;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-positions\n                       {:generation {:latest (->> household-waste-derivation-generation\n                                                  (filter #(= latest-year (:year %)))\n                                                  (sort-by :tonnes)\n                                                  (map-indexed (fn [ix m] {:region (:region m)\n                                                                           :position (inc ix)\n                                                                           :year latest-year})))\n                                     :trend nil}\n                        :percent-recycled {:latest (->> household-waste-derivation-percent-recycled\n                                                           (filter #(= latest-year (:year %)))\n                                                           (sort-by :tonnes)\n                                                           reverse\n                                                           (map-indexed (fn [ix m] {:region (:region m)\n                                                                                    :position (inc ix)\n                                                                                    :year latest-year})))\n                                              :trend nil}}]\n\n                      (reset! household-waste-derivation-generation-holder household-waste-derivation-generation)\n                      (reset! household-waste-derivation-percent-recycled-holder household-waste-derivation-percent-recycled)\n                      (reset! household-waste-derivation-management-holder household-waste-derivation-management)\n                      (reset! household-waste-derivation-composition-holder household-waste-derivation-composition)\n                      (reset! household-waste-derivation-positions-holder household-waste-derivation-positions)))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @household-co2e-holder\n            population @population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"calculating household-co2e-derivations\")\n\n                 (let [;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                          :year   year\n                                                                                          :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                      household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-positions\n                       {:generation {:latest (->> household-co2e-derivation-generation\n                                                  (filter #(= latest-year (:year %)))\n                                                  (sort-by :tonnes)\n                                                  (map-indexed (fn [ix m] {:region (:region m)\n                                                                           :position (inc ix)\n                                                                           :year latest-year})))\n                                     :trend nil}}]\n\n                      (reset! household-co2e-derivation-generation-holder household-co2e-derivation-generation)\n                      (reset! household-co2e-derivation-positions-holder household-co2e-derivation-positions)))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"calculating business-waste-by-region-derivations\")\n\n           (let [region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region\n\n                 ;; Calculate positions\n                 latest-year (->> business-waste-by-region\n                                  (map :year)\n                                  (apply max))\n                 business-waste-by-region-derivation-positions\n                 {:generation {:latest (->> business-waste-by-region-derivation-generation\n                                            (filter #(= latest-year (:year %)))\n                                            (sort-by :tonnes)\n                                            (map-indexed (fn [ix m] {:region (:region m)\n                                                                     :position (inc ix)\n                                                                     :year latest-year})))\n                               :trend nil}}]\n\n                (reset! business-waste-by-region-derivation-generation-holder business-waste-by-region-derivation-generation)\n                (reset! business-waste-by-region-derivation-composition-holder business-waste-by-region-derivation-composition)\n                (reset! business-waste-by-region-derivation-positions-holder business-waste-by-region-derivation-positions))))\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n\n"]}