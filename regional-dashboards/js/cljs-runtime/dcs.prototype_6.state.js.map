{"version":3,"sources":["dcs/prototype_6/state.cljs"],"mappings":"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","names":["js/dcs","js/dcs.prototype-6","js/dcs.prototype-6.state","js/dcs.prototype-6.state.app-state","dcs.prototype-6.state/app-state","reagent.core.atom","js/dcs.prototype-6.state.route-match","dcs.prototype-6.state/route-match","js/dcs.prototype-6.state.region-holder","dcs.prototype-6.state/region-holder","js/dcs.prototype-6.state.geojson-holder","dcs.prototype-6.state/geojson-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-holder","dcs.prototype-6.state/household-waste-derivation-generation-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-holder","js/dcs.prototype-6.state.household-waste-derivation-management-holder","dcs.prototype-6.state/household-waste-derivation-management-holder","js/dcs.prototype-6.state.household-waste-derivation-composition-holder","dcs.prototype-6.state/household-waste-derivation-composition-holder","js/dcs.prototype-6.state.household-waste-derivation-generation-positions-holder","dcs.prototype-6.state/household-waste-derivation-generation-positions-holder","js/dcs.prototype-6.state.household-waste-derivation-percent-recycled-positions-holder","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-holder","js/dcs.prototype-6.state.household-co2e-derivation-generation-holder","dcs.prototype-6.state/household-co2e-derivation-generation-holder","js/dcs.prototype-6.state.household-co2e-derivation-generation-positions-holder","dcs.prototype-6.state/household-co2e-derivation-generation-positions-holder","js/dcs.prototype-6.state.business-waste-by-region-derivation-generation-holder","dcs.prototype-6.state/business-waste-by-region-derivation-generation-holder","cljs.core.atom","js/dcs.prototype-6.state.business-waste-by-region-derivation-composition-holder","dcs.prototype-6.state/business-waste-by-region-derivation-composition-holder","js/dcs.prototype-6.state.waste-site-derivation-holder","dcs.prototype-6.state/waste-site-derivation-holder","js/dcs.prototype-6.state.population-holder","dcs.prototype-6.state/population-holder","js/dcs.prototype-6.state.household-waste-holder","dcs.prototype-6.state/household-waste-holder","js/dcs.prototype-6.state.household-co2e-holder","dcs.prototype-6.state/household-co2e-holder","js/dcs.prototype-6.state.business-waste-by-region-holder","dcs.prototype-6.state/business-waste-by-region-holder","js/dcs.prototype-6.state.waste-site-holder","dcs.prototype-6.state/waste-site-holder","dcs.prototype-6.state/now","js/Date","dcs.prototype-6.state/secs-to-now","start-time","dcs.prototype-6.state/fetch","url","body-handler","js/console.log","c__25757__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_38383","state_val_38384","inst_38371","inst_38372","statearr-38385","cljs.core.async.impl.ioc-helpers/take!","inst_38374","inst_38375","inst_38376","inst_38377","inst_38378","inst_38379","inst_38380","inst_38381","statearr-38386","cljs.core.async.impl.ioc-helpers/return-chan","statearr-38387","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e38388","statearr-38389","cljs.core/seq","statearr-38390","cljs.core/first","state__25759__auto__","statearr-38391","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","dcs.prototype-6.state/load-data","geojson","cljs.core/clj->js","cljs.core/reset!","population","dcs.prototype-6.data-shaping/rollup-population-regions","cljs.core.concat","household-waste","dcs.prototype-6.data-shaping/rollup-household-waste-regions","household-co2e","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","business-waste-by-region","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","waste-site","dcs.prototype-6.state/trend","xy-pairs","rf","kixi.stats.core/simple-linear-regression","cljs.core/second","jsobj","cljs.core.transduce","cljs.core/identity","dcs.prototype-6.state/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__38399","map__38400","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","household-waste-derivation-management","p__38402","map__38403","management","household-waste-derivation-composition","p__38405","map__38406","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core/max","household-waste-derivation-generation-positions","p1__38392#","cljs.core.remove","cljs.core._EQ_","p1__38393#","cljs.core.filter","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__38394#","p__38408","vec__38409","cljs.core.nth","coll","p1__38395#","cljs.core/PersistentVector","household-waste-derivation-percent-recycled-positions","p1__38396#","p1__38397#","cljs.core/reverse","p__38412","vec__38413","p1__38398#","dcs.prototype-6.state/maybe-calc-household-co2e-derivations","household-co2e-derivation-generation","p__38420","map__38421","household-co2e-derivation-generation-positions","p1__38416#","p1__38417#","p1__38418#","p__38423","vec__38424","p1__38419#","dcs.prototype-6.state/maybe-calc-business-waste-by-region-derivations","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__38427","map__38428","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/maybe-calc-waste-site-derivations","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.state\n  (:require [reagent.core :as r]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [cljs.pprint :as pp]\n            [kixi.stats.core :as stats]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defonce app-state (r/atom {:count 0}))\n\n(defonce route-match (r/atom nil))\n\n(defonce region-holder (r/atom \"Please select a region...\"))\n\n(defonce geojson-holder (r/atom nil))\n\n(defonce household-waste-derivation-generation-holder (r/atom nil))\n(defonce household-waste-derivation-percent-recycled-holder (r/atom nil))\n(defonce household-waste-derivation-management-holder (r/atom nil))\n(defonce household-waste-derivation-composition-holder (r/atom nil))\n(defonce household-waste-derivation-generation-positions-holder (r/atom nil))\n(defonce household-waste-derivation-percent-recycled-positions-holder (r/atom nil))\n\n(defonce household-co2e-derivation-generation-holder (r/atom nil))\n(defonce household-co2e-derivation-generation-positions-holder (r/atom nil))\n\n(defonce business-waste-by-region-derivation-generation-holder (atom nil))\n(defonce business-waste-by-region-derivation-composition-holder (atom nil))\n\n(defonce waste-site-derivation-holder (atom nil))\n\n;; -----------------\n\n(defonce population-holder (atom nil))\n(defonce household-waste-holder (atom nil))\n(defonce household-co2e-holder (atom nil))\n(defonce business-waste-by-region-holder (atom nil))\n(defonce waste-site-holder (atom nil))\n\n;; -----------------\n\n;; Fetch data into holders\n\n(defn now\n  \"Milliseconds since epoch\"\n  []\n  (.now js/Date))\n\n(defn secs-to-now\n      [start-time]\n      (double (/ (- (now) start-time) 1000)))\n\n(defn fetch\n      [url body-handler]\n      (js/console.log (str \"Fetching \" url))\n      (go (let [start-time (now)\n                response (<! (http/get url))]\n               (do\n                 (js/console.log (str \"Response from \" url \": status=\" (:status response) \" success=\" (:success response) \" secs-taken=\" (secs-to-now start-time)))\n                 (body-handler (:body response))))))\n\n(defn load-data\n      []\n      (js/console.log \"Loading data files\")\n\n      (fetch \"geojson.json\"\n             (fn [geojson] (->> geojson\n                                clj->js\n                                (reset! geojson-holder))))\n\n      (fetch \"population.json\"\n             (fn [population] (->> population\n                                   data-shaping/rollup-population-regions\n                                   (concat population)\n                                   (reset! population-holder))))\n\n      (fetch \"household-waste.json\"\n             (fn [household-waste] (->> household-waste\n                                        data-shaping/rollup-household-waste-regions\n                                        (concat household-waste)\n                                        (reset! household-waste-holder))))\n\n      (fetch \"household-co2e.json\"\n             (fn [household-co2e] (->> household-co2e\n                                       data-shaping/rollup-household-co2e-regions\n                                       (concat household-co2e)\n                                       (reset! household-co2e-holder))))\n\n      (fetch \"business-waste-by-region.json\"\n             (fn [business-waste-by-region] (->> business-waste-by-region\n                                                 data-shaping/rollup-business-waste-by-region-regions\n                                                 (concat business-waste-by-region)\n                                                 (reset! business-waste-by-region-holder))))\n\n      (fetch \"waste-site.json\"\n             (fn [waste-site] (->> waste-site\n                                   (reset! waste-site-holder)))))\n\n;; ----------------------\n\n;; Calc derived data\n\n; Compute 'the trend of y'.\n; (Returns the gradient of a linear approximation to the curve decribed by xy-pairs.)\n(defn trend [xy-pairs]\n      (let [rf (stats/simple-linear-regression first second)\n            ^js jsobj (transduce identity rf xy-pairs)]\n           (. jsobj -slope)))\n\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @household-waste-holder\n            population @population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"Calculating household-waste-derivations\")\n\n                 (let [start-time (now)\n\n                       ;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-generation-positions {:latest-positions (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (filter #(= latest-year (:year %)))\n                                                                                               (sort-by :tonnes)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :year     latest-year})))\n                                                                        :trend-positions  (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (group-by :region)\n                                                                                               (map (fn [[region coll]] {:region region\n                                                                                                                         :trend  (->> coll\n                                                                                                                                      (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                      trend)}))\n                                                                                               (sort-by :trend)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :trend    (:trend trend)})))}\n\n                       household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                                     (remove #(= \"Scotland\" (:region %)))\n                                                                                                     (filter #(= latest-year (:year %)))\n                                                                                                     (sort-by :percentage)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :year     latest-year})))\n                                                                              :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                                     (group-by :region)\n                                                                                                     (map (fn [[region coll]] {:region region\n                                                                                                                               :trend  (->> coll\n                                                                                                                                            (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                            trend)}))\n                                                                                                     (sort-by :trend)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :trend    (:trend trend)})))}]\n\n                      (reset! household-waste-derivation-generation-holder household-waste-derivation-generation)\n                      (reset! household-waste-derivation-percent-recycled-holder household-waste-derivation-percent-recycled)\n                      (reset! household-waste-derivation-management-holder household-waste-derivation-management)\n                      (reset! household-waste-derivation-composition-holder household-waste-derivation-composition)\n                      (reset! household-waste-derivation-generation-positions-holder household-waste-derivation-generation-positions)\n                      (reset! household-waste-derivation-percent-recycled-positions-holder household-waste-derivation-percent-recycled-positions)\n                      (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @household-co2e-holder\n            population @population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"Calculating household-co2e-derivations\")\n\n                 (let [start-time (now)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                     :year   year\n                                                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                 household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (filter #(= latest-year (:year %)))\n                                                                                              (sort-by :tonnes)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :year     latest-year})))\n                                                                       :trend-positions  (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (group-by :region)\n                                                                                              (map (fn [[region coll]] {:region region\n                                                                                                                        :trend  (->> coll\n                                                                                                                                     (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                     trend)}))\n                                                                                              (sort-by :trend)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :trend    (:trend trend)})))}]\n\n                      (reset! household-co2e-derivation-generation-holder household-co2e-derivation-generation)\n                      (reset! household-co2e-derivation-generation-positions-holder household-co2e-derivation-generation-positions)\n                      (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n           (let [start-time (now)\n\n                 region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! business-waste-by-region-derivation-generation-holder business-waste-by-region-derivation-generation)\n                (reset! business-waste-by-region-derivation-composition-holder business-waste-by-region-derivation-composition)\n                (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (secs-to-now start-time))))))\n\n\n(defn maybe-calc-waste-site-derivations []\n      (let [waste-site @waste-site-holder]\n\n           (when (some? waste-site))\n           (js/console.log \"Calculating waste-site-derivations\")\n\n           (let [start-time (now)\n\n                 waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n                (reset! waste-site-derivation-holder waste-site-derivation)\n                (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (secs-to-now start-time))))))\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n\n"]}