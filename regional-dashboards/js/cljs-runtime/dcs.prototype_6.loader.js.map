{"version":3,"sources":["dcs/prototype_6/loader.cljs"],"mappings":";AASA,AAAA,AAAMA,AACCC,AAAIC;AADX,AAEM,AAACC,AAAe,AAAA,AAAiBF;;AACjC,AAAAG,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAsB6B;AAAtB5B,AAAA,AACwB6B,AAASxC;AADjCQ,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAC,AAAAL,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAAP,AAGoI+B;AAHpIvB,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAAC,AAGiDjB;AAHjDmB,AAAA,AAAAD,AAGYhB;AAHZkB,AAAA,AAAA,AAAAN;AAAAO,AAAA,AAAAD,AAAAA,AAIYnB,AAAAA,AAAAA;AAJZO,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAC,AAAAf,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAhB;;AAAA,AAAA,AAAAkB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAApB,AAAAC;AAAA,AAAA,AAAA,AAAAoB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAxB,AAAA;AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAA,AAAAC,AAAA,AAAA1B,AAAA;;AAAAyB;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAlB;;;;AAAAkB;;;;;AAAAlB;;;;;AAAAA;;;;;;;;;AAAA2B,AAAA,AAAAC,AAAA,AAAA9B;AAAA,AAAA,AAAA8B,AAAAC,AAAA,AAAAlC;;AAAAiC;;AAAA,AAAA,AAAAE,AAAAH;;;AAAAhC;;AAMN,AAAA,AAAMuC;AAAN,AAEM,AAAA,AAACxC;;AAED,AAAA,AAACH,AACM,AAAK4C;AAAL,AAAmBA,AACAC,AACA,AAAA,AAACC,AAAOC;;;AAElC,AAAA,AAAC/C,AACM,AAAKgD;AAAL,AAAsBA,AACAC,AACA,AAAA,AAACC,AAAOF,AACR,AAACF,AAAOK;;;AAErC,AAAA,AAACnD,AACM,AAAKoD;AAAL,AAA2BA,AACAC,AACA,AAAA,AAACH,AAAOE,AACR,AAACN,AAAOQ;;;AAE1C,AAAA,AAACtD,AACM,AAAKuD;AAAL,AAA0BA,AACAC,AACA,AAAA,AAACN,AAAOK,AACR,AAACT,AAAOW;;;AAEzC,AAAA,AAACzD,AACM,AAAK0D;AAAL,AAAoCA,AACAC,AACA,AAAA,AAACT,AAAOQ,AACR,AAACZ,AAAOc;;;AAEnD,AAAA,AAAC5D,AACM,AAAK6D;AAAL,AAAsBA,AACA,AAACf,AAAOgB;;;AAErC,AAAA,AAAC9D,AACM,AAAK+D;AAAL,AAAmCA,AACA,AAACjB,AAAOkB","names":["dcs.prototype-6.loader/fetch","url","body-handler","js/console.log","c__25757__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25758__auto__","switch__25734__auto__","state_29257","state_val_29258","inst_29245","inst_29246","statearr-29259","cljs.core.async.impl.ioc-helpers/take!","inst_29248","inst_29249","inst_29250","inst_29251","inst_29252","inst_29253","inst_29254","inst_29255","statearr-29260","cljs.core.async.impl.ioc-helpers/return-chan","statearr-29261","state-machine__25735__auto__","ret-value__25736__auto__","result__25737__auto__","cljs.core/keyword-identical?","ex__25738__auto__","e29262","statearr-29263","cljs.core/seq","statearr-29264","cljs.core/first","state__25759__auto__","statearr-29265","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","dcs.prototype-6.util/now","cljs-http.client/get","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.loader/load-data","geojson","cljs.core/clj->js","cljs.core/reset!","dcs.prototype-6.state/geojson-cursor","population","dcs.prototype-6.data-shaping/rollup-population-regions","cljs.core.concat","dcs.prototype-6.state/population-holder","household-waste","dcs.prototype-6.data-shaping/rollup-household-waste-regions","dcs.prototype-6.state/household-waste-holder","household-co2e","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","dcs.prototype-6.state/household-co2e-holder","business-waste-by-region","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","dcs.prototype-6.state/business-waste-by-region-holder","waste-site","dcs.prototype-6.state/waste-site-holder","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder"],"sourcesContent":["(ns dcs.prototype-6.loader\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(defn fetch\n      [url body-handler]\n      (js/console.log (str \"Fetching \" url))\n      (go (let [start-time (util/now)\n                response (<! (http/get url))]\n               (do\n                 (js/console.log (str \"Response from \" url \": status=\" (:status response) \" success=\" (:success response) \" secs-taken=\" (util/secs-to-now start-time)))\n                 (body-handler (:body response))))))\n\n(defn load-data\n      []\n      (js/console.log \"Loading data files\")\n\n      (fetch \"geojson.json\"\n             (fn [geojson] (->> geojson\n                                clj->js\n                                (reset! state/geojson-cursor))))\n\n      (fetch \"population.json\"\n             (fn [population] (->> population\n                                   data-shaping/rollup-population-regions\n                                   (concat population)\n                                   (reset! state/population-holder))))\n\n      (fetch \"household-waste.json\"\n             (fn [household-waste] (->> household-waste\n                                        data-shaping/rollup-household-waste-regions\n                                        (concat household-waste)\n                                        (reset! state/household-waste-holder))))\n\n      (fetch \"household-co2e.json\"\n             (fn [household-co2e] (->> household-co2e\n                                       data-shaping/rollup-household-co2e-regions\n                                       (concat household-co2e)\n                                       (reset! state/household-co2e-holder))))\n\n      (fetch \"business-waste-by-region.json\"\n             (fn [business-waste-by-region] (->> business-waste-by-region\n                                                 data-shaping/rollup-business-waste-by-region-regions\n                                                 (concat business-waste-by-region)\n                                                 (reset! state/business-waste-by-region-holder))))\n\n      (fetch \"waste-site.json\"\n             (fn [waste-site] (->> waste-site\n                                   (reset! state/waste-site-holder))))\n\n      (fetch \"stirling-bin-collection.json\"\n             (fn [stirling-bin-collection] (->> stirling-bin-collection\n                                                (reset! state/stirling-bin-collection-holder)))))\n"]}