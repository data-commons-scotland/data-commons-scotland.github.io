{"version":3,"sources":["dcs/prototype_6/loader.cljs"],"mappings":"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","names":["dcs.prototype-6.loader/fetch","url","body-handler","js/console.log","c__25579__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__25580__auto__","switch__25556__auto__","state_28541","state_val_28542","inst_28513","inst_28514","inst_28515","inst_28516","cljs.core/PersistentHashMap","inst_28517","statearr-28544","cljs.core.async.impl.ioc-helpers/take!","inst_28525","inst_28519","inst_28520","inst_28521","inst_28522","inst_28523","inst_28524","inst_28526","statearr-28545","statearr-28546","statearr-28547","inst_28528","inst_28529","statearr-28548","statearr-28549","inst_28532","inst_28533","inst_28534","inst_28535","inst_28536","inst_28537","inst_28538","inst_28539","statearr-28550","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28551","state-machine__25557__auto__","ret-value__25558__auto__","result__25559__auto__","cljs.core/keyword-identical?","ex__25560__auto__","e28552","statearr-28553","cljs.core/seq","statearr-28555","cljs.core/first","state__25581__auto__","statearr-28560","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","dcs.prototype-6.util/now","cljs_http.client.get","dcs.prototype-6.util/secs-to-now","cljs.core.js__GT_clj","js/JSON","dcs.prototype-6.loader/load-data","stirling-community-food-tonnes","cljs.core/reset!","dcs.prototype-6.state/stirling-community-food-tonnes-holder","stirling-community-food-footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","geojson","cljs.core/clj->js","dcs.prototype-6.state/geojson-cursor","dcs.prototype-6.util/easier-url-stem","population","dcs.prototype-6.data-shaping/rollup-population-regions","cljs.core.concat","dcs.prototype-6.state/population-holder","household-waste","dcs.prototype-6.data-shaping/rollup-household-waste-regions","dcs.prototype-6.state/household-waste-holder","household-co2e","dcs.prototype-6.data-shaping/rollup-household-co2e-regions","dcs.prototype-6.state/household-co2e-holder","business-waste-by-region","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-regions","dcs.prototype-6.state/business-waste-by-region-holder","waste-site","dcs.prototype-6.state/waste-site-holder","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder"],"sourcesContent":["(ns dcs.prototype-6.loader\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(defn fetch\n      [url body-handler]\n      (js/console.log (str \"Fetching \" url))\n      (go (let [start-time (util/now)\n                response (<! (http/get url {:with-credentials? false}))]\n               (do\n                 (js/console.log (str \"Response from \" url \": status=\" (:status response) \" success=\" (:success response) \" secs-taken=\" (util/secs-to-now start-time)))\n                 (let [body (:body response)\n                       clj-body (if (string? body)\n                                  (js->clj (.parse js/JSON body) :keywordize-keys true) ;; probably a text/plain response that we'll have to explicitly convert to Clojure data\n                                  body)] ;; probably an application/json response causing cljs-http to have aleady auto converted the JSON to Clojure data\n                      (js/console.log (str \"got body was a string?\" (string? body)))\n                      (js/console.log (str \"first ele in clj-body is\" (first clj-body)))\n                      (body-handler clj-body))))))\n\n(defn load-data\n      []\n      (js/console.log \"Loading data files\")\n\n      (fetch \"stirling-community-food-tonnes.json\"\n             (fn [stirling-community-food-tonnes] (->> stirling-community-food-tonnes\n                                                       (reset! state/stirling-community-food-tonnes-holder))))\n\n      (fetch \"stirling-community-food-footfall.json\"\n             (fn [stirling-community-food-footfall] (->> stirling-community-food-footfall\n                                                         (reset! state/stirling-community-food-footfall-holder))))\n\n      (fetch \"household-waste-analysis.json\"\n             (fn [household-waste-analysis] (->> household-waste-analysis\n                                                 (reset! state/household-waste-analysis-holder))))\n\n      (fetch \"geojson.json\"\n             (fn [geojson] (->> geojson\n                                clj->js\n                                (reset! state/geojson-cursor))))\n\n      (fetch (str util/easier-url-stem \"population.json\")\n             (fn [population] (->> population\n                                   data-shaping/rollup-population-regions\n                                   (concat population)\n                                   (reset! state/population-holder))))\n\n      (fetch (str util/easier-url-stem \"household-waste.json\")\n             (fn [household-waste] (->> household-waste\n                                        data-shaping/rollup-household-waste-regions\n                                        (concat household-waste)\n                                        (reset! state/household-waste-holder))))\n\n      (fetch (str util/easier-url-stem \"household-co2e.json\")\n             (fn [household-co2e] (->> household-co2e\n                                       data-shaping/rollup-household-co2e-regions\n                                       (concat household-co2e)\n                                       (reset! state/household-co2e-holder))))\n\n      (fetch (str util/easier-url-stem \"business-waste-by-region.json\")\n             (fn [business-waste-by-region] (->> business-waste-by-region\n                                                 data-shaping/rollup-business-waste-by-region-regions\n                                                 (concat business-waste-by-region)\n                                                 (reset! state/business-waste-by-region-holder))))\n\n      (fetch (str util/easier-url-stem \"waste-site.json\")\n             (fn [waste-site] (->> waste-site\n                                   (reset! state/waste-site-holder))))\n\n      (fetch (str util/easier-url-stem \"stirling-bin-collection.json\")\n             (fn [stirling-bin-collection] (->> stirling-bin-collection\n                                                (reset! state/stirling-bin-collection-holder)))))\n"]}