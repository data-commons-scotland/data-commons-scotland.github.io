{"version":3,"sources":["dcs/prototype_6/deriver.cljs"],"mappings":";AASA,AAAA,AAAMA,AAAOC;AAAb,AACM,AAAMC,AAAG,AAACC,AAA+BC,AAAMC;AACrCC,AAAM,AAACC,AAAUC,AAASN,AAAGD;AADvC,AAEK,AAAGK;;AAGd,AAAA,AAAMG;AAAN,AACM,AAAA,AAAAC,AAAMC,AAAiBC;AAAvB,AAAAF,AACMG,AAAYC;AADlB,AAGK,AAAM,AAAK,AAAA,AAAA,AAAOH,AACP,AAAA,AAAA,AAAOE;AADlB,AAEM,AAAA,AAACE;;AAED,AAAMC,AAAW,AAACC;AAGZC,AAAuC,AAACC,AAA6DR;AAGrGS,AAAuC,AAACC,AAA8CV;AAGtFW,AAAwC,AAACC,AAAgDZ;AAGzFa,AAAsB,AAACC,AAAS,AAAA,AAAA,AAACC,AAAoBb;AACrDc,AAAkB,AAAKC,AAAOC;AAAZ,AAAkB,AAAA,AAAA,AAAIL,AAAsB,AAAA,AAACM,AAAKF,AAAOC,AAAOzB;;AAGlF2B,AAAsC,AAACC,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAaN;AAAb,AAAAE,AAAAI,AAAA,AAAoBL;AAApB,AAAAC,AAAAI,AAAA,AAAyBI;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CV,AACAC,AACQ,AAAGS,AAAO,AAACX,AAAkBC,AAAOC;AACxFX;AAC3CqB,AAAsC,AAACP,AAAI,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAAab;AAAb,AAAAE,AAAAW,AAAA,AAAoBZ;AAApB,AAAAC,AAAAW,AAAA,AAAyBC;AAAzB,AAAAZ,AAAAW,AAAA,AAAoCH;AAApC,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2DV,AACAC,AACAa,AACQ,AAAGJ,AAAO,AAACX,AAAkBC,AAAOC;AACvGT;AAC3CuB,AAAuC,AAACX,AAAI,AAAAY;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AAAajB;AAAb,AAAAE,AAAAe,AAAA,AAAoBhB;AAApB,AAAAC,AAAAe,AAAA,AAAyBC;AAAzB,AAAAhB,AAAAe,AAAA,AAAkCP;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuDV,AACAC,AACAiB,AACQ,AAAGR,AAAO,AAACX,AAAkBC,AAAOC;AACnGP;AAG5CyB,AAA4C,AAACC,AAAsDrC;AAGnGsC,AAAiBtC,AACA,AAAA,AAACqB,AACD,AAACI,AAAMc;AArC9B,AAAA,AAsCMC,AAIwE,AAACO,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AAJnC,AAAA,AAAAM,AAACC,AACD,AAAA,AAACC;AADD,AAAS,AAACH,AAAEL,AAAY,AAAA,AAAAM;AADxB,AAAA,AAAAH,AAACC;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAF;AAvCrG,AAsC8ErB,AAeA,AAAC2B,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQ3D;AAP3C,AAACgC,AAAI,AAAA8B,AAIL,AAAA,AAACL;AAJI,AAAA,AAAAM,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAMnC;AAAN,AAAAoC,AAAAD,AAAA,AAAA,AAAaE;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAAsC,AAAClC,AACDhC;AADA,AAAM,AAAAmE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAAD,AAAW,AAAA,AAAAA;AADjCD;AAHvC,AAAA,AAAAJ,AAACR,AACD,AAAA,AAAC5B;AADD,AAAS,AAAA,AAAC6B,AAAa,AAAA,AAAAO;AADvB9B;AA7C9E,AAAA,AAyDMqC,AAK8E,AAACV,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AALnC,AAAA,AAAAqB,AAACd,AACD,AAAA,AAACC,AACDc,AACA;AAHA,AAAS,AAACjB,AAAEL,AAAY,AAAA,AAAAqB;AADxB,AAAA,AAAAD,AAAChB;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAe;AA1D3G,AAyDoFtB,AAgBA,AAACW,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQ3D;AAR3C,AAACgC,AAAI,AAAAwC,AAIL,AAAA,AAACf,AACDc,AACA;AANK,AAAA,AAAAE,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAAM7C;AAAN,AAAAoC,AAAAS,AAAA,AAAA,AAAaR;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAA8C,AAAC1C,AACDhC;AADA,AAAM,AAAAmE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAAO,AAAW,AAAA,AAAAA;AADjCT;AAHvClB,AACA,AAAA,AAACtB;AAlErF,AA6EK,AAACkD,AAAOC,AAAmD7C;;AAC3D,AAAC4C,AAAOE,AAAyD9B;;AACjE,AAAC4B,AAAOG,AAAmDvC;;AAC3D,AAACoC,AAAOI,AAAoDpC;;AAC5D,AAACgC,AAAOK,AAA6D7B;;AACrE,AAACwB,AAAOM,AAAmEb;;AAC3E,AAACrD,AAAe,AAAA,AAA4D,AAACmE,AAAiBlE;;AAvFzG;;;AA0FX,AAAA,AAAMmE;AAAN,AACM,AAAA,AAAAzE,AAAM0E,AAAgBC;AAAtB,AAAA3E,AACMG,AAAYC;AADlB,AAGK,AAAM,AAAK,AAAA,AAAA,AAAOsE,AACP,AAAA,AAAA,AAAOvE;AADlB,AAEM,AAAA,AAACE;;AAED,AAAMC,AAAW,AAACC;AAGZO,AAAsB,AAACC,AAAS,AAAA,AAAA,AAACC,AAAoBb;AACrDc,AAAkB,AAAKC,AAAOC;AAAZ,AAAkB,AAAA,AAAA,AAAIL,AAAsB,AAAA,AAACM,AAAKF,AAAOC,AAAOzB;;AAGlFkF,AAAqC,AAACtD,AAAI,AAAAuD;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAA,AAAA1D,AAAA0D,AAAA,AAAa5D;AAAb,AAAAE,AAAA0D,AAAA,AAAoB3D;AAApB,AAAAC,AAAA0D,AAAA,AAAyBlD;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CV,AACAC,AACQ,AAAGS,AAAO,AAACX,AAAkBC,AAAOC;AACxFuD;AAG1CnC,AAAiBmC,AACA,AAAA,AAACpD,AACD,AAACI,AAAMc;AAf9B,AAAA,AAgBMuC,AAIuE,AAAC/B,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACLV;AAJnC,AAAA,AAAA0C,AAACnC,AACD,AAAA,AAACC;AADD,AAAS,AAACH,AAAEL,AAAY,AAAA,AAAA0C;AADxB,AAAA,AAAAD,AAACrC;AAAD,AAAS,AAAA,AAACC,AAAa,AAAA,AAAAoC;AAjBpG,AAgB6EJ,AAeA,AAAC5B,AAAY,AAAKC,AAAGC;AAAR,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAASA,AACT,AAAA,AAAKD,AACL,AAAA,AAAQ3D;AAP3C,AAACgC,AAAI,AAAA6D,AAIL,AAAA,AAACpC;AAJI,AAAA,AAAAqC,AAAAD;AAAA,AAAA7B,AAAA8B,AAAA,AAAA,AAAMlE;AAAN,AAAAoC,AAAA8B,AAAA,AAAA,AAAa7B;AAAb,AAAA,AAAA,AAAA,AAA6BrC,AACA,AACK,AAAA,AAAAmE,AAAC/D,AACDhC;AADA,AAAM,AAAAmE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAgB,AAAA,AAAA4B,AAAW,AAAA,AAAAA;AADjC9B;AAHvC,AAAA,AAAA2B,AAACvC,AACD,AAAA,AAAC5B;AADD,AAAS,AAAA,AAAC6B,AAAa,AAAA,AAAAsC;AADvBN;AAvB7E,AAmCK,AAACX,AAAOqB,AAAkDV;;AAC1D,AAACX,AAAOsB,AAA4DR;;AACpE,AAAC1E,AAAe,AAAA,AAA2D,AAACmE,AAAiBlE;;AAzCxG;;;AA4CX,AAAA,AAAMkF;AAAN,AACM,AAAA,AAAAxF,AAAMyF,AAA0BC;AAAhC,AAEK,AAAM,AAAA,AAAA,AAAOD;AAAb,AAAA;AAAA;;AACA,AAAA,AAACpF;;AAED,AAAMC,AAAW,AAACC;AAEZoF,AAAa,AAAA,AAAKF,AACA,AAAA,AAACnE,AACDsE,AACAC;AAGlBC,AAAgD,AAACC,AAAuDN;AAGxGO,AAA+C,AAAC1E,AAAI,AAAA2E;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzE,AAAA,AAAAyE,AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAAuE,AAAAA;AAAAA,AAAqCC;AAArC,AAAA/E,AAAA8E,AAAA,AAAahF;AAAb,AAAAE,AAAA8E,AAAA,AAAoB/E;AAApB,AAAAC,AAAA8E,AAAA,AAAyBtE;AAAzB,AAAgD,AAAI,AAAA,AAACgB,AAAa1B;AAAlB,AAAA,AAAA,AAAA,AAAA,AAEWC,AACQ,AAAGS,AAAO+D;;AAC3BQ;;AAClDL;AAGpDM,AAAgDX;AAnBtD,AAqBK,AAACxB,AAAOoC,AAA4DL;;AACpE,AAAC/B,AAAOqC,AAA6DF;;AACrE,AAAC/F,AAAe,AAAA,AAAqE,AAACmE,AAAiBlE;;AAGvH,AAAA,AAAMiG;AAAN,AACM,AAAA,AAAAvG,AAAMwG,AAAYC;AAAlB,AAEK,AAAM,AAAA,AAAA,AAAOD;AAAb,AAAA;AAAA;;AACA,AAAA,AAACnG;;AAED,AAAMC,AAAW,AAACC;AAEZmG,AAAsB,AAACC,AAAuDH;AAFpF,AAIK,AAACvC,AAAO2C,AAAmCF;;AAC3C,AAACrG,AAAe,AAAA,AAAuD,AAACmE,AAAiBlE;;AAGzG,AAAA,AAAMuG;AAAN,AACM,AAAA,AAAA7G,AAAM8G,AAAyBC;AAA/B,AAAA/G,AACMG,AAAYC;AADlB,AAGK,AAAM,AAAK,AAAA,AAAA,AAAO0G,AACP,AAAA,AAAA,AAAO3G;AADlB,AAEM,AAAA,AAACE;;AAED,AAAMC,AAAW,AAACC;AAGZyG,AAAuB,AAACC,AAAwDH;AAGhFI,AAAwB,AAACC,AAAqDL;AAG9EM,AAA4B,AAACC,AAA8DP;AAG3FQ,AAGuB,AAAChG,AAAI,AAAAiG;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAnE,AAAAkE,AAAA,AAAA;AAAA,AAAAlE,AAAAmE,AAAA,AAAA,AAAOtG;AAAP,AAAAmC,AAAAmE,AAAA,AAAA,AAAYC;AAAZ,AAAApE,AAAAkE,AAAA,AAAA,AAAqBjE;AAArB,AAAA,AAAA,AAAA,AAAA,AAAsCpC,AACAuG,AACKnE,AACA,AAAA,AAACjC,AACD,AAACI,AAAMiG;AAPvDb,AACA,AAAA,AAAChE,AACD,AAAC/B,AAAS,AAAA,AAAA,AAACC;AAQlC4G,AAAyBzH,AAAW,AAAA,AAACmB,AAAW,AAACI,AAAMc;AACvD1B,AAAsB,AAACC,AAAS,AAAA,AAAA,AAACC,AAAoBb;AACrDc,AAAkB,AAAKC,AAAOC;AAAZ,AAAkB,AAAA,AAAA,AAAIL,AACA,AAAA,AAACM,AAAKF,AAAO,AAAA2G,AAAK1G,AAClBzB;AADaoI,AAAUF;AAAV,AAAA,AAAAC,AAAAC,AAAAD,AAAAC;;;AAKrDC,AAAsB,AAACzG,AAAI,AAAA0G;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAvG,AAAAC,AAAAsG,AAAAA;AAAA,AAAA7G,AAAA6G,AAAA,AAAa/G;AAAb,AAAAE,AAAA6G,AAAA,AAAoB9G;AAApB,AAAAC,AAAA6G,AAAA,AAAyBrG;AAAzB,AAAA,AAAA,AAAA,AAAA,AAA4CV,AACAC,AACQ,AAAGS,AAAO,AAACX,AAAkBC,AAAOC;AACxF6F;AAC3BkB,AAAuB,AAAC5G,AAAI,AAAA6G;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3G,AAAA,AAAA2G,AAAA,AAAA,AAAA,AAAA,AAAA1G,AAAAC,AAAAyG,AAAAA;AAAA,AAAAhH,AAAAgH,AAAA,AAAalH;AAAb,AAAAE,AAAAgH,AAAA,AAAoBjH;AAApB,AAAAC,AAAAgH,AAAA,AAAyBhG;AAAzB,AAAAhB,AAAAgH,AAAA,AAAkCxG;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuDV,AACAC,AACAiB,AACQ,AAAGR,AAAO,AAACX,AAAkBC,AAAOC;AACnG+F;AAtClC,AAwCK,AAACjD,AAAOoE,AAA2DN;;AACnE,AAAC9D,AAAOqE,AAA4DJ;;AACpE,AAACjE,AAAOsE,AAAiEnB;;AACzE,AAACnD,AAAOuE,AAA4DlB;;AACpE,AAACjH,AAAe,AAAA,AAAoE,AAACmE,AAAiBlE;;AAhDjH;;;AAsDX,AAAA,AAACmI,AAAUrI,AACA,AAAKsI,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAC9I;;AADP;;;AAGf,AAAA,AAAC0I,AAAUrI,AACA,AAAKsI,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACpE;;AADP;;;AAGf,AAAA,AAACgE,AAAUrI,AACA,AAAKsI,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAChC;;AADP;;;AAGf,AAAA,AAAC4B,AAAUvI,AACA,AAAKwI,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAC9I;;AADP;;;AAGf,AAAA,AAAC0I,AAAU9D,AACA,AAAK+D,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACpE;;AADP;;;AAGf,AAAA,AAACgE,AAAU/C,AACA,AAAKgD,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACrD;;AADP;;;AAGf,AAAA,AAACiD,AAAUhC,AACA,AAAKiC,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAACtC;;AADP;;;AAGf,AAAA,AAACkC,AAAU1B,AACA,AAAK2B,AAAKC,AAAMC,AAAUC;AAA1B,AACI,AAAMA;AAAN,AACM,AAAChC;;AADP","names":["dcs.prototype-6.deriver/trend","xy-pairs","rf","kixi.stats.core/simple-linear-regression","cljs.core/first","cljs.core/second","jsobj","cljs.core.transduce","cljs.core/identity","dcs.prototype-6.deriver/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","dcs.prototype-6.state/household-waste-holder","population","dcs.prototype-6.state/population-holder","js/console.log","start-time","dcs.prototype-6.util/now","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__29142","map__29143","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","tonnes","household-waste-derivation-management","p__29145","map__29146","management","household-waste-derivation-composition","p__29148","map__29149","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core/max","household-waste-derivation-generation-positions","p1__29135#","cljs.core.remove","cljs.core._EQ_","p1__29136#","cljs.core.filter","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__29137#","p__29151","vec__29152","cljs.core.nth","coll","p1__29138#","cljs.core/PersistentVector","household-waste-derivation-percent-recycled-positions","p1__29139#","p1__29140#","cljs.core/reverse","p__29155","vec__29156","p1__29141#","cljs.core/reset!","dcs.prototype-6.state/household-waste-derivation-generation-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-cursor","dcs.prototype-6.state/household-waste-derivation-management-cursor","dcs.prototype-6.state/household-waste-derivation-composition-cursor","dcs.prototype-6.state/household-waste-derivation-generation-positions-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-cursor","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.deriver/maybe-calc-household-co2e-derivations","household-co2e","dcs.prototype-6.state/household-co2e-holder","household-co2e-derivation-generation","p__29163","map__29164","household-co2e-derivation-generation-positions","p1__29159#","p1__29160#","p1__29161#","p__29166","vec__29167","p1__29162#","dcs.prototype-6.state/household-co2e-derivation-generation-cursor","dcs.prototype-6.state/household-co2e-derivation-generation-positions-cursor","dcs.prototype-6.deriver/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__29170","map__29171","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-composition-cursor","dcs.prototype-6.deriver/maybe-calc-waste-site-derivations","waste-site","dcs.prototype-6.state/waste-site-holder","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","dcs.prototype-6.state/waste-site-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-bin-collection-derivations","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","derivation-generation0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-qu-ma-re-mi","derivation-composition0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-qu-re-mi","derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","derivation-missed","p__29187","vec__29188","vec__29191","quarter","cljs.core/+","population-max-year","x__4217__auto__","y__4218__auto__","derivation-generation","p__29200","map__29201","derivation-composition","p__29203","map__29205","dcs.prototype-6.state/stirling-bin-collection-derivation-generation-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-composition-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-percent-recycled-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-missed-bins-cursor","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.deriver\n  (:require [kixi.stats.core :as stats]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping]))\n\n\n; Compute 'the trend of y'.\n; (Returns the gradient of a linear approximation to the curve decribed by xy-pairs.)\n(defn trend [xy-pairs]\n      (let [rf (stats/simple-linear-regression first second)\n            ^js jsobj (transduce identity rf xy-pairs)]\n           (. jsobj -slope)))\n\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @state/household-waste-holder\n            population @state/population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"Calculating household-waste-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-generation-positions {:latest-positions (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (filter #(= latest-year (:year %)))\n                                                                                               (sort-by :tonnes)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :year     latest-year})))\n                                                                        :trend-positions  (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (group-by :region)\n                                                                                               (map (fn [[region coll]] {:region region\n                                                                                                                         :trend  (->> coll\n                                                                                                                                      (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                      trend)}))\n                                                                                               (sort-by :trend)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :trend    (:trend trend)})))}\n\n                       household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                                     (remove #(= \"Scotland\" (:region %)))\n                                                                                                     (filter #(= latest-year (:year %)))\n                                                                                                     (sort-by :percentage)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :year     latest-year})))\n                                                                              :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                                     (group-by :region)\n                                                                                                     (map (fn [[region coll]] {:region region\n                                                                                                                               :trend  (->> coll\n                                                                                                                                            (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                            trend)}))\n                                                                                                     (sort-by :trend)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :trend    (:trend trend)})))}]\n\n                      (reset! state/household-waste-derivation-generation-cursor household-waste-derivation-generation)\n                      (reset! state/household-waste-derivation-percent-recycled-cursor household-waste-derivation-percent-recycled)\n                      (reset! state/household-waste-derivation-management-cursor household-waste-derivation-management)\n                      (reset! state/household-waste-derivation-composition-cursor household-waste-derivation-composition)\n                      (reset! state/household-waste-derivation-generation-positions-cursor household-waste-derivation-generation-positions)\n                      (reset! state/household-waste-derivation-percent-recycled-positions-cursor household-waste-derivation-percent-recycled-positions)\n                      (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @state/household-co2e-holder\n            population @state/population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"Calculating household-co2e-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                     :year   year\n                                                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                 household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (filter #(= latest-year (:year %)))\n                                                                                              (sort-by :tonnes)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :year     latest-year})))\n                                                                       :trend-positions  (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (group-by :region)\n                                                                                              (map (fn [[region coll]] {:region region\n                                                                                                                        :trend  (->> coll\n                                                                                                                                     (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                     trend)}))\n                                                                                              (sort-by :trend)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :trend    (:trend trend)})))}]\n\n                      (reset! state/household-co2e-derivation-generation-cursor household-co2e-derivation-generation)\n                      (reset! state/household-co2e-derivation-generation-positions-cursor household-co2e-derivation-generation-positions)\n                      (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @state/business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n           (let [start-time (util/now)\n\n                 region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! state/business-waste-by-region-derivation-generation-cursor business-waste-by-region-derivation-generation)\n                (reset! state/business-waste-by-region-derivation-composition-cursor business-waste-by-region-derivation-composition)\n                (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-waste-site-derivations []\n      (let [waste-site @state/waste-site-holder]\n\n           (when (some? waste-site))\n           (js/console.log \"Calculating waste-site-derivations\")\n\n           (let [start-time (util/now)\n\n                 waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n                (reset! state/waste-site-derivation-cursor waste-site-derivation)\n                (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-stirling-bin-collection-derivations []\n      (let [stirling-bin-collection @state/stirling-bin-collection-holder\n            population @state/population-holder]\n\n           (when (and (some? stirling-bin-collection)\n                      (some? population))\n                 (js/console.log \"Calculating stirling-bin-collection-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year) pairs\n                       derivation-generation0 (data-shaping/rollup-stirling-bin-collection-qu-ma-re-mi stirling-bin-collection)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       derivation-composition0 (data-shaping/rollup-stirling-bin-collection-qu-re-mi stirling-bin-collection)\n\n                       ;; Calculate the percentage recycled values\n                       derivation-percent-recycled (data-shaping/calc-stirling-bin-collection-percentage-recycled stirling-bin-collection)\n\n                       ;; Filter for missed-bin? then roll-up to get values for (year, quarter) pairs\n                       derivation-missed (->> stirling-bin-collection\n                                              (filter :missed-bin?)\n                                              (group-by (juxt :year :quarter))\n                                              (map (fn [[[year quarter] coll]] {:year    year\n                                                                                :quarter quarter\n                                                                                :tonnes  (->> coll\n                                                                                              (map :tonnes)\n                                                                                              (apply +))})))\n\n                       ;; Prep for the per citizen calculation\n                       population-max-year (->> population (map :year) (apply max)) ;; assume all regions have the same max year\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup\n                                                               (get [region (min year population-max-year)]) ;; use population-max-year to avoid an out-of-bounds\n                                                               first\n                                                               :population))\n\n                       ;; Calculate the per citizen values\n                       derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                      :year   year\n                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                  derivation-generation0)\n                       derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                :year     year\n                                                                                                :material material\n                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                   derivation-composition0)]\n\n                      (reset! state/stirling-bin-collection-derivation-generation-cursor derivation-generation)\n                      (reset! state/stirling-bin-collection-derivation-composition-cursor derivation-composition)\n                      (reset! state/stirling-bin-collection-derivation-percent-recycled-cursor derivation-percent-recycled)\n                      (reset! state/stirling-bin-collection-derivation-missed-bins-cursor derivation-missed)\n                      (js/console.log (str \"Calculating stirling-bin-collection-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch state/population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/population-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch state/waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n(add-watch state/stirling-bin-collection-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n\n"]}