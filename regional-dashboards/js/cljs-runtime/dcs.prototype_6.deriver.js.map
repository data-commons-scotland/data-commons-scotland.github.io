{"version":3,"sources":["dcs/prototype_6/deriver.cljs"],"mappings":"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","names":["dcs.prototype-6.deriver/trend","xy-pairs","rf","kixi.stats.core/simple-linear-regression","cljs.core/first","cljs.core/second","jsobj","cljs.core.transduce","cljs.core/identity","dcs.prototype-6.deriver/maybe-calc-household-waste-derivations","cljs.core/deref","household-waste","dcs.prototype-6.state/household-waste-holder","population","dcs.prototype-6.state/population-holder","js/console.log","start-time","dcs.prototype-6.util/now","household-waste-derivation-generation0","dcs.prototype-6.data-shaping/rollup-household-waste-materials-and-management","household-waste-derivation-management0","dcs.prototype-6.data-shaping/rollup-household-waste-materials","household-waste-derivation-composition0","dcs.prototype-6.data-shaping/rollup-household-waste-managements","population-for-lookup","cljs.core/group-by","cljs.core.juxt","lookup-population","region","year","cljs.core.get","household-waste-derivation-generation","cljs.core.map","p__27890","map__27891","cljs.core/--destructure-map","tonnes","household-waste-derivation-management","p__27892","map__27893","management","household-waste-derivation-composition","p__27894","map__27895","material","household-waste-derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-household-waste-percentage-recycled","latest-year","cljs.core.apply","cljs.core/max","household-waste-derivation-generation-positions","p1__27883#","cljs.core.remove","cljs.core._EQ_","p1__27884#","cljs.core.filter","cljs.core.sort_by","cljs.core.map_indexed","ix","m","p1__27885#","p__27896","vec__27897","cljs.core.nth","coll","p1__27886#","cljs.core/PersistentVector","household-waste-derivation-percent-recycled-positions","p1__27887#","p1__27888#","cljs.core/reverse","p__27900","vec__27902","p1__27889#","cljs.core/reset!","dcs.prototype-6.state/household-waste-derivation-generation-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-cursor","dcs.prototype-6.state/household-waste-derivation-management-cursor","dcs.prototype-6.state/household-waste-derivation-composition-cursor","dcs.prototype-6.state/household-waste-derivation-generation-positions-cursor","dcs.prototype-6.state/household-waste-derivation-percent-recycled-positions-cursor","dcs.prototype-6.util/secs-to-now","dcs.prototype-6.deriver/maybe-calc-household-co2e-derivations","household-co2e","dcs.prototype-6.state/household-co2e-holder","household-co2e-derivation-generation","p__27922","map__27923","household-co2e-derivation-generation-positions","p1__27917#","p1__27918#","p1__27920#","p__27924","vec__27925","p1__27921#","dcs.prototype-6.state/household-co2e-derivation-generation-cursor","dcs.prototype-6.state/household-co2e-derivation-generation-positions-cursor","dcs.prototype-6.deriver/maybe-calc-business-waste-by-region-derivations","business-waste-by-region","dcs.prototype-6.state/business-waste-by-region-holder","region-count","cljs.core.distinct","cljs.core/count","business-waste-by-region-derivation-generation0","dcs.prototype-6.data-shaping/rollup-business-waste-by-region-materials","business-waste-by-region-derivation-generation","p__27931","map__27932","original","business-waste-by-region-derivation-composition","dcs.prototype-6.state/business-waste-by-region-derivation-generation-cursor","dcs.prototype-6.state/business-waste-by-region-derivation-composition-cursor","dcs.prototype-6.deriver/maybe-calc-waste-site-derivations","waste-site","dcs.prototype-6.state/waste-site-holder","waste-site-derivation","dcs.prototype-6.data-shaping/count-waste-sites-per-category-per-region","dcs.prototype-6.state/waste-site-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-bin-collection-derivations","stirling-bin-collection","dcs.prototype-6.state/stirling-bin-collection-holder","derivation-generation0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-ma-re-mi","derivation-composition0","dcs.prototype-6.data-shaping/rollup-stirling-bin-collection-re-mi","derivation-percent-recycled","dcs.prototype-6.data-shaping/calc-stirling-bin-collection-percentage-recycled","derivation-missed","p__27937","vec__27938","vec__27941","quarter","cljs.core/+","population-max-year","x__4252__auto__","y__4253__auto__","derivation-generation","p__27944","map__27945","derivation-composition","p__27946","map__27947","dcs.prototype-6.state/stirling-bin-collection-derivation-generation-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-composition-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-percent-recycled-cursor","dcs.prototype-6.state/stirling-bin-collection-derivation-missed-bins-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-tonnes-derivations","dcs.prototype-6.state/stirling-community-food-tonnes-holder","derivation-tonnes","derivation-flow","dcs.prototype-6.data-shaping/calc-stirling-community-food-flow","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-tonnes-cursor","dcs.prototype-6.state/stirling-community-food-tonnes-derivation-flow-cursor","dcs.prototype-6.deriver/maybe-calc-stirling-community-food-footfall-derivations","footfall","dcs.prototype-6.state/stirling-community-food-footfall-holder","derivation","dcs.prototype-6.state/stirling-community-food-footfall-derivation-cursor","dcs.prototype-6.deriver/maybe-calc-household-waste-analysis-derivations","household-waste-analysis","dcs.prototype-6.state/household-waste-analysis-holder","household-waste-analysis-derivation","dcs.prototype-6.state/household-waste-analysis-derivation-cursor","cljs.core/add-watch","_key","_atom","old-state","new-state"],"sourcesContent":["(ns dcs.prototype-6.deriver\n  (:require [kixi.stats.core :as stats]\n            [dcs.prototype-6.util :as util]\n            [dcs.prototype-6.state :as state]\n            [dcs.prototype-6.data-shaping :as data-shaping]))\n\n\n; Compute 'the trend of y'.\n; (Returns the gradient of a linear approximation to the curve decribed by xy-pairs.)\n(defn trend [xy-pairs]\n      (let [rf (stats/simple-linear-regression first second)\n            ^js jsobj (transduce identity rf xy-pairs)]\n           (. jsobj -slope)))\n\n\n(defn maybe-calc-household-waste-derivations []\n      (let [household-waste @state/household-waste-holder\n            population @state/population-holder]\n\n           (when (and (some? household-waste)\n                      (some? population))\n                 (js/console.log \"Calculating household-waste-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year) pairs\n                       household-waste-derivation-generation0 (data-shaping/rollup-household-waste-materials-and-management household-waste)\n\n                       ;; Roll-up to get values for (region, year, management) triples\n                       household-waste-derivation-management0 (data-shaping/rollup-household-waste-materials household-waste)\n\n                       ;; Roll-up to get values for (region, year, material) triples\n                       household-waste-derivation-composition0 (data-shaping/rollup-household-waste-managements household-waste)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-waste-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                      :year   year\n                                                                                                      :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-generation0)\n                       household-waste-derivation-management (map (fn [{:keys [region year management tonnes]}] {:region     region\n                                                                                                                 :year       year\n                                                                                                                 :management management\n                                                                                                                 :tonnes     (double (/ tonnes (lookup-population region year)))})\n                                                                  household-waste-derivation-management0)\n                       household-waste-derivation-composition (map (fn [{:keys [region year material tonnes]}] {:region   region\n                                                                                                                :year     year\n                                                                                                                :material material\n                                                                                                                :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                                   household-waste-derivation-composition0)\n\n                       ;; Calculate the percentage recycled values\n                       household-waste-derivation-percent-recycled (data-shaping/calc-household-waste-percentage-recycled household-waste)\n\n                       ;; Calculate positions\n                       latest-year (->> household-waste\n                                        (map :year)\n                                        (apply max))\n                       household-waste-derivation-generation-positions {:latest-positions (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (filter #(= latest-year (:year %)))\n                                                                                               (sort-by :tonnes)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :year     latest-year})))\n                                                                        :trend-positions  (->> household-waste-derivation-generation\n                                                                                               (remove #(= \"Scotland\" (:region %)))\n                                                                                               (group-by :region)\n                                                                                               (map (fn [[region coll]] {:region region\n                                                                                                                         :trend  (->> coll\n                                                                                                                                      (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                      trend)}))\n                                                                                               (sort-by :trend)\n                                                                                               (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                        :position (inc ix)\n                                                                                                                        :trend    (:trend trend)})))}\n\n                       household-waste-derivation-percent-recycled-positions {:latest-positions (->> household-waste-derivation-percent-recycled\n                                                                                                     (remove #(= \"Scotland\" (:region %)))\n                                                                                                     (filter #(= latest-year (:year %)))\n                                                                                                     (sort-by :percentage)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :year     latest-year})))\n                                                                              :trend-positions  (->> household-waste-derivation-percent-recycled\n                                                                                                     (group-by :region)\n                                                                                                     (map (fn [[region coll]] {:region region\n                                                                                                                               :trend  (->> coll\n                                                                                                                                            (map #(vector (double (:year %)) (:percentage %)))\n                                                                                                                                            trend)}))\n                                                                                                     (sort-by :trend)\n                                                                                                     reverse\n                                                                                                     (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                              :position (inc ix)\n                                                                                                                              :trend    (:trend trend)})))}]\n\n                      (reset! state/household-waste-derivation-generation-cursor household-waste-derivation-generation)\n                      (reset! state/household-waste-derivation-percent-recycled-cursor household-waste-derivation-percent-recycled)\n                      (reset! state/household-waste-derivation-management-cursor household-waste-derivation-management)\n                      (reset! state/household-waste-derivation-composition-cursor household-waste-derivation-composition)\n                      (reset! state/household-waste-derivation-generation-positions-cursor household-waste-derivation-generation-positions)\n                      (reset! state/household-waste-derivation-percent-recycled-positions-cursor household-waste-derivation-percent-recycled-positions)\n                      (js/console.log (str \"Calculating household-waste-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-household-co2e-derivations []\n      (let [household-co2e @state/household-co2e-holder\n            population @state/population-holder]\n\n           (when (and (some? household-co2e)\n                      (some? population))\n                 (js/console.log \"Calculating household-co2e-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Prep for the per citizen calculation\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup (get [region year]) first :population))\n\n                       ;; Calculate the per citizen values\n                       household-co2e-derivation-generation (map (fn [{:keys [region year tonnes]}] {:region region\n                                                                                                     :year   year\n                                                                                                     :tonnes (double (/ tonnes (lookup-population region year)))})\n                                                                 household-co2e)\n\n                       ;; Calculate positions\n                       latest-year (->> household-co2e\n                                        (map :year)\n                                        (apply max))\n                       household-co2e-derivation-generation-positions {:latest-positions (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (filter #(= latest-year (:year %)))\n                                                                                              (sort-by :tonnes)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :year     latest-year})))\n                                                                       :trend-positions  (->> household-co2e-derivation-generation\n                                                                                              (remove #(= \"Scotland\" (:region %)))\n                                                                                              (group-by :region)\n                                                                                              (map (fn [[region coll]] {:region region\n                                                                                                                        :trend  (->> coll\n                                                                                                                                     (map #(vector (double (:year %)) (:tonnes %)))\n                                                                                                                                     trend)}))\n                                                                                              (sort-by :trend)\n                                                                                              (map-indexed (fn [ix m] {:region   (:region m)\n                                                                                                                       :position (inc ix)\n                                                                                                                       :trend    (:trend trend)})))}]\n\n                      (reset! state/household-co2e-derivation-generation-cursor household-co2e-derivation-generation)\n                      (reset! state/household-co2e-derivation-generation-positions-cursor household-co2e-derivation-generation-positions)\n                      (js/console.log (str \"Calculating household-co2e-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-business-waste-by-region-derivations []\n      (let [business-waste-by-region @state/business-waste-by-region-holder]\n\n           (when (some? business-waste-by-region))\n           (js/console.log \"Calculating business-waste-by-region-derivations\")\n\n           (let [start-time (util/now)\n\n                 region-count (->> business-waste-by-region\n                                   (map :region)\n                                   distinct\n                                   count)\n\n                 ;; Roll-up to get values for (region, year) pairs\n                 business-waste-by-region-derivation-generation0 (data-shaping/rollup-business-waste-by-region-materials business-waste-by-region)\n\n                 ;; Scotland (total) -> Scotland average\n                 business-waste-by-region-derivation-generation (map (fn [{:keys [region year tonnes] :as original}] (if (= \"Scotland\" region)\n                                                                                                                       {:region \"Scotland average\"\n                                                                                                                        :year   year\n                                                                                                                        :tonnes (double (/ tonnes region-count))}\n                                                                                                                       original))\n                                                                     business-waste-by-region-derivation-generation0)\n\n                 ;; No actual deriving needed for the composition\n                 business-waste-by-region-derivation-composition business-waste-by-region]\n\n                (reset! state/business-waste-by-region-derivation-generation-cursor business-waste-by-region-derivation-generation)\n                (reset! state/business-waste-by-region-derivation-composition-cursor business-waste-by-region-derivation-composition)\n                (js/console.log (str \"Calculating business-waste-by-region-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-waste-site-derivations []\n      (let [waste-site @state/waste-site-holder]\n\n           (when (some? waste-site))\n           (js/console.log \"Calculating waste-site-derivations\")\n\n           (let [start-time (util/now)\n\n                 waste-site-derivation (data-shaping/count-waste-sites-per-category-per-region waste-site)]\n\n                (reset! state/waste-site-derivation-cursor waste-site-derivation)\n                (js/console.log (str \"Calculating waste-site-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-stirling-bin-collection-derivations []\n      (let [stirling-bin-collection @state/stirling-bin-collection-holder\n            population @state/population-holder]\n\n           (when (and (some? stirling-bin-collection)\n                      (some? population))\n                 (js/console.log \"Calculating stirling-bin-collection-derivations\")\n\n                 (let [start-time (util/now)\n\n                       ;; Roll-up to get values for (region, year, quarter) triples\n                       derivation-generation0 (data-shaping/rollup-stirling-bin-collection-ma-re-mi stirling-bin-collection)\n\n                       ;; Roll-up to get values for (region, year, quarter, material) quadruples\n                       derivation-composition0 (data-shaping/rollup-stirling-bin-collection-re-mi stirling-bin-collection)\n\n                       ;; Calculate the percentage recycled values\n                       derivation-percent-recycled (data-shaping/calc-stirling-bin-collection-percentage-recycled stirling-bin-collection)\n\n                       ;; Filter for missed-bin? then roll-up to get values for (year, quarter) pairs\n                       derivation-missed (->> stirling-bin-collection\n                                              (filter :missed-bin?)\n                                              (group-by (juxt :year :quarter))\n                                              (map (fn [[[year quarter] coll]] {:year    year\n                                                                                :quarter quarter\n                                                                                :tonnes  (->> coll\n                                                                                              (map :tonnes)\n                                                                                              (apply +))})))\n\n                       ;; Prep for the per citizen calculation\n                       population-max-year (->> population (map :year) (apply max)) ;; assume all regions have the same max year\n                       population-for-lookup (group-by (juxt :region :year) population)\n                       lookup-population (fn [region year] (-> population-for-lookup\n                                                               (get [region (min year population-max-year)]) ;; use population-max-year to avoid an out-of-bounds\n                                                               first\n                                                               :population))\n\n                       ;; Calculate the per citizen values\n                       derivation-generation (map (fn [{:keys [region year quarter tonnes]}] {:region  region\n                                                                                              :year    year\n                                                                                              :quarter quarter\n                                                                                              :tonnes  (double (/ tonnes (lookup-population region year)))})\n                                                  derivation-generation0)\n                       derivation-composition (map (fn [{:keys [region year quarter material tonnes]}] {:region   region\n                                                                                                        :year     year\n                                                                                                        :quarter  quarter\n                                                                                                        :material material\n                                                                                                        :tonnes   (double (/ tonnes (lookup-population region year)))})\n                                                   derivation-composition0)]\n\n                      (reset! state/stirling-bin-collection-derivation-generation-cursor derivation-generation)\n                      (reset! state/stirling-bin-collection-derivation-composition-cursor derivation-composition)\n                      (reset! state/stirling-bin-collection-derivation-percent-recycled-cursor derivation-percent-recycled)\n                      (reset! state/stirling-bin-collection-derivation-missed-bins-cursor derivation-missed)\n                      (js/console.log (str \"Calculating stirling-bin-collection-derivations: secs-taken=\" (util/secs-to-now start-time)))))))\n\n\n(defn maybe-calc-stirling-community-food-tonnes-derivations []\n      (let [tonnes @state/stirling-community-food-tonnes-holder]\n\n           (when (some? tonnes))\n           (js/console.log \"Calculating stirling-community-food-tonnes-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation-tonnes tonnes\n\n                 derivation-flow (data-shaping/calc-stirling-community-food-flow tonnes)]\n\n                (reset! state/stirling-community-food-tonnes-derivation-tonnes-cursor derivation-tonnes)\n                (reset! state/stirling-community-food-tonnes-derivation-flow-cursor derivation-flow)\n                (js/console.log (str \"Calculating stirling-community-food-tonnes-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-stirling-community-food-footfall-derivations []\n      (let [footfall @state/stirling-community-food-footfall-holder]\n\n           (when (some? footfall))\n           (js/console.log \"Calculating stirling-community-food-footfall-derivations\")\n\n           (let [start-time (util/now)\n\n                 derivation footfall]\n\n                (reset! state/stirling-community-food-footfall-derivation-cursor derivation)\n                (js/console.log (str \"Calculating stirling-community-food-footfall-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n(defn maybe-calc-household-waste-analysis-derivations []\n      (let [household-waste-analysis @state/household-waste-analysis-holder]\n\n           (when (some? household-waste-analysis))\n           (js/console.log \"Calculating household-waste-analysis-derivations\")\n\n           (let [start-time (util/now)\n\n                 household-waste-analysis-derivation household-waste-analysis]\n\n                (reset! state/household-waste-analysis-derivation-cursor household-waste-analysis-derivation)\n                (js/console.log (str \"Calculating household-waste-analysis-derivations: secs-taken=\" (util/secs-to-now start-time))))))\n\n\n;; -------------------\n\n;; Watch for data updates\n\n(add-watch state/population-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/population-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/population-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/household-waste-holder :household-waste-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-derivations))))\n\n(add-watch state/household-co2e-holder :household-co2e-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-co2e-derivations))))\n\n(add-watch state/business-waste-by-region-holder :business-waste-by-region-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-business-waste-by-region-derivations))))\n\n(add-watch state/waste-site-holder :waste-site-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-waste-site-derivations))))\n\n(add-watch state/stirling-bin-collection-holder :stirling-bin-collection-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-bin-collection-derivations))))\n\n(add-watch state/stirling-community-food-tonnes-holder :stirling-community-food-tonnes-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-tonnes-derivations))))\n\n(add-watch state/stirling-community-food-footfall-holder :stirling-community-food-footfall-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-stirling-community-food-footfall-derivations))))\n\n(add-watch state/household-waste-analysis-holder :household-waste-analysis-derivations-dependency\n           (fn [_key _atom old-state new-state]\n               (when new-state\n                     (maybe-calc-household-waste-analysis-derivations))))\n\n\n"]}