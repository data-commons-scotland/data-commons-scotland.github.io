{"version":3,"sources":["reitit/segment.cljc"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k26488","else__4383__auto__","G__26492","cljs.core/Keyword","data","path-params","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__26493","vec__26494","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__26487","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this26489","other26490","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__26497","cljs.core/keyword-identical?","expr__26498","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","reitit.segment/Match","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__26491","extmap__4419__auto__","G__26500","cljs.core/record?","reitit.segment/->Match","reitit.segment/map->Match","reitit$segment$Segment$_insert$dyn","x__4428__auto__","m__4429__auto__","reitit.segment/-insert","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reitit$segment$Segment$_lookup$dyn","reitit.segment/-lookup","reitit.segment/Segment","this","ps","goog.object/set","_","reitit.segment/-catch-all","children","catch-all","p","reitit.impl/fast-get","clojure.string.join","cljs.core/cons","var_args","G__26504","reitit.segment/segment","js/Error","reitit.segment.segment","wilds","match","children'","reitit.impl/fast-map","wilds?","js/reitit","js/reitit.segment","js/reitit.segment.t_reitit$segment26505","reitit.segment/t_reitit$segment26505","_26507","meta26506","cljs.core/PROTOCOL_SENTINEL","p__26508","vec__26509","seq__26510","first__26511","cljs.core/first","cljs.core/next","p__26515","vec__26516","seq__26517","first__26518","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","reitit.segment/->t_reitit$segment26505","d","cljs.core/not","vec__26512","w","c","cljs.core.juxt","reitit.impl/wild-param","reitit.impl/catch-all-param","cljs.core.conj","or__4126__auto__","p1__26501#","cljs.core.update","and__4115__auto__","clojure.string/blank?","p1__26502#","cljs.core/some","reitit.segment/insert","root","path","reitit.impl/segments","reitit.segment/create","paths","p__26519","vec__26520","segment","reitit.segment/lookup"],"sourcesContent":["(ns reitit.segment\n  (:refer-clojure :exclude [-lookup])\n  (:require [reitit.impl :as impl]\n            [clojure.string :as str]))\n\n(defrecord Match [data path-params])\n\n(defprotocol Segment\n  (-insert [this ps data])\n  (-lookup [this ps path-params]))\n\n(extend-protocol Segment\n  nil\n  (-insert [_ _ _])\n  (-lookup [_ _ _]))\n\n(defn- -catch-all [children catch-all path-params p ps]\n  (-lookup\n    (impl/fast-get children catch-all)\n    nil\n    (assoc path-params catch-all (str/join \"/\" (cons p ps)))))\n\n(defn- segment\n  ([] (segment {} #{} nil nil))\n  ([children wilds catch-all match]\n   (let [children' (impl/fast-map children)\n         wilds? (seq wilds)]\n     ^{:type ::segment}\n     (reify\n       Segment\n       (-insert [_ [p & ps] d]\n         (if-not p\n           (segment children wilds catch-all d)\n           (let [[w c] ((juxt impl/wild-param impl/catch-all-param) p)\n                 wilds (if w (conj wilds w) wilds)\n                 catch-all (or c catch-all)\n                 children (update children (or w c p) #(-insert (or % (segment)) ps d))]\n             (segment children wilds catch-all match))))\n       (-lookup [_ [p & ps] path-params]\n         (if (nil? p)\n           (when match (assoc match :path-params path-params))\n           (or (-lookup (impl/fast-get children' p) ps path-params)\n               (if (and wilds? (not (str/blank? p))) (some #(-lookup (impl/fast-get children' %) ps (assoc path-params % p)) wilds))\n               (if catch-all (-catch-all children' catch-all path-params p ps)))))))))\n\n(defn insert [root path data]\n  (-insert (or root (segment)) (impl/segments path) (map->Match {:data data})))\n\n(defn create [paths]\n  (reduce\n    (fn [segment [p data]]\n      (insert segment p data))\n    nil paths))\n\n(defn lookup [segment path]\n  (-lookup segment (impl/segments path) {}))\n"]}