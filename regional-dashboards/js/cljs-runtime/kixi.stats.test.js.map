{"version":3,"sources":["kixi/stats/test.cljc"],"mappings":"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","names":["kixi.stats.test/p-value","kixi.stats.protocols/p-value","kixi.stats.test/significant?","kixi.stats.protocols/significant?","cljs.core/PROTOCOL_SENTINEL","this__4380__auto__","k__4381__auto__","this__4382__auto__","k26636","else__4383__auto__","G__26650","cljs.core/Keyword","statistic","distribution","h1","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__26651","vec__26652","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__26635","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this26637","other26638","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__26655","cljs.core/keyword-identical?","expr__26656","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kixi.stats.test/TestResult","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__26641","extmap__4419__auto__","G__26659","cljs.core/record?","kixi.stats.test/->TestResult","kixi.stats.test/map->TestResult","this","alternate","and__4115__auto__","G__26645","js/Error","kixi.stats.math/clamp","G__26646","G__26647","kixi.stats.distribution/cdf","kixi.stats.math/abs","alpha","G__26648","critical","kixi.stats.distribution.critical_value","G__26649","var_args","G__26661","kixi.stats.test/test-result","kixi.stats.test.test_result","kixi.stats.test/chi-squared-test","table","margins","kixi.stats.protocols/margin-totals","size","kixi.stats.protocols/size","factors","total","kixi.stats.math/pow","kixi.stats.protocols/grand-total","dof","cljs.core.apply","cljs.core/-","cljs.core/*","cljs.core.map","cljs.core/dec","stat","clojure.math.combinatorics/cartesian-product","cljs.core.partial","cljs.core/apply","cljs.core/map","cljs.core/vector","p__26663","vec__26664","acc","levels","counts","cell","kixi.stats.protocols/cell","e","kixi.stats.math/sq","kixi.stats.distribution/chi-squared","p__26667","p__26668","map__26669","cljs.core/hash-map","map__26670","kixi.stats.test/simple-z-test","mu","sd","mean","n","z","kixi.stats.math/sqrt","kixi.stats.distribution/normal","p__26673","p__26674","map__26675","map__26676","kixi.stats.test/z-test","mean-x","sd-x","n-x","mean-y","sd-y","n-y","sd-xy","p__26681","p__26682","map__26683","map__26684","kixi.stats.test/t-test","mean-a","sd-a","n-a","mean-b","sd-b","n-b","sd-ab","t","kixi.stats.distribution/t","p__26687","p__26688","map__26689","map__26690","kixi.stats.test/simple-t-test"],"sourcesContent":["(ns kixi.stats.test\n  (:require [kixi.stats.distribution :as d]\n            [kixi.stats.math :refer [abs clamp pow sq sqrt]]\n            [kixi.stats.protocols :as p]\n            [clojure.math.combinatorics :refer [cartesian-product]]))\n\n(def p-value p/p-value)\n(def significant? p/significant?)\n\n(defrecord TestResult [statistic distribution h1]\n  p/PTestResult\n  (p-value [this]\n    (p-value this h1))\n  (p-value [this alternate]\n    (when (and statistic distribution alternate)\n      (case alternate\n        :<> (clamp (* 2 (d/cdf distribution (- (abs statistic)))) 0.0 1.0)\n        :<  (d/cdf distribution statistic)\n        :>  (- 1 (d/cdf distribution statistic)))))\n  (significant? [this alpha]\n    (significant? [this alpha h1]))\n  (significant? [this alpha alternate]\n    (when (and statistic distribution alpha alternate)\n      (let [critical (d/critical-value distribution alpha alternate)]\n        (case alternate\n          :<> (> (abs statistic) critical)\n          :<  (< statistic critical)\n          :>  (> statistic critical))))))\n\n(defn test-result\n  ([statistic distribution]\n   (test-result statistic distribution :<>))\n  ([statistic distribution alternate]\n   (->TestResult statistic distribution alternate)))\n\n(defn chi-squared-test\n  \"Calculates the X^2 test of independence for a given contingency table.\n  See kixi.stats.core/cross-tabulate\"\n  [^kixi.stats.protocols.PContingencyTable table]\n  (let [margins (p/margin-totals table)\n        size (p/size table)\n        factors (count size)\n        total (pow (p/grand-total table) (dec factors))\n        dof (apply - (apply * size) 1 (map dec size))\n        stat (->> (apply cartesian-product margins)\n                  (map (partial apply map vector))\n                  (reduce (fn [acc [levels counts]]\n                            (let [cell (p/cell table levels)\n                                  e (/ (apply * counts) total)]\n                              (+ acc (/ (sq (- e cell)) e))))\n                          0))]\n    (test-result stat (d/chi-squared {:k dof}) :>)))\n\n(defn simple-z-test\n  \"Calculates the z-test of statistical significance for a sample mean.\n  mu: the population mean\n  sd: the population standard deviation\n  mean: the sample mean\n  n: the sample size\n  See also: kixi.stats.core/simple-z-test\"\n  [{:keys [mu sd]} {:keys [mean n]}]\n  (when (and (pos? n) (pos? sd))\n    (let [z (double (/ (- mean mu) (/ sd (sqrt n))))]\n      (test-result z (d/normal {:location 0.0 :scale 1.0})))))\n\n(defn z-test\n  \"Calculates the z-test of statistical significance between two sample means.\n  Requires the mean, sd and sample size (n) of both samples.\n  See also: kixi.stats.core/z-test\"\n  [{mean-x :mean sd-x :sd n-x :n}\n   {mean-y :mean sd-y :sd n-y :n}]\n  (let [sd-xy (and (pos? n-x) (pos? n-y)\n                   (sqrt (+ (/ (sq sd-x) n-x)\n                            (/ (sq sd-y) n-y))))\n        z (and sd-xy\n               (pos? sd-xy)\n               (double (/ (- mean-x mean-y) sd-xy)))]\n    (when z\n      (test-result z (d/normal {:location 0.0 :scale 1.0})))))\n\n(defn t-test\n  \"Calculates Welch's unequal variances t-test of statistical significance.\n  Requires the mean, sd and sample size (n) of both samples.\n  See also: kixi.stats.core/t-test\"\n  [{mean-a :mean sd-a :sd n-a :n}\n   {mean-b :mean sd-b :sd n-b :n}]\n  (let [sd-ab (and (pos? n-a) (pos? n-b)\n                   (+ (/ (sq sd-a) n-a)\n                      (/ (sq sd-b) n-b)))\n        t (and sd-ab\n               (/ (- mean-a mean-b)\n                  (sqrt sd-ab)))\n        dof (and (> n-a 1) (> n-b 1)\n                 (/ (sq sd-ab)\n                    (+ (/ (pow sd-a 4) (* n-a n-a (dec n-a)))\n                       (/ (pow sd-b 4) (* n-b n-b (dec n-b))))))]\n    (when (and t dof)\n      (test-result t (d/t {:v dof})))))\n \n(defn simple-t-test\n  \"Calculates the t-test of statistical significance for a sample mean.\n  mu: the population mean\n  sd: the population standard deviation\n  mean: the sample mean\n  n: the sample size\n  See also: kixi.stats.core/simple-t-test\"\n  [{:keys [mu sd]} {:keys [mean n]}]\n  (let [dof (dec n)\n        t (and (pos? sd) (pos? n)\n               (double (/ (- mean mu)\n                          (/ sd (sqrt n)))))]\n    (when (and t (pos? dof))\n      (test-result t (d/t {:v dof})))))\n"]}